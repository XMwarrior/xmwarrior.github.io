<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js练习-手写数独</title>
      <link href="/2022/05/26/sudoku/"/>
      <url>/2022/05/26/sudoku/</url>
      
        <content type="html"><![CDATA[<h3 id="手写数独-步骤解析"><a href="#手写数独-步骤解析" class="headerlink" title="手写数独-步骤解析"></a>手写数独-步骤解析</h3><h4 id="1-生成默认表盘"><a href="#1-生成默认表盘" class="headerlink" title="1. 生成默认表盘"></a>1. 生成默认表盘</h4><pre><code>// 生成9*9宫格function createBoard() &#123;  return JSON.parse(JSON.stringify(new Array(9).fill(new Array(9).fill(&quot;.&quot;))));&#125;</code></pre><h4 id="2-生成终解"><a href="#2-生成终解" class="headerlink" title="2. 生成终解"></a>2. 生成终解</h4><ol><li>预填部分值，降低生成难度：随机生成 1、3、9 区域内容<br><img src="https://upload-images.jianshu.io/upload_images/6315829-7fcb041b60b1fc99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/423/format/webp" alt="1~9 区域"></li></ol><pre><code>// 生成长度为9的1~9随机数组function randomArr9() &#123;  return [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;].sort(() =&gt; Math.random() - 0.5);&#125;// 先设置三个3*3数独值function firstSetValue() &#123;  const firstArea = [0, 3, 6];  firstArea.forEach(function (item) &#123;    const randomArr = randomArr9();    for (let i = 0; i &lt; 3; i++) &#123;      for (let r = 0; r &lt; 3; r++) &#123;        board[item + i][item + r] = randomArr.pop();      &#125;    &#125;  &#125;);&#125;</code></pre><ol start="2"><li>回溯算法，生成剩余未填项。</li></ol><pre><code>// 校验function verify(row, col, val) &#123;  // 校验横竖轴  for (let i = 0; i &lt; 9; i++) &#123;    if (board[i][col] === val || board[row][i] === val) &#123;      return false;    &#125;  &#125;  // 校验3*3宫格  const rect9RowIndex = row - (row % 3);  const rect9ColIndex = col - (col % 3);  for (let i = 0; i &lt; 3; i++) &#123;    for (let r = 0; r &lt; 3; r++) &#123;      const currntVal = board[rect9RowIndex + i][rect9ColIndex + r];      if (currntVal === val) return false;    &#125;  &#125;  return true;&#125;// 填充数独function fillBoard(current) &#123;  const row = (current / 9) | 0;  const col = current % 9;  if (current === 81) return true;  if (board[row][col] !== &quot;.&quot;) return fillBoard(current + 1);  for (let item = 1; item &lt; 10; item++) &#123;    if (verify(row, col, item + &quot;&quot;)) &#123;      board[row][col] = item + &quot;&quot;;      if (fillBoard(current + 1)) return true;      board[row][col] = &quot;.&quot;;    &#125;  &#125;&#125;</code></pre><h4 id="3-“挖洞”"><a href="#3-“挖洞”" class="headerlink" title="3. “挖洞”"></a>3. “挖洞”</h4><ol><li>初级算法</li></ol><pre><code>// 抠除算法-初级（全盘随机）function cutOut0() &#123;  const index = 0;  const boardArray = new Array(81).fill(&quot;0&quot;);  const randomBoard = board    .map((item, i) =&gt; item.map((num, j) =&gt; &quot;&quot; + i + j))    .flat()    .sort(() =&gt; Math.random() - 0.5);  for (let i = 0; i &lt; randomBoard.length; i++) &#123;    const element = randomBoard[i].split(&quot;&quot;);    const value = board[element[0]][element[1]];    const others = &quot;123456789&quot;.replace(value, &quot;&quot;).split(&quot;&quot;);    const canClear = others.every((num) =&gt; !verify(element[0], element[1], num));    if (canClear) &#123;      cacheTip(element, board[element[0]][element[1]]);      board[element[0]][element[1]] = &quot;&quot;;    &#125;  &#125;&#125;</code></pre><ol start="2"><li>中级算法</li></ol><pre><code>// 抠除算法-中级（间隔）function cutOut1() &#123;  const index = 0;  const boardArray = new Array(81).fill(&quot;0&quot;);  const randomBoard = board.map((item, i) =&gt; item.map((num, j) =&gt; &quot;&quot; + i + j)).flat();  const spacingBoard = randomBoard    .filter((item) =&gt; &#123;      if (Number(item[0] % 2)) &#123;        return Number(item) % 2;      &#125; else &#123;        return !(Number(item) % 2);      &#125;    &#125;)    .sort((prev, next) =&gt; &#123;      const isSameRow = prev[0] === next[0];      if (isSameRow &amp;&amp; Number(prev[0] % 2) &amp;&amp; Number(next[0] % 2)) &#123;        return -1;      &#125; else &#123;        return 1;      &#125;    &#125;);  const others = randomBoard.filter((item) =&gt; &#123;    if (Number(item[0] % 2)) &#123;      return !Number(item) % 2;    &#125; else &#123;      return Number(item) % 2;    &#125;  &#125;);  const concatArray = spacingBoard.concat(others);  for (let i = 0; i &lt; concatArray.length; i++) &#123;    const element = concatArray[i].split(&quot;&quot;);    const value = board[element[0]][element[1]];    const others = &quot;123456789&quot;.replace(value, &quot;&quot;).split(&quot;&quot;);    const canClear = others.every((num) =&gt; !verify(element[0], element[1], num));    if (canClear) &#123;      cacheTip(element, board[element[0]][element[1]]);      board[element[0]][element[1]] = &quot;&quot;;    &#125;  &#125;&#125;</code></pre><ol start="3"><li>高级算法</li></ol><pre><code>// 抠除算法-高级（蛇形）function cutOut2() &#123;  const index = 0;  const boardArray = new Array(81).fill(&quot;0&quot;);  const randomBoard = board.map((item, i) =&gt; item.map((num, j) =&gt; &quot;&quot; + i + j)).flat();  randomBoard.sort((prev, next) =&gt; &#123;    const isSameRow = prev[0] === next[0];    if (isSameRow &amp;&amp; Number(prev[0] % 2) &amp;&amp; Number(next[0] % 2)) &#123;      return -1;    &#125; else &#123;      return 1;    &#125;  &#125;);  for (let i = 0; i &lt; randomBoard.length; i++) &#123;    const element = randomBoard[i].split(&quot;&quot;);    const value = board[element[0]][element[1]];    const others = &quot;123456789&quot;.replace(value, &quot;&quot;).split(&quot;&quot;);    const canClear = others.every((num) =&gt; !verify(element[0], element[1], num));    if (canClear) &#123;      cacheTip(element, board[element[0]][element[1]]);      board[element[0]][element[1]] = &quot;&quot;;    &#125;  &#125;&#125;</code></pre><ol start="4"><li>骨灰级算法</li></ol><pre><code>// 抠除算法-骨灰级（从上到下，从左到右）function cutOut3() &#123;  const index = 0;  const boardArray = new Array(81).fill(&quot;0&quot;);  const randomBoard = board.map((item, i) =&gt; item.map((num, j) =&gt; &quot;&quot; + i + j)).flat();  for (let i = 0; i &lt; randomBoard.length; i++) &#123;    const element = randomBoard[i].split(&quot;&quot;);    const value = board[element[0]][element[1]];    const others = &quot;123456789&quot;.replace(value, &quot;&quot;).split(&quot;&quot;);    const canClear = others.every((num) =&gt; !verify(element[0], element[1], num));    if (canClear) &#123;      cacheTip(element, board[element[0]][element[1]]);      board[element[0]][element[1]] = &quot;&quot;;    &#125;  &#125;&#125;</code></pre><h4 id="4-添加操作"><a href="#4-添加操作" class="headerlink" title="4. 添加操作"></a>4. 添加操作</h4><ol><li><p>绑定单元格事件</p><ul><li>（1）“选中未填格”<ul><li>高亮相关 20 格，并区别高亮选中格</li><li>启用数字键盘、提示按钮</li></ul></li><li>（2）“选中已填格”<ul><li>高亮相关 20 格，高亮其他相同数字格</li><li>禁用用数字键盘、提示按钮</li></ul></li><li>根据当前单元格 class，修改擦除按钮禁用状态</li></ul></li><li><p>数字键盘输入事件</p><ul><li>未填格输入正确值时，<ul><li>切换为（2）状态</li></ul></li><li>未填格输入错误值时，<ul><li>切换为（1）状态</li><li>高亮错误样式、启用擦除按钮</li></ul></li></ul></li><li><p>提示按钮</p><ul><li>填写正确值</li><li>切换为（2）状态</li><li>清空错误样式、禁用擦除按钮</li></ul></li><li><p>擦除按钮</p><ul><li>清空选中单元格与样式</li></ul></li></ol><h4 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h4><ul><li>存在三个全局变量<ul><li>board：整体 value 表盘</li><li>selectedCell：选中的未填格 id</li><li>tips：存储“挖洞”挖掉的位置，用于提示操作</li></ul></li><li>较完整的数独游戏还缺少下面几个功能：<ul><li>撤销功能</li><li>笔记功能</li><li>错误限制次数</li><li>提示限制次数</li><li>记录游戏时间</li></ul></li></ul><h4 id="游戏入口-数独-by-小明"><a href="#游戏入口-数独-by-小明" class="headerlink" title="游戏入口 数独 by 小明"></a>游戏入口 <a href="/pages/%E6%95%B0%E7%8B%AC/index.html">数独 by 小明</a></h4><hr><p><strong>参考文档</strong></p><ul><li><a href="https://max.book118.com/html/2017/0622/117297319.shtmhttps://max.book118.com/html/2017/0622/117297319.shtm">基于挖洞思想数独游戏生成算法.pdf</a></li><li><a href="https://www.jianshu.com/p/e84e016a5aa0">js 数独解析，以及数独九宫格生成</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> js练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js练习 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化-内存泄漏问题分析</title>
      <link href="/2022/05/20/performanceoptimization/"/>
      <url>/2022/05/20/performanceoptimization/</url>
      
        <content type="html"><![CDATA[<h3 id="排查内存泄漏方法（Chrome）"><a href="#排查内存泄漏方法（Chrome）" class="headerlink" title="排查内存泄漏方法（Chrome）"></a>排查内存泄漏方法（Chrome）</h3><ul><li>利用 Chrome 调试工具的内存快照：<ul><li>F12 &#x3D;&gt; 内存 &#x3D;&gt; 拍摄堆快照</li><li>&#x3D;&gt; 摘要、比较、控制、统计信息</li><li>重点检查 VueComponent</li></ul></li></ul><p><img src="https://pic4.zhimg.com/80/v2-63ecccec3bacd2f15b1308f69101c9b7_720w.jpg" alt="内存"></p><p><img src="https://pic4.zhimg.com/80/v2-5641590f57be973c96a55d123eebbdaf_720w.jpg" alt="内存"></p><ul><li>利用 Chrome 调试工具的性能录制：<ul><li>JS 堆、文档、节点、监听器、GPU 内存</li></ul></li></ul><p><img src="https://p3.itc.cn/images01/20210806/33156e89f7d44b60a756ce3754577a61.jpeg" alt="性能"></p><p>注意： console 控制台信息造成的内存泄漏、注释大法好</p><h3 id="闭包会造成内存泄漏？"><a href="#闭包会造成内存泄漏？" class="headerlink" title="闭包会造成内存泄漏？"></a>闭包会造成内存泄漏？</h3><p><a href="/pages/%E9%97%AD%E5%8C%85%E5%BC%95%E8%B5%B7%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E4%BA%86%E4%B9%88/index.html">闭包垃圾回收测试</a></p><ol><li>测试 1：下面两种情况，函数执行时，造成内存溢出了么？</li></ol><pre><code>// 1.var outerFunction = function (n) &#123;  var counter = 0;  var bigStr = new Array(100000000).join(&quot;*&quot;);  return function () &#123;    bigStr += n;  &#125;;&#125;;var add = outerFunction(5);var interval = setInterval(add, 10);</code></pre><pre><code>// 2.var outerFunction = function (n) &#123;  var counter = 0;  var bigStr = 0;  return function () &#123;    bigStr = new Array(100000000).join(&quot;*&quot;);    bigStr += n;  &#125;;&#125;;var add = outerFunction(5);var interval = setInterval(add, 10);</code></pre><ol start="2"><li>测试 2：2 秒后，下面三种情况内存占用从小到大的顺序是？</li></ol><pre><code>// 1.var str = new Array(100000000).join(&quot;*&quot;);var interval = setInterval(() =&gt; &#123;  console.log(str[0]);&#125;, 200);var timeout= setTimeout(() =&gt; &#123;  clearInterval(interval);&#125;, 2000);</code></pre><pre><code>// 2.var str = new Array(100000000).join(&quot;*&quot;);var interval = setInterval(() =&gt; &#123;  console.log(str[0]);&#125;, 200);var timeout= setTimeout(() =&gt; &#123;  clearInterval(interval);interval=null;&#125;, 2000);</code></pre><pre><code>// 3.var str = new Array(100000000).join(&quot;*&quot;);var interval = setInterval(() =&gt; &#123;  console.log(str[0]);&#125;, 200);var timeout= setTimeout(() =&gt; &#123;  clearInterval(interval);interval=null;str=&quot;&quot;;&#125;, 2000);</code></pre><ol start="3"><li>测试 3：节流函数 1、节流函数 2、防抖函数都是闭包函数;当其内部再嵌套闭包函数时；会影响闭包可被回收么？</li></ol><pre><code>// 节流函数1var throttle1 = function (fn, wait) &#123;  var lastTime = 0;  var obj = &#123;&#125;;  return function () &#123;    var nowTime = new Date().getTime();    if (nowTime - lastTime &gt; wait) &#123;      // fn.bind(obj);      fn.apply(this, arguments);      lastTime = nowTime;    &#125;  &#125;;&#125;;// 节流函数2var throttle = function (fn, delay) &#123;  let timer = null;  return function () &#123;    if (timer) return;    timer = setTimeout(() =&gt; &#123;      fn.apply(this, arguments);      clearTimeout(timer);      timer = null;    &#125;, delay);  &#125;;&#125;;// 防抖函数var debounce = function (fn, wait) &#123;  var timer = null;  return function (...args) &#123;    clearTimeout(timer);    timer = setTimeout(() =&gt; &#123;      fn.apply(this, args);    &#125;, wait);  &#125;;&#125;;// 执行测试var fn = function (index) &#123;  var str = index;  console.log(index);&#125;;var t = throttle1(fn, 300);//throttle、debouncevar index = 300;var interval = setInterval(function () &#123;  if (index &gt; 0) &#123;    index--;    t(index);  &#125; else &#123;    clearInterval(interval);    // t = null;  &#125;&#125;, 20);</code></pre><ul><li>测试 1 结论：<ul><li>闭包每执行一次都会造成内存增加</li><li>当 V8 引擎内存达到 1464MB 时，会触发垃圾回收</li><li>垃圾回收机制能正常回收闭包函数执行时累加的内存占用</li><li>垃圾回收机制不能回收闭包函数作用域（堆空间）</li></ul></li><li>测试 2 结论：<ul><li>打断闭包的引用能使闭包可被回收</li><li>栈变量（全局变量属于栈变量）不会被回收</li></ul></li><li>测试 3 结论：<ul><li>闭包嵌套闭包也能正常回收</li><li>闭包调用完毕后，将引用打断（置为 null），根据闭包实现方式不同，存在差异；但不置为 null 影响不大</li><li>控制台内容、注释占用内存</li><li>setInterval、setTimeout 第一个参数为匿名函数时,默认会造成闭包;bind 方法是闭包</li></ul></li></ul><p>注：为保证测试结果准确，使用浏览器无痕模式，步骤需清空 console、手动触发垃圾回收，然后开启新的录制&#x3D;&gt;刷新页面</p><p><a href="/pages/ajax%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%A4%BA%E4%BE%8B/index.html">ajax 内存泄漏测试</a></p><p>V8 引擎测试结论:</p><ul><li>Jquery 的 ajax 方法调用完毕后，残留引用 XMLHttprequest,置不置为 null，对垃圾回收无影响。</li><li>随着循环调用 ajax，内存会缓慢溢出</li><li>对于长期不刷新的网页应用，尽量避免定时不断调用闭包</li></ul><h3 id="项目内存泄漏问题分析："><a href="#项目内存泄漏问题分析：" class="headerlink" title="项目内存泄漏问题分析："></a>项目内存泄漏问题分析：</h3><p><a href="http://192.168.0.30:44391/">水厂项目-内存泄漏问题</a></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>针对性配置菜单、权限（单独测试“设备运维-人工巡检-巡检任务页”）</li><li>步骤：清空 GC &#x3D;&gt;截取初始堆快照&#x3D;&gt;操作&#x3D;&gt;截取堆快照&#x3D;&gt;对比分析（配合“注释大法”）</li><li>排查顺序：VueComponent、Object.constructor、Array</li></ol><h4 id="泄漏问题记录"><a href="#泄漏问题记录" class="headerlink" title="泄漏问题记录"></a>泄漏问题记录</h4><ol><li>VueComponent：aw-echarts 组件销毁前未销毁 echarts 实例（dispose 方法）</li><li>Array：$backToLogin 方法引用</li></ol><pre><code>window.backToLogin = function () &#123;  location.href = &quot;/index.html#/login&quot;;&#125;;// 原写法Vue.prototype.$backToLogin = window.backToLogin;// 改后Vue.prototype.$backToLogin = function () &#123;  location.href = &quot;/index.html#/login&quot;;&#125;;</code></pre><ol start="3"><li>svg-sprite-loader 拓展插件造成，需全局引入 svg</li></ol><pre><code>// 统一引入svgimport &quot;@/assets/images/logo-l.svg&quot;;import &quot;@/assets/images/logo-r.svg&quot;;import &quot;@/assets/images/logoA.svg&quot;;import &quot;@/assets/images/e403.svg&quot;;import &quot;@/assets/images/noData.svg&quot;;import &quot;@/assets/images/noCP.svg&quot;;import &quot;@/assets/images/e404.svg&quot;;import &quot;@/assets/images/portaHome/play.svg&quot;;</code></pre><ol start="4"><li>地图绘制点线组件 MapLineAndMarkers</li></ol><p>排查中…</p><hr><p><strong>参考文档</strong></p><ul><li><p><a href="https://segmentfault.com/a/1190000021927852">JavaScript 内存机制</a></p><ul><li>栈空间（stack）：原始数据类型、引用关系</li><li>堆空间（heap）：引用数据类型</li><li>垃圾回收机制：<ul><li>引用计数算法</li><li>标记清除算法（Mark-Sweep）</li><li>标记合并算法（Mark-Compact）</li></ul></li></ul></li><li><p><a href="https://segmentfault.com/a/1190000025129635">深入理解 Chrome V8 垃圾回收机制</a></p><ul><li>Chrome 垃圾回收算法：<ul><li>副垃圾回收器（Scavenge）：新生代的垃圾回收–20%<ul><li>Scavenge 执行频率快，会造成全停顿（stop-the-world）：暂停 JavaScript 应用、暂停主线程，造成卡顿&lt;并发、并行&gt;</li></ul></li><li>主垃圾回收器（Mark-Sweep &amp; Mark-Compact）：老生代的垃圾回收–80%<ul><li>堆中的内存大小超过某个阈值之后触发</li></ul></li><li>针对卡顿问题， 衍生出 Orinoco - 项目代号的优化项目：<ul><li>增量标记 （Incremental marking）：将原本的标记全堆对象拆分为一个一个任务，让其穿插在 JavaScript 应用逻辑之间执行，增量标记在堆的大小达到一定的阈值时启用</li><li>懒性清理 （Lazy sweeping）：优先照顾 JavaScript 逻辑代码先执行，按增量标记顺序逐一清理非活动对象内存</li><li>（增量标记&amp;懒性清理）- 逐一清理，衍生出“写屏障技术”：记录这些引用关系的变化</li><li>（增量标记&amp;懒性清理）造成的问题：<ul><li>并没有减少主线程的总暂停的时间，甚至会略微增加</li><li>由于写屏障（Write-barrier）机制的成本，增量标记可能会降低应用程序的吞吐量</li></ul></li><li>并发（Concurrent）：主线程与 GC 线程</li><li>并行（Parallel）GC 线程再拆分辅助线程</li></ul></li><li>副垃圾回收器、主垃圾回收器都采用并行+并发方式</li></ul></li></ul></li><li><p><a href="https://segmentfault.com/a/1190000018161588?utm_source=sf-similar-article">GO GC 垃圾回收机制</a></p><ul><li>增量标记衍生“三色标记算法”：<ul><li>白色：可回收</li><li>灰色：待处理 存在栈引用的对象</li><li>黑色：不可回收</li></ul></li><li><img src="https://image-static.segmentfault.com/273/244/2732449449-5c66324354fa8" alt="三色标记算法"></li></ul></li><li><p><a href="https://segmentfault.com/a/1190000019828838">搞懂闭包</a></p><ul><li>执行上下文：函数每次执行，都会生成一个会创建一个称为执行上下文的内部对象（AO 对象，可理解为函数作用域），这个 AO 对象会保存这个函数中所有的变量值和该函数内部定义的函数的引用。</li><li>作用域链：链状执行上下文集合</li></ul></li><li><p><a href="https://zhuanlan.zhihu.com/p/22486908">JS 中的闭包是什么？</a></p><ul><li>内存泄露：是指你用不到（访问不到）的变量，依然占居着内存空间</li><li>个人理解：被引用上下文作用域的作用域</li></ul></li><li><p><a href="https://www.cnblogs.com/rubylouvre/p/3345294.html">js 闭包测试-司徒正美</a></p><ul><li>仅列举 V8：<ol><li>闭包内未被引用变量 - 回收</li><li>闭包内未被引用变量引用引用变量- 回收</li><li>eval - 不回收</li><li>间接调用（window.eval）回收</li><li>多个匿名函数 不回收</li><li>with 表达式 不回收</li><li>catch 表达式 看原文 -_-|||</li><li>嵌套函数中声明的同名变量 回收</li></ol></li></ul></li><li><p>Vue 项目内存泄漏分析：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/321380652">Vue 遇到的内存泄漏排查处理</a></p><ul><li>子组件嵌套组件避免太深，太多层级。</li><li>作者未验证观点：<ul><li>子组件 beforeDestroy 的时候，把变量置 null？</li><li>IView 的 Modal 本身是有内存泄漏</li><li>Ztree 本身有少许泄漏，需调用 API 手动销毁</li><li>父组件要传值给子组件的 props 变量，在关闭时，能置空的尽量置空</li><li>watch 部分，也会有可能导致父组件一直 watch 挂载着导致子组件没有被销毁</li><li>v-show 控制子组件，要在它的外层 div 加个 v-if 控制。</li></ul></li><li>递归渲染？</li></ul></li><li><p><a href="https://juejin.cn/post/6844903761744265224?utm_source=wechat_session&utm_medium=social&utm_oi=1460458883211276289#heading-5">记一次网页内存溢出分析及解决实践</a></p><ul><li>集中在 beforeDestroy 解绑组件绑定事件<img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/1/14/168482c7f34ad167~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp"></li></ul></li><li><p><a href="https://www.jianshu.com/p/d8068123278a">vuejs 切换路由导致内存泄漏（各种回答收集）</a></p><ul><li><img src="https://avatars.githubusercontent.com/u/499550?s=88&u=de41ec9325e8a92e281b96a1514a0fd1cd81ad4a&v=4" alt="yyx990803">2017 年解决过 v-model 内存泄漏问题</li><li>如果数据庞大，不要用 vue 的双向绑定</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-单页面应用</title>
      <link href="/2020/03/18/singlepageapplication/"/>
      <url>/2020/03/18/singlepageapplication/</url>
      
        <content type="html"><![CDATA[<h3 id="前端架构原理"><a href="#前端架构原理" class="headerlink" title="前端架构原理"></a>前端架构原理</h3><p>本章前半部分讲解了MVC、MVVM架构的原理，针对此部分内容，我整理了两篇文章：</p><ul><li><a href="/2020/03/13/mvc">架构模式-MVC</a></li><li><a href="/2020/03/15/mvvm">架构模式-MVVVM</a></li></ul><h3 id="前端架构选型"><a href="#前端架构选型" class="headerlink" title="前端架构选型"></a>前端架构选型</h3><p>框架选型需要考虑的因素：</p><ol><li>框架情况调研<ul><li>是否能满足大部分应用的需求？</li><li>是否有丰富的组件库？</li><li>社区支持怎么样？</li><li>替换成本</li></ul></li><li>团队是否能快速的掌握框架。<ul><li>根据不同基础的团队，降低学习成本。</li></ul></li><li>框架的生态系统。<ul><li>足够的功能组件、库支持，保证开发专注于业务。</li></ul></li><li>浏览器的兼容性。<ul><li>业务方向限定选择范围。</li></ul></li><li>后期维护成本和难度。<ul><li>越大型的项目，越需要大而全的框架。</li></ul></li><li>最小的迁移代价。<ul><li>框架间迁移项目</li><li>框架的向下兼容性。</li></ul></li></ol><h4 id="大而全还是小而美"><a href="#大而全还是小而美" class="headerlink" title="大而全还是小而美"></a>大而全还是小而美</h4><ol><li>大而全。（例如：Angular）<ul><li>优点：功能全，开箱即用，文档详细，规范准则多，代码质量高。</li><li>缺点：体积大，上手成本、难度高，规范准则多。</li></ul></li><li>小而美。（例如：React）<ul><li>优点：灵活性高，可定制度高，上手成本、难度底。</li><li>缺点：维护成本高，代码质量低。</li></ul></li></ol><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>优点：不需要DOM操作、组件化思想、JSX模板、多平台领域支持。<br>缺点：为优化DOM操作而生，需要依赖其他库完成项目搭建。</p><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h4><p>优点：开箱即用，自带完整应用所需要的所有要素；完善的开发规范、指南。<br>缺点：需严格按照规范编码，相应的框架问题不易修改。</p><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><p>优点：上手难度低，可轻量化引用，<br>缺点：多依赖，维护成本高</p><h3 id="启动前端应用"><a href="#启动前端应用" class="headerlink" title="启动前端应用"></a>启动前端应用</h3><p>通用流程：</p><ul><li>寻找合适的脚手架（star）</li><li>选择合适的UI框架&#x2F;组件库。创建自己的组件库</li><li>确认浏览器支持范围</li><li>明确响应式设计需求</li><li>服务端渲染。（作用：SEO、更快的页面渲染速度）</li></ul><hr><p><strong>《前端架构：从入门到微前端》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
            <tag> 单页面应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构模式-MVVM</title>
      <link href="/2020/03/15/mvvm/"/>
      <url>/2020/03/15/mvvm/</url>
      
        <content type="html"><![CDATA[<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM是Model-View-ViewModel的简写。</p><p><img src="https://cdn.img.wenhairu.com/images/2020/03/15/miqOA.png" alt="MVVM功能图1"></p><h3 id="简介与原理"><a href="#简介与原理" class="headerlink" title="简介与原理"></a>简介与原理</h3><blockquote><p>MVVM是一种架构模式，并非一种框架，是一种思想，一种组织和管理代码的艺术。它利用数据绑定、属性依赖、路由事件、命令等特性实现高效灵活的架构。</p></blockquote><p>前端MVVM框架的原理就是通过观察和订阅来进行联动操作，以自动触发各种逻辑函数。如图：</p><p><img src="https://cdn.img.wenhairu.com/images/2020/03/15/miFlT.png" alt="MVVM功能图2"></p><ul><li>事件驱动（DOM Listeners）。指传统的DOM事件触发函数操作。</li><li>Controller中间件，框架封装部分。——利用发布订阅模式、JavaScript模板引擎生成DOM，绑定与ViewModel的依赖关系，实现ViewModel数据变化时，更新（Setter）View视图；DOM操作时，更新ViewModel数据。从而实现双向绑定。</li><li>ViewModel。编写操作View、Model逻辑的部分。编码规则根据前端框架不同而改变。</li><li>Model。数据存储部分。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> mvvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式&amp;发布订阅模式</title>
      <link href="/2020/03/15/observerpattern/"/>
      <url>/2020/03/15/observerpattern/</url>
      
        <content type="html"><![CDATA[<p><strong>观察者模式</strong>定义了对象间的一种一对多的依赖关系。而<strong>发布订阅模式</strong>是观察者模式的衍生模式，它进一步解耦了发布者与观察者的依赖关系，并且能够更细粒度的控制依赖关系。</p><h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h2><h3 id="Observer-定义"><a href="#Observer-定义" class="headerlink" title="Observer 定义"></a>Observer 定义</h3><blockquote><p>观察者模式（Observer Pattern）：定义了对象间一种一对多的依赖关系，当目标对象 Subject 的状态发生改变时，所有依赖它的对象 Observer 都会得到通知。</p></blockquote><h3 id="Observer-模式结构"><a href="#Observer-模式结构" class="headerlink" title="Observer 模式结构"></a>Observer 模式结构</h3><ol><li>Subject:目标者对象。</li><li>Observer:观察者对象。</li></ol><p>Subject与Observer需要一一对应的逻辑耦合方法。由Subject管理订阅、取消订阅方法。</p><h3 id="Observer-前端代码实现"><a href="#Observer-前端代码实现" class="headerlink" title="Observer 前端代码实现"></a>Observer 前端代码实现</h3><p><a href="https://codepen.io/xmwarrior/pen/VwLxLPd?editors=1010">观察者模式</a></p><pre class=" language-bash"><code class="language-bash">// 目标者类class Subject <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  constructor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>  addListener<span class="token punctuation">(</span>eventName, observer<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>.events.push<span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>      this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        events: <span class="token punctuation">[</span>observer<span class="token punctuation">]</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> this<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  removeListener<span class="token punctuation">(</span>eventName, observer<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const index <span class="token operator">=</span> this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>.events.findIndex<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">==</span><span class="token operator">=</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    index <span class="token operator">></span> -1 <span class="token operator">&amp;&amp;</span> this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>.events.splice<span class="token punctuation">(</span>index, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> this<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  publish<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>.events.forEach<span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        observer.update <span class="token operator">&amp;&amp;</span> observer.update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 观察者类class Observer <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  constructor<span class="token punctuation">(</span>id, name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>    this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  // 目标对象更新时触发的回调  update<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    console.log<span class="token punctuation">(</span>`目标者通知我更新了，我是：$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;this.name&amp;#125;`);</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 实例化目标者<span class="token keyword">let</span> subject <span class="token operator">=</span> new Subject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 实例化两个观察者<span class="token keyword">let</span> obs1 <span class="token operator">=</span> new Observer<span class="token punctuation">(</span><span class="token string">"a"</span>, <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obs2 <span class="token operator">=</span> new Observer<span class="token punctuation">(</span><span class="token string">"b"</span>, <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obs3 <span class="token operator">=</span> new Observer<span class="token punctuation">(</span><span class="token string">"c"</span>, <span class="token string">"小懒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 向目标者添加观察者subject.addListener<span class="token punctuation">(</span><span class="token string">"listen"</span>, obs1<span class="token punctuation">)</span><span class="token punctuation">;</span>subject.addListener<span class="token punctuation">(</span><span class="token string">"listen"</span>, obs2<span class="token punctuation">)</span><span class="token punctuation">;</span>subject.addListener<span class="token punctuation">(</span><span class="token string">"listen2"</span>, obs3<span class="token punctuation">)</span><span class="token punctuation">;</span>// 目标者通知更新subject.publish<span class="token punctuation">(</span><span class="token string">"listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject.publish<span class="token punctuation">(</span><span class="token string">"listen2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="发布订阅模式-Publisher-amp-amp-Subscriber"><a href="#发布订阅模式-Publisher-amp-amp-Subscriber" class="headerlink" title="发布订阅模式(Publisher &amp;&amp; Subscriber)"></a>发布订阅模式(Publisher &amp;&amp; Subscriber)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>发布订阅模式：基于一个事件（主题）通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。</p></blockquote><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ol><li>Subject:目标者对象。</li><li>Observer:观察者对象。</li><li>Broker:事件中心。</li></ol><p>Subject与Observer完全解耦。由Observer管理订阅、取消订阅方法。</p><h3 id="发布订阅模式-前端代码实现"><a href="#发布订阅模式-前端代码实现" class="headerlink" title="发布订阅模式-前端代码实现"></a>发布订阅模式-前端代码实现</h3><p>为了便于大家理解，下面代码中创建了Observer观察者类。如果是前端具体的DOM更新场景下，可查看“DOM场景示例”——<a href="https://codepen.io/xmwarrior/pen/XWbqrzg?editors=0010">发布订阅模式</a></p><pre class=" language-bash"><code class="language-bash">// 目标者类class Subject <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  constructor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>  addListener<span class="token punctuation">(</span>eventName, callback<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>.events.push<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> callback.call<span class="token punctuation">(</span>this, eventName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>      this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        events: <span class="token punctuation">[</span>          function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> callback.call<span class="token punctuation">(</span>this, eventName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token punctuation">]</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> this<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  removeListener<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    delete this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> this<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  publish<span class="token punctuation">(</span>eventName, eventIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>.events.forEach<span class="token punctuation">(</span>callback <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        callback <span class="token operator">&amp;&amp;</span> callback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 观察者类class Observer <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  constructor<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  // 目标对象更新时触发的回调  update<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    console.log<span class="token punctuation">(</span>`目标者通知我更新了，我是：$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;this.name&amp;#125;`);</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 实例化目标者const subject <span class="token operator">=</span> new Subject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 实例化两个观察者<span class="token keyword">let</span> obs1 <span class="token operator">=</span> new Observer<span class="token punctuation">(</span><span class="token string">'前端开发者'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obs2 <span class="token operator">=</span> new Observer<span class="token punctuation">(</span><span class="token string">'后端开发者'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 事件中心subject.addListener<span class="token punctuation">(</span><span class="token string">"gotoclass"</span>, function<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  obs1.update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>subject.addListener<span class="token punctuation">(</span><span class="token string">"gotoclass"</span>, function<span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  obs2.update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>// 目标者通知更新subject.publish<span class="token punctuation">(</span><span class="token string">"gotoclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 观察者模式 </tag>
            
            <tag> 发布订阅模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构模式-MVC</title>
      <link href="/2020/03/13/mvc/"/>
      <url>/2020/03/13/mvc/</url>
      
        <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>好的MVC架构，能实现View与Model层的分离、可替代。拥有条理、逻辑清晰的代码结构。</p><h3 id="简介与架构理念"><a href="#简介与架构理念" class="headerlink" title="简介与架构理念"></a>简介与架构理念</h3><blockquote><p>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式。使用MVC的目的是 <strong>将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式</strong>。</p></blockquote><p>核心理念：<strong>分离</strong></p><h3 id="前端领域的理解"><a href="#前端领域的理解" class="headerlink" title="前端领域的理解"></a>前端领域的理解</h3><p>当理解MVC的三个组成部分时，只有抓住核心理念，才能深刻的理解其中的含义，并实际应用。</p><h4 id="View（表现层）"><a href="#View（表现层）" class="headerlink" title="View（表现层）"></a>View（表现层）</h4><p>view层的主要作用是：实现DOM元素与Controller之间的 <strong>“绑定”</strong>。</p><p>因此view的主要内容则是：</p><ul><li>事件绑定Controller方法</li><li>方法绑定Controller方法</li></ul><pre class=" language-bash"><code class="language-bash">document.getElementId<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>.addEventListener<span class="token punctuation">(</span><span class="token string">'eventName'</span>,controller<span class="token punctuation">)</span><span class="token punctuation">;</span>document.getElementId<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>.innerText <span class="token operator">=</span> Controller.getModelByKey<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Model（数据层-模型层）"><a href="#Model（数据层-模型层）" class="headerlink" title="Model（数据层|模型层）"></a>Model（数据层|模型层）</h4><p>Model层的主要作用是：保证数据的 <strong>“纯净”</strong> 存储。</p><p>如果你以前对Ajax数据请求属于哪部分有疑问，那么从纯净角度来看，它并不应该属于Model部分。</p><h4 id="Controller（领域层-控制层）"><a href="#Controller（领域层-控制层）" class="headerlink" title="Controller（领域层|控制层）"></a>Controller（领域层|控制层）</h4><p>Controller层的主要作用是：<strong>“联接”</strong> View层与Model层。</p><p>因此Controller的主要内容则是：</p><ul><li>View的事件绑定函数</li><li>Model的数据的获取、处理函数</li></ul><p>要做好MVC架构，一定要把握好各个层的侧重方向，划分好功能区域，保证功能区的<strong>分离</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvc </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-中介者模式</title>
      <link href="/2020/03/12/mediatorpattern/"/>
      <url>/2020/03/12/mediatorpattern/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>中介者模式（Mediator Pattern）：定义一个中介对象来封装一系列对象之间的交互。中介者使各个对象不需要显示地相互引用，从而使其耦合性松散，而且可以独立地改变他们之间的交互。</p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>此处引用<a href="https://www.jianshu.com/p/738b476c9912">中介者模式</a>的一段话。</p><blockquote><ol><li>Mediator:抽象中介者。在里面定义各个同事之间交互需要的方法，可以是公共的通信方法，也可以是小范围的交互方法。</li><li>ConcreteMeditor:具体中介者。它需要了解并维护各个同事对象，并负责具体的协调各同事对象的交互关系。</li><li>同事类:如果一个对象会影响其他的对象，同时也会被其他对象影响，那么这两个对象称为同事类。在类图中，同事类只有一个，这其实是现实的省略，在实际应用中，同事类一般由多个组成，他们之间相互影响，相互依赖。同事类越多，关系越复杂。并且，同事类也可以表现为继承了同一个抽象类的一组实现组成。在中介者模式中，同事类之间必须通过中介者才能进行消息传递。</li><li>Colleague:抽象同事类，主要约束同事对象的类型，并实现一些具体同事类之间的公共功能，比如，每个具体同事类都应该知道中介者对象，也就是具体同事类都会持有中介者对象，都可以到这个类里面。</li><li>ConcreteColleague:具体同事类，实现自己的业务，需要与其他同事通信时候，就与持有的中介者通信，中介者会负责与其他同事类交互。</li></ol></blockquote><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>松散耦合</li><li>集中控制交互</li><li>多对多变为一对多</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>过多集中化。中介者的复杂度会随同事对象的交互复杂度提高。</li></ul><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>为防止依赖的第三方组件库出现问题，可以通过中介者模式，松散系统与第三方UI库的耦合。通过“釜底抽薪”的模式，替换出问题的具体组件，或者逐步替换第三方组件。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 中介者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/03/12/designpatterns/"/>
      <url>/2020/03/12/designpatterns/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设计模式是为特定场景下的问题而定制的解决方案。特定场景指问题所在的重复出现的场景，问题指特定环境下你想达成的目标。同样的问题在不同的环境下会有不同的限制和挑战。定制的解决方案是指在特定环境下克服了问题的限制条件而达成目标的一种设计。</p><h3 id="分类大纲"><a href="#分类大纲" class="headerlink" title="分类大纲"></a>分类大纲</h3><p>设计模式分为三种类型，共23种。</p><ul><li>创建型模式<ul><li>单例模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>工厂模式</li><li>原型模式</li></ul></li><li>结构型模式<ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul></li><li>行为型模式<ul><li>模版方法模式</li><li>命令模式</li><li>迭代器模式</li><li><a href="/2020/03/15/ObserverPattern">观察者模式</a></li><li><a href="/2020/03/12/mediatorpattern/">中介者模式</a></li><li>备忘录模式</li><li>解释器模式（Interpreter模式）</li><li>状态模式</li><li>策略模式</li><li>职责链模式(责任链模式)</li><li>访问者模式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-多页面应用</title>
      <link href="/2020/03/11/multipageapplication/"/>
      <url>/2020/03/11/multipageapplication/</url>
      
        <content type="html"><![CDATA[<h3 id="5-1-为什么不需要单页面应用"><a href="#5-1-为什么不需要单页面应用" class="headerlink" title="5.1 为什么不需要单页面应用"></a>5.1 为什么不需要单页面应用</h3><p>从技术的复杂度与实施成本角度来评价单页应用：</p><ul><li>构建成本</li><li>学习成本</li><li>后台渲染成本</li><li>应用架构的复杂性</li></ul><h3 id="5-2-简单的多页应用开发"><a href="#5-2-简单的多页应用开发" class="headerlink" title="5.2 简单的多页应用开发"></a>5.2 简单的多页应用开发</h3><ol><li>选择UI库及框架。</li><li>JQuery和Bootstrap仍然好用。快速开发的两大利器。</li><li>不使用框架：You Don’t Need xxx。更加灵活，更容易积累经验。</li></ol><h3 id="5-3-复杂多页面应用的开发"><a href="#5-3-复杂多页面应用的开发" class="headerlink" title="5.3 复杂多页面应用的开发"></a>5.3 复杂多页面应用的开发</h3><p>需要理解的框架特性、原理：</p><h4 id="5-3-1-模板与模板引擎原理"><a href="#5-3-1-模板与模板引擎原理" class="headerlink" title="5.3.1 模板与模板引擎原理"></a>5.3.1 模板与模板引擎原理</h4><h4 id="5-3-2-基于字符串的模板引擎设计"><a href="#5-3-2-基于字符串的模板引擎设计" class="headerlink" title="5.3.2 基于字符串的模板引擎设计"></a>5.3.2 基于字符串的模板引擎设计</h4><p>先渲染出HTML，再将HTML插入DOM节点中</p><h4 id="5-3-3-基于JavvaScript的模板引擎设计"><a href="#5-3-3-基于JavvaScript的模板引擎设计" class="headerlink" title="5.3.3 基于JavvaScript的模板引擎设计"></a>5.3.3 基于JavvaScript的模板引擎设计</h4><ul><li>将模板编译为某种DSL(领域特别语言——代码+数据)；</li><li>使用时，调用JavaScript渲染DOM节点；</li><li>变更时，通过Diff算法替换对应的DOM节点</li></ul><p>比如成熟的开源框架Virtual DOM</p><h4 id="5-3-4-双向绑定原理及实践"><a href="#5-3-4-双向绑定原理及实践" class="headerlink" title="5.3.4 双向绑定原理及实践"></a>5.3.4 双向绑定原理及实践</h4><p>双向绑定的实现方式：</p><ul><li>手动绑定。</li><li>脏检查机制。发生指定事件时，遍历相应的元素，进行数据比较，然后对变化的数据进行操作。</li><li>数据劫持。利用对象原型属性setter、getter劫持。</li></ul><h4 id="5-3-5-前端路由原理及实践"><a href="#5-3-5-前端路由原理及实践" class="headerlink" title="5.3.5 前端路由原理及实践"></a>5.3.5 前端路由原理及实践</h4><p>后台的路由映射<br>前端的路由控制</p><h4 id="5-3-6-两种路由类型"><a href="#5-3-6-两种路由类型" class="headerlink" title="5.3.6 两种路由类型"></a>5.3.6 两种路由类型</h4><ul><li>History API。通过History方法无刷新更改地址栏，配合Ajax更新数据。由于基于真实的URL操作，需要配置好相应的HTTP服务器。基本方法：<ul><li>back</li><li>forward</li><li>go</li><li>pushState</li><li>replaceState</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">// history示例window.onpopstate <span class="token operator">=</span> function<span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  alert<span class="token punctuation">(</span>`location: $<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;document.location&amp;#125;, state: $&amp;#123;JSON.stringify(event.state)&amp;#125;`)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>history.pushState<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;page: 1&amp;#125;, "title 1", "?page=1")</span>history.pushState<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;page: 2&amp;#125;, "title 2", "?page=2")</span>history.replaceState<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;page: 3&amp;#125;, "title 3", "?page=3")</span>history.back<span class="token punctuation">(</span><span class="token punctuation">)</span> // alerts <span class="token string">"location: http://example.com/example.html?page=1, state: &amp;#123;"</span>page<span class="token string">":1&amp;#125;"</span>history.back<span class="token punctuation">(</span><span class="token punctuation">)</span> // alerts <span class="token string">"location: http://example.com/example.html, state: null"</span>history.go<span class="token punctuation">(</span>2<span class="token punctuation">)</span>  // alerts <span class="token string">"location: http://example.com/example.html?page=3, state: &amp;#123;"</span>page<span class="token string">":3&amp;#125;"</span></code></pre><ul><li>Hash。location.hash值（#后面的内容）改变时，监听相应的事件，绑定路由与函数的映射关系——window.addEventListener(‘hashchange’,callback,false)。</li></ul><p>一个简单的hash路由示例，最好配合JavvaScript的模板引擎，并且需要有如下几个功能函数：</p><ul><li>add，用于创建路由集（Map映射），添加路由key及对应的函数</li><li>refresh，根据路由集，跳转到相应路由处理函数</li><li>load，初始化路由监听事件。</li><li>navigate，跳转到具体路由函数</li></ul><h4 id="5-3-7-避免散弹式架构"><a href="#5-3-7-避免散弹式架构" class="headerlink" title="5.3.7 避免散弹式架构"></a>5.3.7 避免散弹式架构</h4><blockquote><p>在编写多页面应用的时候，不同的函数可能都在操作同一个节点，而这些函数可能位于不同的代码文件中，故而可以称之为散弹式架构。</p></blockquote><p>降低散弹式架构的方式：</p><ul><li>统一交互处理。</li><li>按页面拆分脚本。</li><li>事件绑定采用ID而非class</li></ul><hr><p><strong>《前端架构：从入门到微前端》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《原则》读书笔记</title>
      <link href="/2020/03/10/principlebookreadingnotes/"/>
      <url>/2020/03/10/principlebookreadingnotes/</url>
      
        <content type="html"><![CDATA[<p>本文从原则、思维模型、管理工具、经验&amp;认知4个维度总结书中的知识点。</p><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><ul><li>独立思考并决定：<ol><li>你想要什么。</li><li>事实是什么。</li><li>面对现实，你如何实现自己的愿望…</li></ol></li><li>相处原则：<ol><li>把我们的真实想法摆在桌面上。</li><li>存在经过深思熟虑的分歧。但人们愿意在互相了解的过程中更改观点。</li><li>如果分歧仍然存在，拥有一种大家一致同意的决策方式(如投票或拥有清晰的权威)，以便我们能够不带怨气的把分歧留在身后。</li></ol></li></ul><h4 id="思维模型"><a href="#思维模型" class="headerlink" title="思维模型"></a>思维模型</h4><ul><li>每个人的大脑都分为两个部分——层次较高的逻辑部分与层次较低的情绪部分。情绪部分通常会讨厌并抵触逻辑部分的认知。</li></ul><h4 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h4><ul><li>问题日志做法：如果出了问题，必须写入日志。写明严重程度，并写清楚负责人。</li></ul><h4 id="经验-amp-认知"><a href="#经验-amp-认知" class="headerlink" title="经验&amp;认知"></a>经验&amp;认知</h4><ul><li>想要拥有很多优势，而又不暴露于不可接受的劣势之下，最稳妥的方式是做出一系列良好的、互不相关的押注，彼此平衡、相互补充。</li><li>大多数人都是在某个方面过度，另一方面不足。遵循自己的秉性做事，考虑不到自己的弱点，导致我们走向失败。</li><li>作者成功的唯一途径：<ol><li>找到与我观点不同的最聪明的人，以便自己能够努力理解他们的推理。</li><li>知道自己在什么时候不能有明确的意见，不急于下结论。</li><li>逐步归纳永恒和普适的原则，对其进行测试，将其系统化。</li><li>通过平衡风险来保持较大的回报，并降低下行波动。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观点与感想 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wap监听键盘事件</title>
      <link href="/2020/02/29/waplistenkeyboard/"/>
      <url>/2020/02/29/waplistenkeyboard/</url>
      
        <content type="html"><![CDATA[<p>wap监听虚拟键盘的弹出、收起时，IOS与Android系统手机需要分别处理。</p><h4 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h4><p>IOS系统设备，可以通过监听window的focusin、focusout事件，变向的监听到虚拟键盘。</p><pre class=" language-bash"><code class="language-bash">// keyBoard upwindow.addEventListener<span class="token punctuation">(</span><span class="token string">'focusin'</span>,callback<span class="token punctuation">)</span><span class="token punctuation">;</span>// keyBoard downwindow.addEventListener<span class="token punctuation">(</span><span class="token string">'focusout'</span>,callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>Android系统设备，可以通过监听window窗口resize时document或body的高度变化，变向的监听到虚拟键盘。</p><pre class=" language-bash"><code class="language-bash">var originalHeight <span class="token operator">=</span> document.documentElement.clientHeight <span class="token operator">||</span> document.body.clientHeight<span class="token punctuation">;</span>window.resize<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  var resizeHeight <span class="token operator">=</span> document.documentElement.clientHeight <span class="token operator">||</span> document.body.clientHeight<span class="token punctuation">;</span>  // keyBoard up  if<span class="token punctuation">(</span>resizeHeight <span class="token operator">&lt;</span> originalHeight<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  // keyBoard down  if<span class="token punctuation">(</span>resizeHeight <span class="token operator">==</span><span class="token operator">=</span> originalHeight<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> wap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css左右布局-左适应内容、右自适应</title>
      <link href="/2020/02/29/csslayout/"/>
      <url>/2020/02/29/csslayout/</url>
      
        <content type="html"><![CDATA[<p>左右自适应布局，此处仅列举三种常用的方式：grid、flex、float。</p><h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h4><pre class=" language-bash"><code class="language-bash">.container<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  display: grid<span class="token punctuation">;</span>  grid-template-columns: min-content auto<span class="token punctuation">;</span>  grid-template-areas: <span class="token string">"a b"</span><span class="token punctuation">;</span>  .left<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    grid-area: a<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  .right<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    grid-area: b<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><pre class=" language-bash"><code class="language-bash">.container<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  display: flex<span class="token punctuation">;</span>  .right<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    flex: 1 1 auto<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><pre class=" language-bash"><code class="language-bash">.container<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token operator">&amp;</span>::after<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    content:<span class="token string">""</span><span class="token punctuation">;</span>    clear:both<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  .left<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    float: left<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写作原则-可读性</title>
      <link href="/2020/02/28/grammarbookreadability/"/>
      <url>/2020/02/28/grammarbookreadability/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一稿的愉悦部分，源于欺骗自己它离真正的作品已经相当接近了；其后稿的愉悦部分，源于意识到自己没有被第一稿蒙骗。——朱利安·巴斯恩（Julian Barnes）</p></blockquote><h4 id="17、利用排版和设计"><a href="#17、利用排版和设计" class="headerlink" title="17、利用排版和设计"></a>17、利用排版和设计</h4><p>在文字周围添加更多空间，以增强可读性。</p><h4 id="18、运用可读性工具"><a href="#18、运用可读性工具" class="headerlink" title="18、运用可读性工具"></a>18、运用可读性工具</h4><p>突出关键字和短语。</p><ul><li><strong>粗体</strong></li><li><em>斜体</em></li><li>破折号“——”</li><li>项目编号“·”</li><li>列举“1. 2. …，（1）（2）…”</li><li>阴影“背景色”</li></ul><h4 id="19、使用标题或摘要"><a href="#19、使用标题或摘要" class="headerlink" title="19、使用标题或摘要"></a>19、使用标题或摘要</h4><p>用标题或摘要拆分或归纳文章。</p><ul><li>有效运用标题</li><li>有效运用摘要</li></ul><h4 id="20、回顾和修改文章"><a href="#20、回顾和修改文章" class="headerlink" title="20、回顾和修改文章"></a>20、回顾和修改文章</h4><p>直到你的文章改到无可修改，否则不能说已经完成了。</p><h4 id="（完）"><a href="#（完）" class="headerlink" title="（完）"></a>（完）</h4><hr><p><strong>《一本小小的红色写作书》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 写作原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
            <tag> 写作原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写作原则-风格</title>
      <link href="/2020/02/27/grammarbookstyle/"/>
      <url>/2020/02/27/grammarbookstyle/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简短的展现以便他们阅读，清楚地展现以便他们欣赏，如画般的展现以便他们记忆，最重要的是，准确的展现以便他们被它的光明所指引。——约瑟夫·普利策（Joseph Pulitzer）</p></blockquote><h4 id="6、支撑所说内容"><a href="#6、支撑所说内容" class="headerlink" title="6、支撑所说内容"></a>6、支撑所说内容</h4><p>使用准确、具体的词汇支撑所说内容。</p><blockquote><p>在写作用语上，不要只说“是什么”，还要说“为什么”。</p></blockquote><h4 id="7、让你的例证个性化"><a href="#7、让你的例证个性化" class="headerlink" title="7、让你的例证个性化"></a>7、让你的例证个性化</h4><p>增加个性化的例子，使文章难忘。</p><p>历史悠久的作家格言：“呈现，而不述说。”</p><p>写作技巧：</p><ul><li>轶事。修饰观点的小故事。</li><li>引用。名言警句。</li><li>类比。寻找不同事物的相似性。</li><li>明喻和暗喻。</li></ul><h3 id="8、保持简洁"><a href="#8、保持简洁" class="headerlink" title="8、保持简洁"></a>8、保持简洁</h3><p>用简单的词语表达你的观点。要面向读者措词。</p><p>此处仅列举几组简单的英文单词：</p><table><thead><tr><th align="center">汉语</th><th align="center">英语</th></tr></thead><tbody><tr><td align="center">同意</td><td align="center">agree</td></tr><tr><td align="center">收集</td><td align="center">gather</td></tr><tr><td align="center">合计</td><td align="center">total</td></tr><tr><td align="center">改善</td><td align="center">improve</td></tr><tr><td align="center">告诉</td><td align="center">tell</td></tr><tr><td align="center">查明</td><td align="center">find out</td></tr><tr><td align="center">由于</td><td align="center">due</td></tr><tr><td align="center">增加</td><td align="center">increase</td></tr><tr><td align="center">意识到</td><td align="center">aware</td></tr><tr><td align="center">展示</td><td align="center">show</td></tr><tr><td align="center">小</td><td align="center">tiny</td></tr><tr><td align="center">列出</td><td align="center">list</td></tr><tr><td align="center">实施</td><td align="center">carry out</td></tr><tr><td align="center">使容易</td><td align="center">make easy</td></tr><tr><td align="center">发出</td><td align="center">send out</td></tr><tr><td align="center">地方</td><td align="center">place</td></tr><tr><td align="center">研发</td><td align="center">develop</td></tr><tr><td align="center">减轻</td><td align="center">lessen</td></tr><tr><td align="center">改变</td><td align="center">change</td></tr><tr><td align="center">模糊</td><td align="center">obscure</td></tr><tr><td align="center">防止</td><td align="center">avoid</td></tr><tr><td align="center">熟练</td><td align="center">skill</td></tr><tr><td align="center">实行</td><td align="center">implement</td></tr><tr><td align="center">尝试</td><td align="center">try</td></tr><tr><td align="center">机智的</td><td align="center">resourceful</td></tr><tr><td align="center">证明</td><td align="center">prove</td></tr><tr><td align="center">使用</td><td align="center">use</td></tr></tbody></table><h4 id="9、砍断长句"><a href="#9、砍断长句" class="headerlink" title="9、砍断长句"></a>9、砍断长句</h4><p>通过拆分长句，使文章更清晰。<br>长短句结合创造起伏变化的风格。</p><h4 id="10、删除不必要的词"><a href="#10、删除不必要的词" class="headerlink" title="10、删除不必要的词"></a>10、删除不必要的词</h4><p>砍掉冗余语句、过多的限定和不必要的自指。</p><h4 id="11、使用主动语态"><a href="#11、使用主动语态" class="headerlink" title="11、使用主动语态"></a>11、使用主动语态</h4><p>多用主动句，少用被动句。</p><blockquote><p>被动 - 公司派对由秘书组织。<br>  主动 - 秘书组织了公司派对。</p></blockquote><h4 id="12、多用动词，少用名词"><a href="#12、多用动词，少用名词" class="headerlink" title="12、多用动词，少用名词"></a>12、多用动词，少用名词</h4><p>不要把动词和形容词名词化</p><blockquote><p>“成本的减少”最好写作“减少成本”<br>  “测量的精确性”最好写作“精确测量”</p></blockquote><h4 id="13、使用平行句式"><a href="#13、使用平行句式" class="headerlink" title="13、使用平行句式"></a>13、使用平行句式</h4><p>用一致、平行的形式表达连串事物。</p><h4 id="14、利用句式变化"><a href="#14、利用句式变化" class="headerlink" title="14、利用句式变化"></a>14、利用句式变化</h4><p>变换句子长度和开头。</p><ul><li>用主题开头。</li><li>用短语开头。</li><li>用从句开头。</li><li>用冠词开头。</li><li>用动词开头。</li><li>用副词开头。</li><li>用形容词开头。</li><li>用动名词开头。</li><li>用不定式开头。</li><li>用关联词开头。</li></ul><h4 id="15、选择适当的语气"><a href="#15、选择适当的语气" class="headerlink" title="15、选择适当的语气"></a>15、选择适当的语气</h4><p>用积极、个性化的语气写作。</p><ul><li>积极语气和消极语气</li><li>正式语气和非正式语气</li></ul><p><img src="https://cdn.img.wenhairu.com/images/2020/02/27/m5cOt.jpg" alt="正式"><br><img src="https://cdn.img.wenhairu.com/images/2020/02/27/m5S5D.jpg" alt="非正式"></p><h4 id="16、保持文章性别中立"><a href="#16、保持文章性别中立" class="headerlink" title="16、保持文章性别中立"></a>16、保持文章性别中立</h4><p>避免使用阳性泛指指示两种性别。</p><p>用“他或她”或“他们”代替他。</p><hr><p><strong>《一本小小的红色写作书》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 写作原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
            <tag> 写作原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-设计构建流</title>
      <link href="/2020/02/25/buildflowdesign/"/>
      <url>/2020/02/25/buildflowdesign/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-依赖管理工具"><a href="#4-1-依赖管理工具" class="headerlink" title="4.1 依赖管理工具"></a>4.1 依赖管理工具</h3><p>模块化方案：</p><ul><li>AMD</li><li>CommonJS</li><li>UMD</li></ul><p>现在主流的前端应用框架支持并采用的方式主要以编译构建为主，大都采用NPM+CommonJS的形式来管理依赖。</p><h3 id="4-2-软件包源管理"><a href="#4-2-软件包源管理" class="headerlink" title="4.2 软件包源管理"></a>4.2 软件包源管理</h3><p>软件包源有以下几种形式：</p><ul><li>公有&#x2F;私有软件包源服务器。<ul><li>npmj.org提供的官方源。</li><li>淘宝的cnpm源。可用于搭建自己的私有化包服务器。</li><li>搭建私有的NPM服务器。</li></ul></li><li>基于源码版本管理服务器，比如直接使用Git服务器来管理和分布库的版本。</li><li>本地的软件包，使用相对路径导入本地仓库。</li></ul><h4 id="1-基于源码版本管理服务器"><a href="#1-基于源码版本管理服务器" class="headerlink" title="1.基于源码版本管理服务器"></a>1.基于源码版本管理服务器</h4><p>对于一些内部的前端库，除了自己搭建NPM服务器，还可以通过Git服务器及Git Tag的方式进行管理。<br>即在package.json中通过</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"adr"</span><span class="token keyword">:</span><span class="token string">"git+http://github.com/xmwarrior/adr/#v1.0.0"</span></code></pre><p>的方式引入依赖。<br>这种方式需要将构建完的源码提交到代码库。此种方式会让代码库因版本的增多而愈发臃肿。</p><h4 id="2-本地的软件依赖包"><a href="#2-本地的软件依赖包" class="headerlink" title="2. 本地的软件依赖包"></a>2. 本地的软件依赖包</h4><p>通过包管理工具来支持file协议并引入依赖，即在package.json中通过<code>&quot;adr&quot;:&quot;file:adr&quot;</code>的形式引入依赖。<br>这种方式的应用场景如下：</p><ul><li>构建的包过大，不适合Git下载。</li><li>开发应用的同时开发依赖。</li></ul><h4 id="3-前端应用的编译"><a href="#3-前端应用的编译" class="headerlink" title="3.前端应用的编译"></a>3.前端应用的编译</h4><p>不论如何开发，最终需要打包成HTML+CSS+JavaScript的形式。</p><h4 id="4-JavaScript的编译"><a href="#4-JavaScript的编译" class="headerlink" title="4. JavaScript的编译"></a>4. JavaScript的编译</h4><p>ES6、Typescript</p><h4 id="5-CSS的编译"><a href="#5-CSS的编译" class="headerlink" title="5. CSS的编译"></a>5. CSS的编译</h4><p>CSS预处理器</p><h4 id="6-CSS-In-JavaScript"><a href="#6-CSS-In-JavaScript" class="headerlink" title="6. CSS In JavaScript"></a>6. CSS In JavaScript</h4><p>CSS的继承与覆盖特性，促成了CSS In JavaScript的诞生。</p><h4 id="7-模板编译"><a href="#7-模板编译" class="headerlink" title="7. 模板编译"></a>7. 模板编译</h4><p>前端框架，间接的通过js代码生成HTML DOM节点，来提高运行效率。</p><h3 id="4-3-前端代码的打包"><a href="#4-3-前端代码的打包" class="headerlink" title="4.3 前端代码的打包"></a>4.3 前端代码的打包</h3><p>代码打包的最后一步就是，将代码“拼接”到一起，压缩并混淆代码，最后构建出目标代码文件。<br>期间，还会进行可选的摇树优化（Tree Shaking，去掉没用的代码），其主要依赖于ES6模板及其带来的静态分析。</p><h3 id="4-4-设计构建流"><a href="#4-4-设计构建流" class="headerlink" title="4.4 设计构建流"></a>4.4 设计构建流</h3><h4 id="1-如何设计构建流"><a href="#1-如何设计构建流" class="headerlink" title="1. 如何设计构建流"></a>1. 如何设计构建流</h4><ul><li>任务。通用流程、任务。命令一致，拆解背后对应的细节、任务。</li><li>步骤拆解。命令一方面受前端框架的影响，另一方面受项目的复杂度影响。</li><li>展现形式。不同类型的构建应用，展现形式有所不同。</li><li>插件。当且仅当有多个插件时，我们才能打造更流畅的构建流。</li></ul><blockquote><p>构建工具的选择，可以是Grunt、Gulp、webpack等中的一个，或者直接用NPM来完成。这些工具没有太大的区别，要做的事情的复杂性决定了使用的工具。</p></blockquote><h4 id="2-构建工具：自动化任务"><a href="#2-构建工具：自动化任务" class="headerlink" title="2. 构建工具：自动化任务"></a>2. 构建工具：自动化任务</h4><blockquote><p>构建工具相当于是一个自动化任务工具，也可以称之为任务管理器。</p></blockquote><p>不同构建工具的适用场景：</p><ul><li>NPM脚本，适用于脚本简单的应用构建。</li><li>Gulp&#x2F;Grunt，适用于复杂的项目工作流构建。</li><li>webpack，进行项目的模块化打包。</li></ul><h4 id="3-使用包管理工具构建NPM"><a href="#3-使用包管理工具构建NPM" class="headerlink" title="3. 使用包管理工具构建NPM"></a>3. 使用包管理工具构建NPM</h4><p>通过在package.json的script部分添加多个任务，进行简单的构建。<br>此种方式会随项目的复杂度提升，任务命令越来越长，使命令本身的可读性越来越差。</p><p>使用JSON文件来管理任务，另一方面因其本身不能编写注释，也使任务很难文档化。</p><p>此时可以考虑使用脚本文件的形式来管理。如<code>node build.js</code>。还有一种更实用的方式，结合NPM脚本与webpack或Gulp&#x2F;Grunt使用，如</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"build"</span><span class="token keyword">:</span><span class="token string">"webpack --config webpack.dist.config.js"</span></code></pre><h4 id="4-使用构建工具构建Grunt-x2F-Gulp"><a href="#4-使用构建工具构建Grunt-x2F-Gulp" class="headerlink" title="4. 使用构建工具构建Grunt&#x2F;Gulp"></a>4. 使用构建工具构建Grunt&#x2F;Gulp</h4><p>对于复杂的构建流，可以考虑Gulp&#x2F;Grunt来完成构建。<br>编程的方式比配置的方式更能提高可管理性。这也是Gulp&#x2F;Grunt越来越流行的原因。</p><h4 id="5-使用打包工具构建webpack"><a href="#5-使用打包工具构建webpack" class="headerlink" title="5. 使用打包工具构建webpack"></a>5. 使用打包工具构建webpack</h4><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p>当前的主流框架都是用webpack来打包应用，除了承担打包工作，它还负责一部分常见的构建任务。对于前端框架来说，他们更倾向于屏蔽这些webpack的复杂的配置。</p><h4 id="6-实现构建流"><a href="#6-实现构建流" class="headerlink" title="6. 实现构建流"></a>6. 实现构建流</h4><p>尽管应用的构建很重要，但是编写前端应用的时候，我们往往不会自己从头去编写构建代码。第一，它需要花费大量的时间。第二，现成的构建代码可以使用。</p><h4 id="7-插件定义构建流"><a href="#7-插件定义构建流" class="headerlink" title="7. 插件定义构建流"></a>7. 插件定义构建流</h4><p>总有一些特殊情况，需要我们在构建脚本里添加命令。这时，尝试通过以下方式来解决问题。</p><ol><li>查找是否有对应的插件。</li><li>对比不同插件的区别。</li><li>创建插件的适配层。</li><li>验证插件是否有效。</li><li>重复2~4步骤。</li><li>如果都不适用，编写新插件或改写原有插件。</li></ol><h4 id="8-框架定义构建流"><a href="#8-框架定义构建流" class="headerlink" title="8. 框架定义构建流"></a>8. 框架定义构建流</h4><blockquote><p>流行的前端框架提供了完整的应用脚手架，脚手架中也提供了完整的构建流。<br>只有当应用和架构变得复杂时，我们才需要去了解它是如何构建的，才需要去修改构建脚本。</p></blockquote><h3 id="4-5-持续交付问题"><a href="#4-5-持续交付问题" class="headerlink" title="4.5 持续交付问题"></a>4.5 持续交付问题</h3><h4 id="1-部署方式"><a href="#1-部署方式" class="headerlink" title="1. 部署方式"></a>1. 部署方式</h4><ul><li>持续部署，构建完成及部署，类似GItHub Pages，提交代码后自动上线。</li><li>自动化部署，持续部署的前提下稍微弱化，需人为的介入。</li><li>手动部署，全程人为操作。</li></ul><p>部署都需要一个确定的发布策略——不论是敏捷模式还是瀑布模式。<br>敏捷模式的上线发布计划是一个分布迭代（通常两周一次），随后不断地发布；<br>瀑布模式则是一次上线就完成大部分主要功能。</p><h4 id="2-设计持续集成"><a href="#2-设计持续集成" class="headerlink" title="2. 设计持续集成"></a>2. 设计持续集成</h4><ul><li>对应用进行构建。</li><li>进行应用的测试，利用代码来完成测试有助于减少bug。</li><li>部署应用到对应的环境，以提供一个联调和测试环境。<ul><li>选择合适的持续集成工具：开源的Jenkins、GoCD；专业的收费工具Bamboo。</li></ul></li><li>编写相应的部署脚本。</li></ul><h4 id="3-自动化部署"><a href="#3-自动化部署" class="headerlink" title="3. 自动化部署"></a>3. 自动化部署</h4><p>前端的自动化部署：</p><ul><li>静态文件部署到服务器上后，使用Nginx配置域名及相应的后台服务地址。</li><li>然后搭配Docker，编写Dockerfile就能快速的应用部署。</li><li>再编写一个相应的NPM脚本，配置到Jenkinsfile中，就完成了整个持续部署的的流程。</li></ul><p>还有Puppet、Chef等部署工具。</p><blockquote><p>尽管前端部署简单，还应适当考虑“回滚机制、蓝绿部署、灰度发布”等因素。并在应用部署后，使用UI自动化测试来测试部分功，以及测试对应的后端服务连接。这里不推荐人工测试。</p></blockquote><h4 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4. 环境配置"></a>4. 环境配置</h4><blockquote><p>不同的环境拥有不同的功能、代码及配置事项。当我们编写构建脚本的时候，还需要针对不同的环境（开发、线上）编写构建脚本。</p></blockquote><h4 id="5-开发环境配置"><a href="#5-开发环境配置" class="headerlink" title="5. 开发环境配置"></a>5. 开发环境配置</h4><p>需要考虑：</p><ul><li>构建配置。构建脚本时，考虑额外的配置与参数来针对不同的环境。</li><li>代码配置。通过不同的环境变量来区分不同环境。如.env.development</li><li>代理配置。</li></ul><h4 id="6-线上调试"><a href="#6-线上调试" class="headerlink" title="6. 线上调试"></a>6. 线上调试</h4><p>为了线上运行和调试代码，通常需要有一些额外的“开关”（toggle），如：</p><ul><li>在URL中添加一些参数。</li><li>在LocalStorage中添加一些参数。</li><li>对特定的账号进行权限管理，以获取调试功能。</li></ul><hr><p><strong>《前端架构：从入门到微前端》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-工作流设计</title>
      <link href="/2020/02/23/webworkflowdesign/"/>
      <url>/2020/02/23/webworkflowdesign/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-代码之旅：基础规范"><a href="#3-1-代码之旅：基础规范" class="headerlink" title="3.1 代码之旅：基础规范"></a>3.1 代码之旅：基础规范</h3><ul><li>规范代码组织结构</li><li>统一代码风格，即源代码的书写风格</li><li>组件、函数等命名规范</li><li>开发工具规范</li></ul><h3 id="3-2-代码组织决定应用架构"><a href="#3-2-代码组织决定应用架构" class="headerlink" title="3.2 代码组织决定应用架构"></a>3.2 代码组织决定应用架构</h3><p>确定应用架构时，应该按照与架构相似的方式来编写。并在架构未来发生变化时，相应的更改代码的组织方式。<br>比如vue-cli2架构升级至vue-cli3.0时的架构变化。</p><h3 id="3-3-统一代码风格，避免架构腐烂"><a href="#3-3-统一代码风格，避免架构腐烂" class="headerlink" title="3.3 统一代码风格，避免架构腐烂"></a>3.3 统一代码风格，避免架构腐烂</h3><p>虽然每个人都有自己的口味，但是作为一名厨师，应该做出符合大众口味的菜。</p><h3 id="3-4-使用Lint规范代码"><a href="#3-4-使用Lint规范代码" class="headerlink" title="3.4 使用Lint规范代码"></a>3.4 使用Lint规范代码</h3><p>比约定规则，靠自觉遵守更好的方式是，借助代码扫描工具检测、提示、修复代码风格。<br>诸如：TSLint、CSSLint、ESLint…</p><h3 id="3-5-规范化命名，提升可读性"><a href="#3-5-规范化命名，提升可读性" class="headerlink" title="3.5 规范化命名，提升可读性"></a>3.5 规范化命名，提升可读性</h3><h4 id="3-5-1-命名法"><a href="#3-5-1-命名法" class="headerlink" title="3.5.1 命名法"></a>3.5.1 命名法</h4><p>常用的命名规则有以下几个:</p><ul><li>驼峰命名法。</li><li>下划线命名法。Python语言中特别流行。</li><li>匈牙利命名法：属性+类型+对象描述。如“strFristName”。</li></ul><p>对于前端团队来说，我们需要统一项目的命名规则，以降低项目的成本。</p><h4 id="3-5-2-CSS及其预处理器命名规则"><a href="#3-5-2-CSS及其预处理器命名规则" class="headerlink" title="3.5.2 CSS及其预处理器命名规则"></a>3.5.2 CSS及其预处理器命名规则</h4><p>技术栈统一的前端团队，同样需要一套统一的css命名规则。</p><h4 id="3-5-3-组件命名规则"><a href="#3-5-3-组件命名规则" class="headerlink" title="3.5.3 组件命名规则"></a>3.5.3 组件命名规则</h4><p>组件命名有如下几种方式：</p><ul><li>按照功能命名，如：SideBar就是一个侧边栏功能的组件。</li><li>按页面来切分组件，如：NewsItem就是用于展示新闻的组件。</li><li>按照上下文来命名组件，如：NewsChildItem体现了与上个组件的关系。</li></ul><h3 id="3-6-规范开发工具，提升开发效率"><a href="#3-6-规范开发工具，提升开发效率" class="headerlink" title="3.6 规范开发工具，提升开发效率"></a>3.6 规范开发工具，提升开发效率</h3><p>以下适合在项目中使用的插件：</p><ul><li>EditorConfig，如：（EditorConfig for VS Code），可以读取项目中的.editorconfig配置，以遵循统一的编辑器规范。</li><li>Lint插件,如：（ESLint、HTML Hint），显示Lint问题。</li><li>单词拼写检测，如：（Code Spell Checker），提示代码中拼错的单词。</li><li>路径补全，如：(Path Intellinsence)，提示可用资源路径。</li><li>代码自动补全。</li><li>Emmet插件，如：（JavaScript (ES6) code snippets），想要快速编写代码（砍柴），有时需要投入学习成本（磨刀）。</li><li>代码格式化，如：（Prettier - Code formatter）。</li></ul><p>*注：括号内是相应的VSCode插件名。</p><h3 id="3-7-项目的文档化：README搭建指南"><a href="#3-7-项目的文档化：README搭建指南" class="headerlink" title="3.7 项目的文档化：README搭建指南"></a>3.7 项目的文档化：README搭建指南</h3><p>一份好的搭建指南具有如下特点：</p><ul><li>支持运行的环境。</li><li>必要的依赖准备，以及如何搭建。</li><li>项目的安装指南。</li><li>线上的示例或最后的运行环境。</li><li>相关的文档链接。</li><li>相关人员的联系方式，讨论群。</li></ul><p>README文档里包含这些必要的资源，能大大的提高开发人员的效率。</p><h3 id="3-8-绘制架构图：减少沟通成本"><a href="#3-8-绘制架构图：减少沟通成本" class="headerlink" title="3.8 绘制架构图：减少沟通成本"></a>3.8 绘制架构图：减少沟通成本</h3><blockquote><p>对于复杂项目的架构图主要展示各子系统之间如何通信。<br>对于简单的系统，架构图则可以是由项目的技术栈组成的。</p></blockquote><p>绘制架构图，既可以用代码生成，也可以使用专业工具绘制。</p><ul><li>代码生成工具，如：Graphvis</li><li>专业工具，如：Dia</li><li>软件附带工具，如：Office、SmartArt</li><li>在线工具。</li></ul><h3 id="3-9-可编辑文档库：提升协作性"><a href="#3-9-可编辑文档库：提升协作性" class="headerlink" title="3.9 可编辑文档库：提升协作性"></a>3.9 可编辑文档库：提升协作性</h3><blockquote><p>优先关注于其是否可以版本化、图形可视化，以及追踪历史修改。<br>它可以是：<br>——可以记录版本历史的维基(Wiki)软件。<br>——专业的协作工具,比如Atassian的Confluencea。<br>——基于Git+Markdown的代码管理工具。<br>它应该还能支持以下功能:实时多人编辑、内容索引、图形可视化、实时搜索、打标签、检查清单、导入导出等。</p></blockquote><h3 id="3-10-记录架构决策：轻量级架构决策记录"><a href="#3-10-记录架构决策：轻量级架构决策记录" class="headerlink" title="3.10 记录架构决策：轻量级架构决策记录"></a>3.10 记录架构决策：轻量级架构决策记录</h3><blockquote><p>下面是一个由adr命令生成的adr0架构决策记录的示例，它由以下六部分组成：<br>◎ 标题。<br>◎ 日期<br>◎ 描述决策相关的状态,包含提议、通过、完成、已弃用、已取代等。<br>◎ 价值中立的、用于描述事实上下文的背景。<br>◎ 应对这种场景的相应的决策。<br>◎ 记录应用决策后产生的结果。</p></blockquote><h3 id="3-11-可视化文档：注重代码的可读性"><a href="#3-11-可视化文档：注重代码的可读性" class="headerlink" title="3.11 可视化文档：注重代码的可读性"></a>3.11 可视化文档：注重代码的可读性</h3><p>穿插生动形象的展示，代替文本文档，web交互演示、图表等。</p><h3 id="3-12-看板工具：统一管理业务知识"><a href="#3-12-看板工具：统一管理业务知识" class="headerlink" title="3.12 看板工具：统一管理业务知识"></a>3.12 看板工具：统一管理业务知识</h3><p>方便追溯业务变更带来的代码修改。</p><h3 id="3-13-提交信息：每次代码提交文档化"><a href="#3-13-提交信息：每次代码提交文档化" class="headerlink" title="3.13 提交信息：每次代码提交文档化"></a>3.13 提交信息：每次代码提交文档化</h3><ul><li>项目方式，任务卡号与提交关联。</li><li>开源项目方式，采用标准化的提交信息，自动生成ChANGELOG文件。<br>工具如：standard-version。</li></ul><p><img src="https://cdn.img.wenhairu.com/images/2020/02/21/m9vgK.jpg" alt="对比不同的文档方式"></p><h3 id="3-14-通过流程提高代码质量"><a href="#3-14-通过流程提高代码质量" class="headerlink" title="3.14 通过流程提高代码质量"></a>3.14 通过流程提高代码质量</h3><h4 id="3-14-1-代码预处理"><a href="#3-14-1-代码预处理" class="headerlink" title="3.14.1 代码预处理"></a>3.14.1 代码预处理</h4><p>代码提交前常见操作：</p><ul><li>静态代码分析，如：TSLint、ESLint。</li><li>运行测试。</li></ul><h4 id="3-14-2-手动检视代码"><a href="#3-14-2-手动检视代码" class="headerlink" title="3.14.2 手动检视代码"></a>3.14.2 手动检视代码</h4><blockquote><p>这种方式带来一系列的好处：<br>(1)提高新成员的编程水平。<br>(2)保证代码规范得以实施。<br>(3)每个人对项目的代业务都会很熟悉。<br>(4)提供项目代码的质量<br>(5)帮助成员熟悉工具和快捷键的使用。</p></blockquote><p>代码检视，常见有两种方式：</p><ol><li>常规代码检视。每天固定时间讲解自己当天写的代码。</li><li>阻塞式代码检视。git提交审批，前提是，其他检视者能够带责任感地去审视代码。</li><li>其他。经常检视团队人员写的代码。</li></ol><h3 id="3-15-使用工具提升代码质量"><a href="#3-15-使用工具提升代码质量" class="headerlink" title="3.15 使用工具提升代码质量"></a>3.15 使用工具提升代码质量</h3><ul><li>利用代码扫描工具，如<code>Sonar</code>，检测编程语言上的错误、代码的坏味道和安全漏洞。</li><li>利用IDE，通过快捷键重构代码。</li></ul><h3 id="3-16-测试策略"><a href="#3-16-测试策略" class="headerlink" title="3.16 测试策略"></a>3.16 测试策略</h3><p><img src="https://cdn.img.wenhairu.com/images/2020/02/23/mGDwh.png" alt="测试金字塔"></p><hr><p><strong>《前端架构：从入门到微前端》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写作原则-结构</title>
      <link href="/2020/02/20/grammarbooklayout/"/>
      <url>/2020/02/20/grammarbooklayout/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当你说一件事情的时候，确保你说清楚了。如此，你言说的机会才合理。——E.B.White</p></blockquote><h4 id="1、运用“自上而下”的写作法"><a href="#1、运用“自上而下”的写作法" class="headerlink" title="1、运用“自上而下”的写作法"></a>1、运用“自上而下”的写作法</h4><p>先写总结，开门见山。</p><h4 id="2、分解事物"><a href="#2、分解事物" class="headerlink" title="2、分解事物"></a>2、分解事物</h4><p>把主题分解成二到四个主要部分，然后运用引导句。</p><h4 id="3、使用转折词"><a href="#3、使用转折词" class="headerlink" title="3、使用转折词"></a>3、使用转折词</h4><p>使用转折词提示写作方向。</p><p><img src="https://cdn.img.wenhairu.com/images/2020/02/20/m9V4s.png" alt="转折词的四种类型"></p><h4 id="4、回顾六大基本写作结构"><a href="#4、回顾六大基本写作结构" class="headerlink" title="4、回顾六大基本写作结构"></a>4、回顾六大基本写作结构</h4><p>使用基本六大写作结构，使观点的顺序安排得当。</p><ul><li>时间结构</li><li>线性结构</li><li>因果结构</li><li>比较结构</li><li>评价结构</li><li>范畴结构</li></ul><p><img src="https://cdn.img.wenhairu.com/images/2020/02/20/m9XhR.png" alt="六大写作结构"></p><h4 id="5、整合相似事物"><a href="#5、整合相似事物" class="headerlink" title="5、整合相似事物"></a>5、整合相似事物</h4><p>先结束一个主题的讨论，再接着讨论其他主题。</p><hr><p><strong>《一本小小的红色写作书》</strong>——知识点整理。</p>]]></content>
      
      
      <categories>
          
          <category> 写作原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
            <tag> 写作原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-成长优化期</title>
      <link href="/2020/02/20/growthoptimization/"/>
      <url>/2020/02/20/growthoptimization/</url>
      
        <content type="html"><![CDATA[<h3 id="成长优化期：技术债务与演进"><a href="#成长优化期：技术债务与演进" class="headerlink" title="成长优化期：技术债务与演进"></a>成长优化期：技术债务与演进</h3><blockquote><p>当项目经历了一两次上线后，项目进入一个稳定的上线交付阶段。…我们可以抽时间来解决各种各样的问题。</p></blockquote><p>设计架构和完善业务阶段暴露的诸多问题。像技术准备期、业务回补期，我们或多或少会采取一些<code>妥协方案</code>，为的是能加快速度开发流程。</p><p>这些问题，终究会随时间的推移和业务代码的堆砌变得越来越严峻。</p><h4 id="一、偿还技术债"><a href="#一、偿还技术债" class="headerlink" title="一、偿还技术债"></a>一、偿还技术债</h4><p>技术债包含的内容有如下几方面：</p><ol><li>代码质量。<br>如：接口、函数的重复实现，实现方式或模式的不统一，未按规范实践的代码，未被检视过的代码。</li><li>测试覆盖率。<br>被抛弃的<code>UI自动化测试</code>、<code>单元测试</code>。</li><li>依赖问题。<br>大量的依赖过旧问题，会导致我们难以对代码进行重构。</li></ol><blockquote><p>与日常的业务代码编写相比，改进过去的二代码会带来更多的成长和技术挑战——我们更容易从错误的代码中学习，而不是从成功的经验中学习。</p></blockquote><h4 id="二、优化开发体验"><a href="#二、优化开发体验" class="headerlink" title="二、优化开发体验"></a>二、优化开发体验</h4><p>日常工作中，有很多手动完成的工作，可以通过自动化来减少。</p><p>如：UI界面拖拽生成工具。</p><h4 id="三、带来技术挑战"><a href="#三、带来技术挑战" class="headerlink" title="三、带来技术挑战"></a>三、带来技术挑战</h4><p>不论怎样的项目，技术人员都需要获得一定的能力增长。</p><blockquote><p>在保证进度的情况下，也需要适当的带来一些成长的机会。</p></blockquote><p>常见做法如：</p><ul><li>引入新的技术栈</li><li>尝试使用新的框架</li><li>尝试一些小型的模拟项目，为以后的架构演进做准备；跟进主流技术的发展。</li></ul><h4 id="四、架构完善与演进"><a href="#四、架构完善与演进" class="headerlink" title="四、架构完善与演进"></a>四、架构完善与演进</h4><blockquote><p>经过大量的业务沉淀，我们会发现架构存在的一些问题。<br>新的业务变化时，演进系统的架构是一种正常形态。</p></blockquote><p>在更低级的代码层里，存在的一些复杂、混乱的相互调用，偏离架构风格的代码。</p><p>此阶段需要相应的实施者，重构代码，改进架构。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-业务回补期</title>
      <link href="/2020/02/19/qdjgywhbq/"/>
      <url>/2020/02/19/qdjgywhbq/</url>
      
        <content type="html"><![CDATA[<h1 id="业务回补期"><a href="#业务回补期" class="headerlink" title="业务回补期"></a>业务回补期</h1><h2 id="一、追补业务"><a href="#一、追补业务" class="headerlink" title="一、追补业务"></a>一、追补业务</h2><h2 id="二、测试：实践测试策略"><a href="#二、测试：实践测试策略" class="headerlink" title="二、测试：实践测试策略"></a>二、测试：实践测试策略</h2><h2 id="三、上线准备"><a href="#三、上线准备" class="headerlink" title="三、上线准备"></a>三、上线准备</h2><h2 id="四、第一次部署：验证部署架构"><a href="#四、第一次部署：验证部署架构" class="headerlink" title="四、第一次部署：验证部署架构"></a>四、第一次部署：验证部署架构</h2><h2 id="五、提升团队能力"><a href="#五、提升团队能力" class="headerlink" title="五、提升团队能力"></a>五、提升团队能力</h2><p>输出是最好的输入方式。在输出的过程中，需要重新梳理知识体系，也因此输入编程了一个输入过程。这种重新输入的输出，可分为对内输出和对外输出。</p><h3 id="对内输出"><a href="#对内输出" class="headerlink" title="对内输出"></a>对内输出</h3><h4 id="1、技术分享"><a href="#1、技术分享" class="headerlink" title="1、技术分享"></a>1、技术分享</h4><p>能力提升使用最多的方式。</p><ul><li>项目相关技术分享</li><li>非项目相关技术分享</li></ul><h4 id="2、工作坊"><a href="#2、工作坊" class="headerlink" title="2、工作坊"></a>2、工作坊</h4><p>工作坊是一个以练习为主，以理论为辅的掌握新技术的方式。指介绍新技术的过程中，让参与者现场进行大量练习。在练习过程中，互相帮助解决问题。能更快速的掌握相关技能。</p><h4 id="3、面向新人的结对编程"><a href="#3、面向新人的结对编程" class="headerlink" title="3、面向新人的结对编程"></a>3、面向新人的结对编程</h4><p>结对编程的几种方式：</p><ol><li>Navigator-Driver。Navigator关注如何实现功能，Driver负责实现。并由Navigator告诉Driver如何实现相关代码。提供思路与具体实现。</li><li>Ping-Pong模式。A写功能，B测试。随后反过来，B写功能，A测试。</li><li>键鼠模式。</li></ol><p>项目实施过程中，相关能力的提升方式如图：</p><p><img src="https://cdn.img.wenhairu.com/images/2020/02/18/mu06U.jpg" alt="能力提升方式"></p><h3 id="对外输出"><a href="#对外输出" class="headerlink" title="对外输出"></a>对外输出</h3><p>对外输出的目的有两个：</p><ol><li>练习技术上的技能，提升相应的软技能。</li><li>扩大团队的影响力，以便未来招聘到更多人才。</li></ol><p>输出方式多种多样，有翻译、写作、开源项目、技术分享等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-技术准备期</title>
      <link href="/2020/02/18/qdjgjszbq/"/>
      <url>/2020/02/18/qdjgjszbq/</url>
      
        <content type="html"><![CDATA[<h1 id="技术准备期"><a href="#技术准备期" class="headerlink" title="技术准备期"></a>技术准备期</h1><h2 id="一、架构设计"><a href="#一、架构设计" class="headerlink" title="一、架构设计"></a>一、架构设计</h2><p>即设计系统的架构。相应的步骤如下：</p><ol><li>收集利益相关者的需求。倾听业务人员、项目负责人等相关者的需求,进行用户访谈,收集相关的需求。</li><li>确定架构模式。与相应的技术人员(如开发人员试人员)讨论,了解架构上的潜在限制。</li><li>架构设计方法。寻找潜在的可行性技术方案。</li><li>生成架构产物。整理出功能列表中的功能性需求和跨功能性需求。</li><li>找出会严重影响开发的风险点。</li><li>和技术委员会、利益相关者反复确认方案(可选)。</li><li>对架构设计进行概念证明。</li><li>细化架构的部分实施细节。</li><li>结合技术和业务,进行需求排期。</li></ol><p>架构设计的总体方向：</p><ol><li>收集利益相关者的需求。</li><li>确定架构模式。</li><li>架构设计方法。</li><li>生成架构产物。</li></ol><p>架构设计原则：</p><ol><li>不多也不少：不做多余设计，也不缺少关键部分。</li><li>演进式：不断地演进以使框架适应当前环境。</li><li>持续性：长期的架构改进比什么都重要。</li></ol><h2 id="二、架构设计概念验证"><a href="#二、架构设计概念验证" class="headerlink" title="二、架构设计概念验证"></a>二、架构设计概念验证</h2><p>验证先前设计的架构是否可行。使用新技术编写一个简单的demo，将所设计的各个部分串联到一起。</p><h2 id="三、迭代0，搭建完整环境"><a href="#三、迭代0，搭建完整环境" class="headerlink" title="三、迭代0，搭建完整环境"></a>三、迭代0，搭建完整环境</h2><p>搭建系统的基础设施，最终实现项目人员熟悉实际开发方式，可以进行项目开发的目标。</p><h3 id="基本事项"><a href="#基本事项" class="headerlink" title="基本事项"></a>基本事项</h3><ol><li>创建应用脚手架。</li><li>创建项目的代码库。</li><li>搭建持续集成、持续交付。</li><li>进行各种权限配置,如各种不同的环境账号准备、开发人员的账号配置等。</li><li>配置配套的工具,如代码审查、自动化原生应用上传等。</li><li>更细粒度的技术选型。</li></ol><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><ul><li>内部技术培训：介绍系统架构，开发注意事项。</li><li>准备基础架构文档、技术规范。</li></ul><h2 id="四、示例项目代码：体现规范与原则"><a href="#四、示例项目代码：体现规范与原则" class="headerlink" title="四、示例项目代码：体现规范与原则"></a>四、示例项目代码：体现规范与原则</h2><p>由经验丰富的开发人员编写示例代码。通过示例代码，展现好的编程模式、范式。<br>示例尽量完整，如登录功能，涉及一系列与前端相关的内容：状态管理、网络请求、数据模式、表单提交、UI交互等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构-技术负责人与架构</title>
      <link href="/2020/02/18/qdjgjsfzryjg/"/>
      <url>/2020/02/18/qdjgjsfzryjg/</url>
      
        <content type="html"><![CDATA[<h1 id="技术负责人与架构"><a href="#技术负责人与架构" class="headerlink" title="技术负责人与架构"></a>技术负责人与架构</h1><h2 id="一、日常工作方向"><a href="#一、日常工作方向" class="headerlink" title="一、日常工作方向"></a>一、日常工作方向</h2><ol><li>适当地平衡业务的进度与技术方案。</li><li>解决重要、复杂的技术问题。</li><li>帮助团队的其他成员成长。</li><li>从全局考虑整个项目的技术和业务问题</li></ol><h2 id="二、技术架构考虑方面"><a href="#二、技术架构考虑方面" class="headerlink" title="二、技术架构考虑方面"></a>二、技术架构考虑方面</h2><p>设计软件架构的时候,考虑的不仅是架构技术的方案,还需要包含如下内容：</p><ol><li>技术方案的设计。</li><li>技术方案的落地。</li><li>保证技术方案的实施。</li><li>确保技术方案的上线。</li><li>关注技术方案的后续维护。</li></ol><h2 id="三、保证技术架构实施的三要素"><a href="#三、保证技术架构实施的三要素" class="headerlink" title="三、保证技术架构实施的三要素"></a>三、保证技术架构实施的三要素</h2><ol><li>保证项目在开发过程中的质量。</li><li>提升人员的能力。</li><li>第三,确保功能和应用上线。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端架构 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已有项目配置eslint指南</title>
      <link href="/2020/02/17/yyxmpzezn/"/>
      <url>/2020/02/17/yyxmpzezn/</url>
      
        <content type="html"><![CDATA[<h1 id="已有项目配置eslint指南"><a href="#已有项目配置eslint指南" class="headerlink" title="已有项目配置eslint指南"></a>已有项目配置eslint指南</h1><h2 id="一、项目文件夹下下载eslint"><a href="#一、项目文件夹下下载eslint" class="headerlink" title="一、项目文件夹下下载eslint"></a>一、项目文件夹下下载eslint</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev</code></pre><h2 id="二、eslint初始化"><a href="#二、eslint初始化" class="headerlink" title="二、eslint初始化"></a>二、eslint初始化</h2><h3 id="1、package-json文件scripts下添加指令"><a href="#1、package-json文件scripts下添加指令" class="headerlink" title="1、package.json文件scripts下添加指令"></a>1、package.json文件scripts下添加指令</h3><pre class=" language-bash"><code class="language-bash"><span class="token string">"init"</span><span class="token keyword">:</span> <span class="token string">"./node_modules/.bin/eslint --init"</span></code></pre><h3 id="2、运行指令"><a href="#2、运行指令" class="headerlink" title="2、运行指令"></a>2、运行指令</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run init</code></pre><h3 id="3、选择eslint配置，如下图"><a href="#3、选择eslint配置，如下图" class="headerlink" title="3、选择eslint配置，如下图"></a>3、选择eslint配置，如下图</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1581863680805-66ce2d62-a7bb-42a2-aeff-32d4fd65a306.png#align=left&display=inline&height=332&name=1.png&originHeight=332&originWidth=938&size=50874&status=done&style=none&width=938" alt="1.png"></p><h2 id="三、配置格式化工具"><a href="#三、配置格式化工具" class="headerlink" title="三、配置格式化工具"></a>三、配置格式化工具</h2><h3 id="1、下载babel-eslint"><a href="#1、下载babel-eslint" class="headerlink" title="1、下载babel-eslint"></a>1、下载babel-eslint</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> babel-eslint</code></pre><h3 id="2、配置-eslintrc-js"><a href="#2、配置-eslintrc-js" class="headerlink" title="2、配置.eslintrc.js"></a>2、配置.eslintrc.js</h3><p>parserOptions添加配置</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"parser"</span><span class="token keyword">:</span> <span class="token string">"babel-eslint"</span></code></pre><h3 id="3、下载prettier"><a href="#3、下载prettier" class="headerlink" title="3、下载prettier"></a>3、下载prettier</h3><p>下载添加依赖：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @vue/eslint-config-prettier eslint-plugin-prettier@latest --save-dev</code></pre><h3 id="4、配置-eslintrc-js"><a href="#4、配置-eslintrc-js" class="headerlink" title="4、配置.eslintrc.js"></a>4、配置.eslintrc.js</h3><p>extends添加拓展：</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"@vue/prettier"</span></code></pre><h2 id="四、配置批量修复指令"><a href="#四、配置批量修复指令" class="headerlink" title="四、配置批量修复指令"></a>四、配置批量修复指令</h2><h3 id="1、下载批量修复插件eslint-plugin-vuefix"><a href="#1、下载批量修复插件eslint-plugin-vuefix" class="headerlink" title="1、下载批量修复插件eslint-plugin-vuefix"></a>1、下载批量修复插件eslint-plugin-vuefix</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint-plugin-vuefix</code></pre><h3 id="2、添加检查指令、修复指令"><a href="#2、添加检查指令、修复指令" class="headerlink" title="2、添加检查指令、修复指令"></a>2、添加检查指令、修复指令</h3><pre class=" language-bash"><code class="language-bash"><span class="token string">"lint"</span><span class="token keyword">:</span> <span class="token string">"eslint --ext .js,.vue src"</span><span class="token string">"fix"</span><span class="token keyword">:</span> <span class="token string">"eslint --ext .js,.vue src --fix"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> npm </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm组件发布之element-plugin</title>
      <link href="/2020/02/10/mzjfbze/"/>
      <url>/2020/02/10/mzjfbze/</url>
      
        <content type="html"><![CDATA[<h1 id="element-plugin"><a href="#element-plugin" class="headerlink" title="element-plugin"></a>element-plugin</h1><p>element-plugin 是基于element-ui开发的一个以提高编码效率、简化调用方式、提高代码维护性、适配屏幕分辨率、聚合基础组件为宗旨的“中间件”组件。<br>现已开放的可用组件：</p><blockquote><p>ElFormDialog-表单弹窗组件<br>ElTableColumnPro-表格表头筛选组件<br>ElInfo-详情展示组件</p></blockquote><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><pre class=" language-bash"><code class="language-bash">element-uivue</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i elementplugin</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>1.整体导入：main.js文件里</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> ElementPlugin from <span class="token string">'elementplugin'</span><span class="token punctuation">;</span>Vue.use<span class="token punctuation">(</span>ElementPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.按需导入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;ElFormDialog, ElTableColumnPro&amp;#125; from 'elementplugin';</span>Vue.use<span class="token punctuation">(</span>ElFormDialog<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue.use<span class="token punctuation">(</span>ElTableColumnPro<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.组件内导入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;ElFormDialog, ElTableColumnPro&amp;#125; from 'elementplugin';</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  components: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    ElFormDialog,    ElTableColumnPro  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  <span class="token punctuation">..</span>.<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><h3 id="1-ElFormDialog-表单弹窗组件"><a href="#1-ElFormDialog-表单弹窗组件" class="headerlink" title="1.ElFormDialog 表单弹窗组件"></a>1.ElFormDialog 表单弹窗组件</h3><p>应用示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>el-button @click<span class="token operator">=</span><span class="token string">"elDialog.visible = true"</span><span class="token operator">></span>打开弹窗<span class="token operator">&lt;</span>/el-button<span class="token operator">></span>    <span class="token operator">&lt;</span>el-form-dialog v-if<span class="token operator">=</span><span class="token string">"elDialog.visible"</span> :options<span class="token operator">=</span><span class="token string">"elDialog"</span> ref<span class="token operator">=</span><span class="token string">"formDialog"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>template <span class="token comment" spellcheck="true">#footerButtons="scope"></span>        <span class="token operator">&lt;</span>el-button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"saveEdit(scope.form)"</span><span class="token operator">></span>确定<span class="token operator">&lt;</span>/el-button<span class="token operator">></span>        <span class="token operator">&lt;</span>el-button @click<span class="token operator">=</span><span class="token string">"elDialog.visible = false"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span>/el-button<span class="token operator">></span>      <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>/el-form-dialog<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      elDialog: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        title: <span class="token string">""</span>,             //标题        id: <span class="token string">""</span>,                //编辑id        width: <span class="token string">"800px"</span>,        //弹窗宽度        formLayout: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          span: 12,            //布局采用 24 分栏          labelPosition: <span class="token string">"top"</span>,//label对齐方式          labelWidth: <span class="token string">"80px"</span>   //label宽度        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        form: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,              //表单内容</span>        formOptions: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,       //表单内容配置</span>        rules: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,             //表单验证配置</span>        visible: <span class="token boolean">false</span>         //弹窗显示      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>      // filter 字典类动态获取      activityType:<span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    // 添加或编辑    addOrEdit<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; id &amp;#125;) &amp;#123;</span>      Project.GetProjectInfoByFwId<span class="token punctuation">(</span>id<span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res.success<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          this.initForm<span class="token punctuation">(</span>res.data<span class="token punctuation">)</span><span class="token punctuation">;</span>          this.elDialog.title <span class="token operator">=</span> <span class="token string">"项目编辑"</span><span class="token punctuation">;</span>          this.elDialog.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>          this.elDialog.visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    // 生成表单    initForm<span class="token punctuation">(</span>formData<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      const form <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        id: <span class="token string">""</span>,        name: <span class="token string">""</span>,        price: <span class="token string">""</span>,        type: <span class="token string">""</span>,        cascader:<span class="token string">""</span>,        date: <span class="token string">""</span>,        time: <span class="token string">""</span>,        delivery: false,        sex: <span class="token string">""</span>,        activityType: <span class="token punctuation">[</span><span class="token punctuation">]</span>,        file1: <span class="token punctuation">[</span><span class="token punctuation">]</span>,        file2: <span class="token punctuation">[</span><span class="token punctuation">]</span>,        remark: <span class="token string">""</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>      const formOptions <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        id: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"id"</span>,          type: <span class="token string">"input"</span>,//input类型          placeholder: <span class="token string">""</span>,          disabled: <span class="token boolean">true</span> //不显示        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        name: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"名称"</span>,          type: <span class="token string">"input"</span>,          placeholder: <span class="token string">""</span>,          readonly: <span class="token boolean">true</span> //显示但不可编辑        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        price: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"价格(元)"</span>,          type: <span class="token string">"number"</span>,//数字类型          placeholder: <span class="token string">""</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        type: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"类型"</span>,          type: <span class="token string">"select"</span>,//select类型          placeholder: <span class="token string">"请选择类型"</span>,          options: <span class="token punctuation">[</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name: "食品", value: "0" &amp;#125;,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name: "电器", value: "1" &amp;#125;</span>          <span class="token punctuation">]</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        cascader: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"级联选择器"</span>,          type: <span class="token string">"cascader"</span>,//级联选择器          placeholder: <span class="token string">"请选择类型"</span>,          options: <span class="token punctuation">[</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>              Id: <span class="token string">"zhinan"</span>,              TypeName: <span class="token string">"指南"</span>,              Children: <span class="token punctuation">[</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                  Id: <span class="token string">"shejiyuanze"</span>,                  TypeName: <span class="token string">"设计原则"</span>,                  Children: <span class="token punctuation">[</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                      Id: <span class="token string">"yizhi"</span>,                      TypeName: <span class="token string">"一致"</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                      Id: <span class="token string">"fankui"</span>,                      TypeName: <span class="token string">"反馈"</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                  <span class="token punctuation">]</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>              <span class="token punctuation">]</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>          <span class="token punctuation">]</span>,          defaultProps: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            children: <span class="token string">"Children"</span>,            label: <span class="token string">"TypeName"</span>,            value: <span class="token string">"Id"</span>,            emitPath: <span class="token boolean">false</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        date: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"日期"</span>,          type: <span class="token string">"date"</span>,//date类型          placeholder: <span class="token string">"YYYY-MM-DD"</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        time: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"时间"</span>,          type: <span class="token string">"time"</span>,//time类型          placeholder: <span class="token string">"HH:MM:SS"</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        delivery: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"即时配送"</span>,          type: <span class="token string">"switch"</span>//switch类型        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        sex: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"性别"</span>,          type: <span class="token string">"radio"</span>,//radio类型          options: <span class="token punctuation">[</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name: "男", value: "0" &amp;#125;,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name: "女", value: "1" &amp;#125;</span>          <span class="token punctuation">]</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        activityType: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"活动类型"</span>,          type: <span class="token string">"checkbox"</span>,//checkbox类型          options: this.activityType.options //字典-类型        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        file1: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"附件类型1"</span>,          type: <span class="token string">"file"</span>,//file类型          uploadUrl: <span class="token string">"https://jsonplaceholder.typicode.com/posts/"</span>,          span: 17        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        file2: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"可研报告"</span>,          type: <span class="token string">"file"</span>,          uploadUrl: <span class="token string">"https://jsonplaceholder.typicode.com/posts/"</span>,          span: 17        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        remark: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          label: <span class="token string">"备注"</span>,          type: <span class="token string">"textarea"</span>,//textarea类型          placeholder: <span class="token string">"..."</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>      // 表单赋值      <span class="token keyword">if</span> <span class="token punctuation">(</span>formData<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>const key <span class="token keyword">in</span> form<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          form<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> formData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      // 表单内容      this.elDialog.form <span class="token operator">=</span> form<span class="token punctuation">;</span>      // 表单配置      this.elDialog.formOptions <span class="token operator">=</span> formOptions<span class="token punctuation">;</span>      // 表单验证      this.elDialog.rules <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        price: <span class="token punctuation">[</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; required: true, message: "控制价不能为空" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; type: "number", message: "控制价必须为数字值" &amp;#125;</span>        <span class="token punctuation">]</span>,        type: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          required: true,          message: <span class="token string">"请选择项目类型"</span>,          trigger: <span class="token string">"blur"</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    // 保存或添加    saveEdit<span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this.<span class="token variable">$refs</span>.formDialog.validateForm<span class="token punctuation">(</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">let</span> params <span class="token operator">=</span> form<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>this.elDialog.id<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          params <span class="token operator">=</span> Object.assign<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; Id: this.elDialog.id &amp;#125;, form);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        Project.SaveProject<span class="token punctuation">(</span>params<span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          this.<span class="token variable">$message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            message: res.msg,            type: <span class="token string">"success"</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>          this.elDialog.visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          // 更新列表          this.getProjectList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    // 字典-活动类型    getActivityType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      Common.GetEnumList<span class="token punctuation">(</span><span class="token string">"ProjectType"</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        this.activityType.options <span class="token operator">=</span> res.data<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  mounted<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    this.getActivityType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p><a href="https://codepen.io/xmwarrior/pen/ExaoXZR?editors=1010">在线运行</a></p><h3 id="2-ElTableColumnPro-表头筛选组件"><a href="#2-ElTableColumnPro-表头筛选组件" class="headerlink" title="2.ElTableColumnPro 表头筛选组件"></a>2.ElTableColumnPro 表头筛选组件</h3><p>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"table-container"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el-table        :data<span class="token operator">=</span><span class="token string">"tableData"</span>        style<span class="token operator">=</span><span class="token string">"width: 100%;"</span>        :height<span class="token operator">=</span><span class="token string">"tableHeight"</span>        @sort-change<span class="token operator">=</span><span class="token string">"handleSortChange"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          align<span class="token operator">=</span><span class="token string">"center"</span>          prop<span class="token operator">=</span><span class="token string">"bh"</span>          label<span class="token operator">=</span><span class="token string">"项目编码"</span>          width<span class="token operator">=</span><span class="token string">"200"</span>        <span class="token operator">></span><span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column-pro          prop<span class="token operator">=</span><span class="token string">"xmmc"</span>          label<span class="token operator">=</span><span class="token string">"项目名称"</span>          align<span class="token operator">=</span><span class="token string">"center"</span>          header-align<span class="token operator">=</span><span class="token string">"center"</span>          placeholder<span class="token operator">=</span><span class="token string">"请输入项目名称"</span>          :callback<span class="token operator">=</span><span class="token string">"getTableData"</span>          renderType<span class="token operator">=</span><span class="token string">"input"</span>          :param.sync<span class="token operator">=</span><span class="token string">"PrjName"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column-pro<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column-pro          prop<span class="token operator">=</span><span class="token string">"PrjType"</span>          label<span class="token operator">=</span><span class="token string">"项目类型"</span>          placeholder<span class="token operator">=</span><span class="token string">"请选择项目类型"</span>          :selectList<span class="token operator">=</span><span class="token string">"PrjType.options"</span>          :callback<span class="token operator">=</span><span class="token string">"getTableData"</span>          renderType<span class="token operator">=</span><span class="token string">"select"</span>          :param.sync<span class="token operator">=</span><span class="token string">"PrjType.value"</span>          :width<span class="token operator">=</span><span class="token string">"140"</span>          :filterIcon<span class="token operator">=</span><span class="token string">"'iconfont icon-filter'"</span>          :isClear<span class="token operator">=</span><span class="token string">"true"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column-pro<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          align<span class="token operator">=</span><span class="token string">"center"</span>          prop<span class="token operator">=</span><span class="token string">"ContractAmount"</span>          label<span class="token operator">=</span><span class="token string">"合同价"</span>          sortable<span class="token operator">=</span><span class="token string">"custom"</span>        <span class="token operator">></span><span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          align<span class="token operator">=</span><span class="token string">"center"</span>          prop<span class="token operator">=</span><span class="token string">"PaymentAmount"</span>          label<span class="token operator">=</span><span class="token string">"已付款金额"</span>          sortable<span class="token operator">=</span><span class="token string">"custom"</span>        <span class="token operator">></span><span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column-pro          prop<span class="token operator">=</span><span class="token string">"PaymentAmount"</span>          label<span class="token operator">=</span><span class="token string">"起止日期"</span>          align<span class="token operator">=</span><span class="token string">"center"</span>          header-align<span class="token operator">=</span><span class="token string">"center"</span>          placeholder<span class="token operator">=</span><span class="token string">"请选择时间范围"</span>          :callback<span class="token operator">=</span><span class="token string">"getTableData"</span>          renderType<span class="token operator">=</span><span class="token string">"datetimerange"</span>          :param.sync<span class="token operator">=</span><span class="token string">"PaymentAmount"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column-pro<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column-pro          prop<span class="token operator">=</span><span class="token string">"StatusName"</span>          align<span class="token operator">=</span><span class="token string">"center"</span>          label<span class="token operator">=</span><span class="token string">"项目状态"</span>          placeholder<span class="token operator">=</span><span class="token string">"请选择项目状态"</span>          :selectList<span class="token operator">=</span><span class="token string">"Status.options"</span>          :callback<span class="token operator">=</span><span class="token string">"getTableData"</span>          renderType<span class="token operator">=</span><span class="token string">"select"</span>          :param.sync<span class="token operator">=</span><span class="token string">"Status.value"</span>          :width<span class="token operator">=</span><span class="token string">"140"</span>          :filterIcon<span class="token operator">=</span><span class="token string">"'iconfont icon-filter'"</span>          :isClear<span class="token operator">=</span><span class="token string">"true"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column-pro<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column align<span class="token operator">=</span><span class="token string">"center"</span> prop<span class="token operator">=</span><span class="token string">"FWPrjId"</span> label<span class="token operator">=</span><span class="token string">"操作"</span> width<span class="token operator">=</span><span class="token string">"180"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>template v-slot<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>el-button              type<span class="token operator">=</span><span class="token string">"primary"</span>              :size<span class="token operator">=</span><span class="token string">"size"</span>              @click<span class="token operator">=</span><span class="token string">"toEdit(&amp;#123; id: scope.row.FWPrjId &amp;#125;)"</span>              <span class="token operator">></span>编辑<span class="token operator">&lt;</span>/el-button            <span class="token operator">></span>          <span class="token operator">&lt;</span>/template<span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>      <span class="token operator">&lt;</span>/el-table<span class="token operator">></span>      <span class="token operator">&lt;</span>el-pagination        class<span class="token operator">=</span><span class="token string">"pt-3 text-right"</span>        @size-change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>        @current-change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>        :current-page<span class="token operator">=</span><span class="token string">"currentPage"</span>        :page-sizes<span class="token operator">=</span><span class="token string">"[10, 20, 30, 40]"</span>        :page-size<span class="token operator">=</span><span class="token string">"pageSize"</span>        layout<span class="token operator">=</span><span class="token string">"total, sizes, prev, pager, next, jumper"</span>        :total<span class="token operator">=</span><span class="token string">"total"</span>      <span class="token operator">></span><span class="token operator">&lt;</span>/el-pagination<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span>-- 表单弹窗 --<span class="token operator">></span>      <span class="token operator">&lt;</span>ElFormDialog        v-if<span class="token operator">=</span><span class="token string">"elDialog.visible"</span>        :options<span class="token operator">=</span><span class="token string">"elDialog"</span>        ref<span class="token operator">=</span><span class="token string">"formDialog"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>template <span class="token comment" spellcheck="true">#footerButtons="scope"></span>          <span class="token operator">&lt;</span>el-button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"saveEdit(scope.form)"</span>            <span class="token operator">></span>确定<span class="token operator">&lt;</span>/el-button          <span class="token operator">></span>          <span class="token operator">&lt;</span>el-button @click<span class="token operator">=</span><span class="token string">"elDialog.visible = false"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span>/el-button<span class="token operator">></span>        <span class="token operator">&lt;</span>/template<span class="token operator">></span>      <span class="token operator">&lt;</span>/ElFormDialog<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      size: <span class="token string">"mini"</span>,      tableHeight: window.innerHeight - 50,      tableData: <span class="token punctuation">[</span><span class="token punctuation">]</span>,      // page      currentPage: 1,      total: 1,      pageSize: 10,      // filter      PrjName: <span class="token string">"456465"</span>,      PaymentAmount:<span class="token string">""</span>,      PrjType: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        value: <span class="token string">""</span>,        options: <span class="token punctuation">[</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 1, name: "维修项目", tagType: "danger" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 2, name: "新建项目", tagType: "wanning" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 3, name: "技改项目", tagType: "info" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 4, name: "拆除项目", tagType: "success" &amp;#125;</span>        <span class="token punctuation">]</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>      Status: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        value: <span class="token string">""</span>,        options: <span class="token punctuation">[</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 1, name: "项目准备" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 2, name: "项目招标" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 3, name: "项目招标" &amp;#125;,</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; value: 4, name: "项目完成" &amp;#125;</span>        <span class="token punctuation">]</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>      Sort: <span class="token string">""</span>,      Order: <span class="token string">""</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    // change每页显示条数    handleSizeChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this.pageSize <span class="token operator">=</span> val<span class="token punctuation">;</span>      this.getTableData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    // 翻页    handleCurrentChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this.currentPage <span class="token operator">=</span> val<span class="token punctuation">;</span>      this.getTableData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    //排序    handleSortChange<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; column, prop, order &amp;#125;) &amp;#123;</span>      const sortMap <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        ascending: <span class="token string">"ASC"</span>,        descending: <span class="token string">"DESC"</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>      this.Sort <span class="token operator">=</span> prop<span class="token punctuation">;</span>      this.Order <span class="token operator">=</span> order ? sortMap<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token keyword">:</span> order<span class="token punctuation">;</span>      this.getTableData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    // 获取表格数据    getTableData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      Project.GetProjectList<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        Year: <span class="token string">""</span>,        PrjName: this.PrjName,        PrjType: this.PrjType.value,        Status: this.Status.value,        Sort: this.Sort,        Order: this.Order,        PageIndex: this.currentPage,        PageSize: this.pageSize      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;).then(res => &amp;#123;</span>        this.total <span class="token operator">=</span> res.data.Pager.PageCount<span class="token punctuation">;</span>        this.tableData <span class="token operator">=</span> res.data.PageTable<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="3-ElInfo-详情组件"><a href="#3-ElInfo-详情组件" class="headerlink" title="3.ElInfo 详情组件"></a>3.ElInfo 详情组件</h3><p>此组件默认支持图片预览插件<a href="https://github.com/826327700/vue-photo-preview">vue-photo-preview</a>，如果你想进行图片预览，只需项目中引用vue-photo-preview。<br>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- 详情弹窗 --<span class="token operator">></span>  <span class="token operator">&lt;</span>el-dialog    title<span class="token operator">=</span><span class="token string">"查看"</span>    :visible.sync<span class="token operator">=</span><span class="token string">"elInfo.visible"</span>    width<span class="token operator">=</span><span class="token string">"80%"</span>    class<span class="token operator">=</span><span class="token string">"text-left"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>el-info labelClass<span class="token operator">=</span><span class="token string">"text-justify"</span> labelWidth<span class="token operator">=</span><span class="token string">"80px"</span> :datas<span class="token operator">=</span><span class="token string">"elInfo.datas"</span><span class="token operator">></span><span class="token operator">&lt;</span>/  el-info<span class="token operator">></span>  <span class="token operator">&lt;</span>/el-dialog<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        elInfo: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>           visible: false,           datas: <span class="token punctuation">[</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               label: <span class="token string">"姓名"</span>,               value: <span class="token string">"小明"</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               label: <span class="token string">"性别"</span>,               value: <span class="token string">"男"</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               label: <span class="token string">"年龄"</span>,               value: <span class="token string">"18"</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               label: <span class="token string">"单身"</span>,               value: <span class="token string">"否"</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               label: <span class="token string">"备注"</span>,               value: <span class="token string">"小明"</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               type: <span class="token string">"images"</span>,               label: <span class="token string">"图片列表"</span>,               value: <span class="token punctuation">[</span><span class="token string">"https://upload.jianshu.io/users/upload_avatars/19764802/        d192f539-1942-4504-aadd-9d6bcd34ed33?imageMogr2/auto-orient/strip|imageView2/        1/w/240/h/240"</span>,<span class="token string">"https://upload.jianshu.io/users/upload_avatars/19764802/        d192f539-1942-4504-aadd-9d6bcd34ed33?imageMogr2/auto-orient/strip|imageView2/        1/w/240/h/240"</span><span class="token punctuation">]</span>,             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>               type: <span class="token string">"list"</span>,               label: <span class="token string">"附件列表"</span>,               value: <span class="token punctuation">[</span><span class="token string">"附件1.doc"</span>,<span class="token string">"附件2.xlxs"</span>,<span class="token string">"附件3.jpg"</span>,<span class="token string">"附件4.pdf"</span><span class="token punctuation">]</span>,             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>          <span class="token punctuation">]</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> npm </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手摸手带你使用Vue-Cli3搭建前端开发环境</title>
      <link href="/2020/02/09/smsdnsyvdjqdkfhj/"/>
      <url>/2020/02/09/smsdnsyvdjqdkfhj/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli搭建前端开发环境指南"><a href="#vue-cli搭建前端开发环境指南" class="headerlink" title="vue-cli搭建前端开发环境指南"></a>vue-cli搭建前端开发环境指南</h1><h2 id="一、vscode编辑器配置"><a href="#一、vscode编辑器配置" class="headerlink" title="一、vscode编辑器配置"></a>一、vscode编辑器配置</h2><h3 id="1、ESLint拓展安装"><a href="#1、ESLint拓展安装" class="headerlink" title="1、ESLint拓展安装"></a>1、ESLint拓展安装</h3><h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><ul><li>应用商店搜索安装<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></li><li>添加保存文件时自动修复代码格式功能</li></ul><pre class=" language-bash"><code class="language-bash">// 文件-<span class="token operator">></span>首选项-<span class="token operator">></span>设置-<span class="token operator">></span>在setting.json中编辑 添加代码：<span class="token string">"editor.codeActionsOnSave"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"source.fixAll"</span><span class="token keyword">:</span> <span class="token boolean">true</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><ul><li>ctrl+s操作触发当前文件修复</li></ul><h4 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h4><ul><li>应用商店搜索安装<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></li><li>插件安装完成后，-&gt; 配置拓展设置 prettier.requireConfig”: true</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/793981/1580977845286-e7384bf1-3dd3-4418-95c5-82e8fcd9a377.jpeg#align=left&display=inline&height=765&name=1580977831%281%29.jpg&originHeight=765&originWidth=1531&size=122683&status=done&style=none&width=1531" alt="1580977831(1).jpg"></p><ul><li>格式化文档操作触发</li></ul><h2 id="二、项目创建"><a href="#二、项目创建" class="headerlink" title="二、项目创建"></a>二、项目创建</h2><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><ul><li>Node.js 8.9 或更高版本</li><li>Vue-Cli3</li></ul><h3 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h3><ul><li>确定项目所在目录，当前目录下打开Powershell窗口，输入指令：</li></ul><pre class=" language-bash"><code class="language-bash">vue create projectName</code></pre><ul><li>选择手动安装类型（Manually）</li></ul><p>注：以下为初次使用本配置教程，如果已按教程配置过，可直接选择已保存的配置创建项目！</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580979705022-74572791-aac4-442e-8e25-d3e316578330.png#align=left&display=inline&height=94&name=QQ%E6%88%AA%E5%9B%BE20200206170134.png&originHeight=94&originWidth=711&size=10219&status=done&style=none&width=711" alt="QQ截图20200206170134.png"></p><ul><li>选择依赖需求（上下键切换，空格选择，回车确认）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580979872292-936e835a-79fe-4f64-85f2-7f5cdc559dc2.png#align=left&display=inline&height=237&name=2.png&originHeight=237&originWidth=607&size=20744&status=done&style=none&width=607" alt="2.png"></p><ul><li>选择是否使用history路由模式</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580979987233-3b4e6d3c-d948-49dd-b26e-6a1d13c4e77e.png#align=left&display=inline&height=52&name=3.png&originHeight=52&originWidth=713&size=7283&status=done&style=none&width=713" alt="3.png"></p><ul><li>选择css预处理器</li></ul><p> <img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580980114908-314f83bb-1907-439a-91ce-995ce887ae94.png#align=left&display=inline&height=124&name=4.png&originHeight=124&originWidth=700&size=11885&status=done&style=none&width=700" alt="4.png"></p><ul><li>选择格式效验方式</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580980249372-c1043ebb-b7a5-4ff3-9b47-c67cbe78a22b.png#align=left&display=inline&height=123&name=5.png&originHeight=123&originWidth=700&size=10208&status=done&style=none&width=700" alt="5.png"></p><ul><li>选择什么时候效验格式</li></ul><p> <img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580980387676-6169e614-cca8-4c29-8959-152f32f18580.png#align=left&display=inline&height=90&name=6.png&originHeight=90&originWidth=702&size=9139&status=done&style=none&width=702" alt="6.png"></p><ul><li>选择测试框架</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580980581920-a4d18701-6600-4fae-ae34-89e0b1174cf0.png#align=left&display=inline&height=71&name=7.png&originHeight=71&originWidth=700&size=4054&status=done&style=none&width=700" alt="7.png"><br><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html">测试框架 Mocha 实例教程 - 阮一峰</a></p><ul><li>选择项目的配置文件放哪，这里选择第一项单独存放</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580980826746-3b772b75-08c9-4063-9b1e-62387e8f8cea.png#align=left&display=inline&height=86&name=8.png&originHeight=86&originWidth=702&size=8915&status=done&style=none&width=702" alt="8.png"></p><ul><li>是否保存该配置作为后续项目的可选配置，选择是，并填写配置名称，后期项目直接采用此配置</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/793981/1580981087304-fd82a825-6d6d-47f5-9805-6b452098d366.png#align=left&display=inline&height=57&name=9.png&originHeight=57&originWidth=703&size=6624&status=done&style=none&width=703" alt="9.png"></p><p>等待安装完成后，用vscode编辑器打开项目。</p><h2 id="三、配置eslint"><a href="#三、配置eslint" class="headerlink" title="三、配置eslint"></a>三、配置eslint</h2><h3 id="1、配置eslint规则"><a href="#1、配置eslint规则" class="headerlink" title="1、配置eslint规则"></a>1、配置eslint规则</h3><p>配置eslint验证规则为eslint推荐规则，<a href="https://eslint.bootcss.com/docs/rules/">eslint推荐配置官网</a>：</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"extends"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>  <span class="token string">"eslint:recommended"</span>,// 添加 eslint推荐规则  <span class="token string">"plugin:vue/essential"</span>,  <span class="token string">"@vue/prettier"</span><span class="token punctuation">]</span>,</code></pre><h3 id="2、配置eslint批量修复指令"><a href="#2、配置eslint批量修复指令" class="headerlink" title="2、配置eslint批量修复指令"></a>2、配置eslint批量修复指令</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i eslint-plugin-vuefix@latest --save-dev</code></pre><p>package.json的script添加修复指令，修改检查指令。</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"lint"</span><span class="token keyword">:</span> <span class="token string">"eslint --ext .js,.vue src"</span><span class="token string">"fix"</span><span class="token keyword">:</span> <span class="token string">"eslint --ext .js,.vue src --fix"</span></code></pre><p>终端运行检查指令，检测项目文件格式问题：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run lint</code></pre><p>终端运行修复指令，批量修复代码格式:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run fix</code></pre><h2 id="四、配置目录结构"><a href="#四、配置目录结构" class="headerlink" title="四、配置目录结构"></a>四、配置目录结构</h2><p>目录结构本着“约定优于配置”的原则，约定目录名称和嵌套结构，尽量缩小自由发挥空间！</p><p>目录结构约定优先级：</p><ul><li>优先级 A：必要的</li><li>优先级 B：强烈推荐</li><li>优先级 C：推荐</li><li>优先级 D：可选</li></ul><p>添加api、request、styles、utils文件夹，各文件夹使用说明如图：</p><pre class=" language-bash"><code class="language-bash">├─api         //（必要）    业务接口文件夹│  └─业务功能名.js   //（强烈推荐） 创建以业务功能为名称的js文件├─assets       //（必要）    静态文件目录│  ├─icons      //（强烈推荐） 字体│  └─images      //（强烈推荐） 图片├─components     //（必要）    存放公共组件│  └─公共组件.vue├─requests      //（必要）  数据请求拦截统一配置文件夹│  ├─index.js     //（强烈推荐）数据请求拦截统一配置文件│  └─mock.js     //（可选）  ├─router       //（必要）  路由文件夹│  ├─index.js     //（必要）  路由总导出文件│  └─modules     //（必要）  存放业务路由文件│      └─业务功能名.js //（强烈推荐） 导出所有业务功能路由数组├─store        //（必要）  状态管理文件夹│  ├─getters.js    //（可选）  状态复杂时，多状态统一配置文件│  ├─index.js     //（必要）    状态总导出文件│  └─modules     //（可选）  状态复杂时，分类存放状态文件├─styles       //（必要）  公共样式文件夹│  ├─common.less   //（必要）  存放公共样式，此处只约定名称，文件类型根据预处理更改│  ├─reset.css    //（必要）  样式重置文件│  └─variable.less  //（必要）  公共样式风格变量├─utils        //（必要）  公共插件文件夹│  └─公共插件js└─views    ├─App.vue    ├─main.js    └─功能名称        //（强烈推荐）按功能名称创建文件夹        └─菜单名称      //（强烈推荐）按菜单名称创建文件夹            ├─components //（强烈推荐）存放依赖页面            └─Index.vue  //（强烈推荐）首页</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建&amp;工具分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Cli3 </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint rules字典</title>
      <link href="/2020/02/08/erzd/"/>
      <url>/2020/02/08/erzd/</url>
      
        <content type="html"><![CDATA[<h1 id="Eslint-rules字典"><a href="#Eslint-rules字典" class="headerlink" title="Eslint rules字典"></a>Eslint rules字典</h1><h2 id="规则级别"><a href="#规则级别" class="headerlink" title="规则级别"></a>规则级别</h2><ul><li>“off” 或 0 - 关闭规则</li><li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li><li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li></ul><h2 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h2><p><a href="https://eslint.org/docs/rules/">eslint官网-rules</a></p><pre class=" language-bash"><code class="language-bash"><span class="token string">"no-alert"</span><span class="token keyword">:</span> 0,//禁止使用alert confirm prompt<span class="token string">"no-array-constructor"</span><span class="token keyword">:</span> 2,//禁止使用数组构造器<span class="token string">"no-bitwise"</span><span class="token keyword">:</span> 0,//禁止使用按位运算符<span class="token string">"no-caller"</span><span class="token keyword">:</span> 1,//禁止使用arguments.caller或arguments.callee<span class="token string">"no-catch-shadow"</span><span class="token keyword">:</span> 2,//禁止catch子句参数与外部作用域变量同名<span class="token string">"no-class-assign"</span><span class="token keyword">:</span> 2,//禁止给类赋值<span class="token string">"no-cond-assign"</span><span class="token keyword">:</span> 2,//禁止在条件表达式中使用赋值语句<span class="token string">"no-console"</span><span class="token keyword">:</span> 0,//禁止使用console<span class="token string">"no-const-assign"</span><span class="token keyword">:</span> 2,//禁止修改const声明的变量<span class="token string">"no-constant-condition"</span><span class="token keyword">:</span> 2,//禁止在条件中使用常量表达式 if<span class="token punctuation">(</span>true<span class="token punctuation">)</span> if<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token string">"no-continue"</span><span class="token keyword">:</span> 0,//禁止使用continue<span class="token string">"no-control-regex"</span><span class="token keyword">:</span> 2,//禁止在正则表达式中使用控制字符<span class="token string">"no-debugger"</span><span class="token keyword">:</span> 2,//禁止使用debugger<span class="token string">"no-delete-var"</span><span class="token keyword">:</span> 2,//不能对var声明的变量使用delete操作符<span class="token string">"no-div-regex"</span><span class="token keyword">:</span> 1,//不能使用看起来像除法的正则表达式/<span class="token operator">=</span>foo/<span class="token string">"no-dupe-keys"</span><span class="token keyword">:</span> 2,//在创建对象字面量时不允许键重复 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;a:1,a:1&amp;#125;</span><span class="token string">"no-dupe-args"</span><span class="token keyword">:</span> 2,//函数参数不能重复<span class="token string">"no-duplicate-case"</span><span class="token keyword">:</span> 2,//switch中的case标签不能重复<span class="token string">"no-else-return"</span><span class="token keyword">:</span> 2,//如果if语句里面有return,后面不能跟else语句<span class="token string">"no-empty"</span><span class="token keyword">:</span> 2,//块语句中的内容不能为空<span class="token string">"no-empty-character-class"</span><span class="token keyword">:</span> 2,//正则表达式中的<span class="token punctuation">[</span><span class="token punctuation">]</span>内容不能为空<span class="token string">"no-empty-label"</span><span class="token keyword">:</span> 2,//禁止使用空label<span class="token string">"no-eq-null"</span><span class="token keyword">:</span> 2,//禁止对null使用<span class="token operator">==</span>或<span class="token operator">!=</span>运算符<span class="token string">"no-eval"</span><span class="token keyword">:</span> 1,//禁止使用eval<span class="token string">"no-ex-assign"</span><span class="token keyword">:</span> 2,//禁止给catch语句中的异常参数赋值<span class="token string">"no-extend-native"</span><span class="token keyword">:</span> 2,//禁止扩展native对象<span class="token string">"no-extra-bind"</span><span class="token keyword">:</span> 2,//禁止不必要的函数绑定<span class="token string">"no-extra-boolean-cast"</span><span class="token keyword">:</span> 2,//禁止不必要的bool转换<span class="token string">"no-extra-parens"</span><span class="token keyword">:</span> 2,//禁止非必要的括号<span class="token string">"no-extra-semi"</span><span class="token keyword">:</span> 2,//禁止多余的冒号<span class="token string">"no-fallthrough"</span><span class="token keyword">:</span> 1,//禁止switch穿透<span class="token string">"no-floating-decimal"</span><span class="token keyword">:</span> 2,//禁止省略浮点数中的0 .5 3.<span class="token string">"no-func-assign"</span><span class="token keyword">:</span> 2,//禁止重复的函数声明<span class="token string">"no-implicit-coercion"</span><span class="token keyword">:</span> 1,//禁止隐式转换<span class="token string">"no-implied-eval"</span><span class="token keyword">:</span> 2,//禁止使用隐式eval<span class="token string">"no-inline-comments"</span><span class="token keyword">:</span> 0,//禁止行内备注<span class="token string">"no-inner-declarations"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"functions"</span><span class="token punctuation">]</span>,//禁止在块语句中使用声明（变量或函数）<span class="token string">"no-invalid-regexp"</span><span class="token keyword">:</span> 2,//禁止无效的正则表达式<span class="token string">"no-invalid-this"</span><span class="token keyword">:</span> 2,//禁止无效的this，只能用在构造器，类，对象字面量<span class="token string">"no-irregular-whitespace"</span><span class="token keyword">:</span> 2,//不能有不规则的空格<span class="token string">"no-iterator"</span><span class="token keyword">:</span> 2,//禁止使用__iterator__ 属性<span class="token string">"no-label-var"</span><span class="token keyword">:</span> 2,//label名不能与var声明的变量名相同<span class="token string">"no-labels"</span><span class="token keyword">:</span> 2,//禁止标签声明<span class="token string">"no-lone-blocks"</span><span class="token keyword">:</span> 2,//禁止不必要的嵌套块<span class="token string">"no-lonely-if"</span><span class="token keyword">:</span> 2,//禁止else语句内只有if语句<span class="token string">"no-loop-func"</span><span class="token keyword">:</span> 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）<span class="token string">"no-mixed-requires"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, false<span class="token punctuation">]</span>,//声明时不能混用声明类型<span class="token string">"no-mixed-spaces-and-tabs"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, false<span class="token punctuation">]</span>,//禁止混用tab和空格<span class="token string">"linebreak-style"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"windows"</span><span class="token punctuation">]</span>,//换行风格<span class="token string">"no-multi-spaces"</span><span class="token keyword">:</span> 0,//不能用多余的空格<span class="token string">"no-multi-str"</span><span class="token keyword">:</span> 2,//字符串不能用\换行<span class="token string">"no-multiple-empty-lines"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>1, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"max": 3&amp;#125;],//空行最多不能超过2行</span><span class="token string">"no-native-reassign"</span><span class="token keyword">:</span> 2,//不能重写native对象<span class="token string">"no-negated-in-lhs"</span><span class="token keyword">:</span> 2,//in 操作符的左边不能有<span class="token operator">!</span><span class="token string">"no-nested-ternary"</span><span class="token keyword">:</span> 0,//禁止使用嵌套的三目运算<span class="token string">"no-new"</span><span class="token keyword">:</span> 1,//禁止在使用new构造一个实例后不赋值<span class="token string">"no-new-func"</span><span class="token keyword">:</span> 1,//禁止使用new Function<span class="token string">"no-new-object"</span><span class="token keyword">:</span> 2,//禁止使用new Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">"no-new-require"</span><span class="token keyword">:</span> 2,//禁止使用new require<span class="token string">"no-new-wrappers"</span><span class="token keyword">:</span> 2,//禁止使用new创建包装实例，new String new Boolean new Number<span class="token string">"no-obj-calls"</span><span class="token keyword">:</span> 2,//不能调用内置的全局对象，比如Math<span class="token punctuation">(</span><span class="token punctuation">)</span> JSON<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">"no-octal"</span><span class="token keyword">:</span> 2,//禁止使用八进制数字<span class="token string">"no-octal-escape"</span><span class="token keyword">:</span> 2,//禁止使用八进制转义序列<span class="token string">"no-param-reassign"</span><span class="token keyword">:</span> 2,//禁止给参数重新赋值<span class="token string">"no-path-concat"</span><span class="token keyword">:</span> 0,//node中不能使用__dirname或__filename做路径拼接<span class="token string">"no-plusplus"</span><span class="token keyword">:</span> 0,//禁止使用++，--<span class="token string">"no-process-env"</span><span class="token keyword">:</span> 0,//禁止使用process.env<span class="token string">"no-process-exit"</span><span class="token keyword">:</span> 0,//禁止使用process.exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">"no-proto"</span><span class="token keyword">:</span> 2,//禁止使用__proto__属性<span class="token string">"no-redeclare"</span><span class="token keyword">:</span> 2,//禁止重复声明变量<span class="token string">"no-regex-spaces"</span><span class="token keyword">:</span> 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/<span class="token string">"no-restricted-modules"</span><span class="token keyword">:</span> 0,//如果禁用了指定模块，使用就会报错<span class="token string">"no-return-assign"</span><span class="token keyword">:</span> 1,//return 语句中不能有赋值表达式<span class="token string">"no-script-url"</span><span class="token keyword">:</span> 0,//禁止使用javascript:void<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token string">"no-self-compare"</span><span class="token keyword">:</span> 2,//不能比较自身<span class="token string">"no-sequences"</span><span class="token keyword">:</span> 0,//禁止使用逗号运算符<span class="token string">"no-shadow"</span><span class="token keyword">:</span> 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名<span class="token string">"no-shadow-restricted-names"</span><span class="token keyword">:</span> 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用<span class="token string">"no-spaced-func"</span><span class="token keyword">:</span> 2,//函数调用时 函数名与<span class="token punctuation">(</span><span class="token punctuation">)</span>之间不能有空格<span class="token string">"no-sparse-arrays"</span><span class="token keyword">:</span> 2,//禁止稀疏数组， <span class="token punctuation">[</span>1,,2<span class="token punctuation">]</span><span class="token string">"no-sync"</span><span class="token keyword">:</span> 0,//nodejs 禁止同步方法<span class="token string">"no-ternary"</span><span class="token keyword">:</span> 0,//禁止使用三目运算符<span class="token string">"no-trailing-spaces"</span><span class="token keyword">:</span> 1,//一行结束后面不要有空格<span class="token string">"no-this-before-super"</span><span class="token keyword">:</span> 0,//在调用super<span class="token punctuation">(</span><span class="token punctuation">)</span>之前不能使用this或super<span class="token string">"no-throw-literal"</span><span class="token keyword">:</span> 2,//禁止抛出字面量错误 throw <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token string">"no-undef"</span><span class="token keyword">:</span> 2,//不能有未定义的变量<span class="token string">"no-undef-init"</span><span class="token keyword">:</span> 2,//变量初始化时不能直接给它赋值为undefined<span class="token string">"no-undefined"</span><span class="token keyword">:</span> 2,//不能使用undefined<span class="token string">"no-unexpected-multiline"</span><span class="token keyword">:</span> 2,//避免多行表达式<span class="token string">"no-underscore-dangle"</span><span class="token keyword">:</span> 1,//标识符不能以_开头或结尾<span class="token string">"no-unneeded-ternary"</span><span class="token keyword">:</span> 2,//禁止不必要的嵌套 var isYes <span class="token operator">=</span> answer <span class="token operator">==</span><span class="token operator">=</span> 1 ? <span class="token boolean">true</span> <span class="token keyword">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token string">"no-unreachable"</span><span class="token keyword">:</span> 2,//不能有无法执行的代码<span class="token string">"no-unused-expressions"</span><span class="token keyword">:</span> 2,//禁止无用的表达式<span class="token string">"no-unused-vars"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"vars": "all", "args": "after-used"&amp;#125;],//不能有声明后未被使用的变量或参数</span><span class="token string">"no-use-before-define"</span><span class="token keyword">:</span> 2,//未定义前不能使用<span class="token string">"no-useless-call"</span><span class="token keyword">:</span> 2,//禁止不必要的call和apply<span class="token string">"no-void"</span><span class="token keyword">:</span> 2,//禁用void操作符<span class="token string">"no-var"</span><span class="token keyword">:</span> 0,//禁用var，用let和const代替<span class="token string">"no-warning-comments"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>1, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; "terms": ["todo", "fixme", "xxx"], "location": "start" &amp;#125;],//不能有警告备注</span><span class="token string">"no-with"</span><span class="token keyword">:</span> 2,//禁用with<span class="token string">"array-bracket-spacing"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"never"</span><span class="token punctuation">]</span>,//是否允许非空数组里面有多余的空格<span class="token string">"arrow-parens"</span><span class="token keyword">:</span> 0,//箭头函数用小括号括起来<span class="token string">"arrow-spacing"</span><span class="token keyword">:</span> 0,//<span class="token operator">=</span><span class="token operator">></span>的前/后括号<span class="token string">"accessor-pairs"</span><span class="token keyword">:</span> 0,//在对象中使用getter/setter<span class="token string">"block-scoped-var"</span><span class="token keyword">:</span> 0,//块语句中使用var<span class="token string">"brace-style"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>1, <span class="token string">"1tbs"</span><span class="token punctuation">]</span>,//大括号风格<span class="token string">"callback-return"</span><span class="token keyword">:</span> 1,//避免多次调用回调什么的<span class="token string">"camelcase"</span><span class="token keyword">:</span> 2,//强制驼峰法命名<span class="token string">"comma-dangle"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"never"</span><span class="token punctuation">]</span>,//对象字面量项尾不能有逗号<span class="token string">"comma-spacing"</span><span class="token keyword">:</span> 0,//逗号前后的空格<span class="token string">"comma-style"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"last"</span><span class="token punctuation">]</span>,//逗号风格，换行时在行首还是行尾<span class="token string">"complexity"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, 11<span class="token punctuation">]</span>,//循环复杂度<span class="token string">"computed-property-spacing"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"never"</span><span class="token punctuation">]</span>,//是否允许计算后的键名什么的<span class="token string">"consistent-return"</span><span class="token keyword">:</span> 0,//return 后面是否允许省略<span class="token string">"consistent-this"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"that"</span><span class="token punctuation">]</span>,//this别名<span class="token string">"constructor-super"</span><span class="token keyword">:</span> 0,//非派生类不能调用super，派生类必须调用super<span class="token string">"curly"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"all"</span><span class="token punctuation">]</span>,//必须使用 if<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125; 中的&amp;#123;&amp;#125;</span><span class="token string">"default-case"</span><span class="token keyword">:</span> 2,//switch语句最后必须有default<span class="token string">"dot-location"</span><span class="token keyword">:</span> 0,//对象访问符的位置，换行的时候在行首还是行尾<span class="token string">"dot-notation"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; "allowKeywords": true &amp;#125;],//避免不必要的方括号</span><span class="token string">"eol-last"</span><span class="token keyword">:</span> 0,//文件以单一的换行符结束<span class="token string">"eqeqeq"</span><span class="token keyword">:</span> 0,//必须使用全等<span class="token string">"func-names"</span><span class="token keyword">:</span> 0,//函数表达式必须有名字<span class="token string">"func-style"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"declaration"</span><span class="token punctuation">]</span>,//函数风格，规定只能使用函数声明/函数表达式<span class="token string">"generator-star-spacing"</span><span class="token keyword">:</span> 0,//生成器函数*的前后空格<span class="token string">"guard-for-in"</span><span class="token keyword">:</span> 0,//for in循环要用if语句过滤<span class="token string">"handle-callback-err"</span><span class="token keyword">:</span> 0,//nodejs 处理错误<span class="token string">"id-length"</span><span class="token keyword">:</span> 0,//变量名长度<span class="token string">"indent"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, 2<span class="token punctuation">]</span>,//缩进风格<span class="token string">"init-declarations"</span><span class="token keyword">:</span> 0,//声明时必须赋初值<span class="token string">"key-spacing"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; "beforeColon": false, "afterColon": true &amp;#125;],//对象字面量中冒号的前后空格</span><span class="token string">"lines-around-comment"</span><span class="token keyword">:</span> 0,//行前/行后备注<span class="token string">"max-depth"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, 4<span class="token punctuation">]</span>,//嵌套块深度<span class="token string">"max-len"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, 80, 4<span class="token punctuation">]</span>,//字符串最大长度<span class="token string">"max-nested-callbacks"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, 2<span class="token punctuation">]</span>,//回调嵌套深度<span class="token string">"max-params"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, 3<span class="token punctuation">]</span>,//函数最多只能有3个参数<span class="token string">"max-statements"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, 10<span class="token punctuation">]</span>,//函数内最多有几个声明<span class="token string">"new-cap"</span><span class="token keyword">:</span> 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用<span class="token string">"new-parens"</span><span class="token keyword">:</span> 2,//new时必须加小括号<span class="token string">"newline-after-var"</span><span class="token keyword">:</span> 2,//变量声明后是否需要空一行<span class="token string">"object-curly-spacing"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"never"</span><span class="token punctuation">]</span>,//大括号内是否允许不必要的空格<span class="token string">"object-shorthand"</span><span class="token keyword">:</span> 0,//强制对象字面量缩写语法<span class="token string">"one-var"</span><span class="token keyword">:</span> 1,//连续声明<span class="token string">"operator-assignment"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"always"</span><span class="token punctuation">]</span>,//赋值运算符 +<span class="token operator">=</span> -<span class="token operator">=</span>什么的<span class="token string">"operator-linebreak"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"after"</span><span class="token punctuation">]</span>,//换行时运算符在行尾还是行首<span class="token string">"padded-blocks"</span><span class="token keyword">:</span> 0,//块语句内行首行尾是否要空行<span class="token string">"prefer-const"</span><span class="token keyword">:</span> 0,//首选const<span class="token string">"prefer-spread"</span><span class="token keyword">:</span> 0,//首选展开运算<span class="token string">"prefer-reflect"</span><span class="token keyword">:</span> 0,//首选Reflect的方法<span class="token string">"quotes"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>1, <span class="token string">"single"</span><span class="token punctuation">]</span>,//引号类型 `` <span class="token string">""</span> <span class="token string">''</span><span class="token string">"quote-props"</span>:<span class="token punctuation">[</span>2, <span class="token string">"always"</span><span class="token punctuation">]</span>,//对象字面量中的属性名是否强制双引号<span class="token string">"radix"</span><span class="token keyword">:</span> 2,//parseInt必须指定第二个参数<span class="token string">"id-match"</span><span class="token keyword">:</span> 0,//命名检测<span class="token string">"require-yield"</span><span class="token keyword">:</span> 0,//生成器函数必须有yield<span class="token string">"semi"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"always"</span><span class="token punctuation">]</span>,//语句强制分号结尾<span class="token string">"semi-spacing"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"before": false, "after": true&amp;#125;],//分号前后空格</span><span class="token string">"sort-vars"</span><span class="token keyword">:</span> 0,//变量声明时排序<span class="token string">"space-after-keywords"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"always"</span><span class="token punctuation">]</span>,//关键字后面是否要空一格<span class="token string">"space-before-blocks"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"always"</span><span class="token punctuation">]</span>,//不以新行开始的块<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;前面要不要有空格</span><span class="token string">"space-before-function-paren"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"always"</span><span class="token punctuation">]</span>,//函数定义时括号前面要不要有空格<span class="token string">"space-in-parens"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token string">"never"</span><span class="token punctuation">]</span>,//小括号里面要不要有空格<span class="token string">"space-infix-ops"</span><span class="token keyword">:</span> 0,//中缀操作符周围要不要有空格<span class="token string">"space-return-throw-case"</span><span class="token keyword">:</span> 2,//return throw case后面要不要加空格<span class="token string">"space-unary-ops"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>0, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; "words": true, "nonwords": false &amp;#125;],//一元运算符的前/后要不要加空格</span><span class="token string">"spaced-comment"</span><span class="token keyword">:</span> 0,//注释风格要不要有空格什么的<span class="token string">"strict"</span><span class="token keyword">:</span> 2,//使用严格模式<span class="token string">"use-isnan"</span><span class="token keyword">:</span> 2,//禁止比较时使用NaN，只能用isNaN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">"valid-jsdoc"</span><span class="token keyword">:</span> 0,//jsdoc规则<span class="token string">"valid-typeof"</span><span class="token keyword">:</span> 2,//必须使用合法的typeof的值<span class="token string">"vars-on-top"</span><span class="token keyword">:</span> 2,//var必须放在作用域顶部<span class="token string">"wrap-iife"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"inside"</span><span class="token punctuation">]</span>,//立即执行函数表达式的小括号风格<span class="token string">"wrap-regex"</span><span class="token keyword">:</span> 0,//正则表达式字面量用小括号包起来<span class="token string">"yoda"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>2, <span class="token string">"never"</span><span class="token punctuation">]</span>//禁止尤达条件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建&amp;工具分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eslint效验工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue规范</title>
      <link href="/2020/01/14/vgf/"/>
      <url>/2020/01/14/vgf/</url>
      
        <content type="html"><![CDATA[<h2 id="1-组件选项顺序"><a href="#1-组件选项顺序" class="headerlink" title="1.组件选项顺序"></a>1.组件选项顺序</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- component name --<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  name: <span class="token string">""</span>,  components: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>  props: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  watch: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>  computed: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>  mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span></code></pre><h2 id="2-命名"><a href="#2-命名" class="headerlink" title="2.命名"></a>2.命名</h2><p>1.类名、构造函数，使用名词，大写字母开头。</p><pre class=" language-bash"><code class="language-bash">new Point<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>2.函数名，使用动宾短语。</p><pre class=" language-bash"><code class="language-bash">getAssetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span></code></pre><p>3.boolean 类型的变量使用 is 或 has 开头。</p><pre class=" language-bash"><code class="language-bash">isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>hasChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><p>5.id 采用驼峰式命名，class 采用横线连接(kebab-case)命名，保证语义化，禁止采用缩写。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#mapContainer</span>.grid-box</code></pre><p>6.文件夹命名、css、less、js 文件采用小驼峰式命名。</p><pre class=" language-bash"><code class="language-bash">reset.csscommon.lessuserPermission.jsElTableColumnPro.vue</code></pre><p>7.vue 组件命名，组件名为多个单词，采用大驼峰式命名，尽量是名词。</p><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h2><ul><li>单行注释</li></ul><pre class=" language-bash"><code class="language-bash">// 函数描述</code></pre><ul><li>多行注释</li></ul><pre class=" language-bash"><code class="language-bash">/** * 函数描述 * @param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;参数类型&amp;#125; 参数名 参数描述(可选)</span> * @return <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;返回类型&amp;#125; 返回描述</span> */</code></pre><h2 id="4-书写规范"><a href="#4-书写规范" class="headerlink" title="4.书写规范"></a>4.书写规范</h2><h3 id="html-templete"><a href="#html-templete" class="headerlink" title="html(templete)"></a>html(templete)</h3><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul><li>1.Prop 定义尽量详细，必须指定参数类型，必要时设置默认值。</li></ul><pre class=" language-bash"><code class="language-bash">props: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  status: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    type: String,    required: true,    validator: <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string">'syncing'</span>,        <span class="token string">'synced'</span>,        <span class="token string">'version-conflict'</span>,        <span class="token string">'error'</span>      <span class="token punctuation">]</span>.indexOf<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">=</span> -1    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><ul><li><p>2.console.log、debugger使用完及时删除。</p></li><li><p>3.私有方法使用下划线开头</p></li></ul><pre class=" language-bash"><code class="language-bash">_getPromoteAmount: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span></code></pre><ul><li><p>4.采用 ES6 关键字const、let定义变量，优先级顺序 const&gt;let，避免使用var。</p></li><li><p>5.循环语句添加key</p></li></ul><pre class=" language-base"><code class="language-base"><switch  v-for="item in items"  :key="item.id"</switch></code></pre><ul><li><p>6.不同功能 data 变量用注释分割。</p></li><li><p>7.函数参数，如有布尔值参数需对象方式传参。</p></li></ul><pre class=" language-bash"><code class="language-bash">getList<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;isByTreeSelect:true&amp;#125;)</span></code></pre><ul><li><p>8.函数尽量遵循单一原则。</p></li><li><p>9.始终使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>。</p></li><li><p>10.js语句以分号<code>;</code>结尾，禁止省略。</p></li><li><p>11.用JavaScript高级函数代替for-in、 for-of。 Why? 这强调了我们不可变的规则。 处理返回值的纯函数比副作用更容易。用数组的这些迭代方法： map() &#x2F; every() &#x2F; filter() &#x2F; find() &#x2F; findIndex() &#x2F; reduce() &#x2F; some() &#x2F; … , 用对象的这些方法 Object.keys() &#x2F; Object.values() &#x2F; Object.entries() 去产生一个数组， 这样你就能去遍历对象了。</p></li><li><p>12.不要保存引用this， 用箭头函数或函数绑定<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function#bind</a></p></li><li><p>13.不要用前置或后置下划线。</p></li></ul><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ul><li>1.尽量减少组件内部scoped样式<ul><li>尽量减少单文件组件内部样式，提高公共样式的复用。常量类样式如颜色、统一边距、多处复用的样式，封装为less变量使用，统一存放到<code>variable.less</code>样式文件内引用。</li><li>尽量不要改变元素默认行为，保持默认的文本流。</li><li>避免嵌套层级过多（嵌套深度限制在2-3级）。</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">@labelColor:<span class="token comment" spellcheck="true">#C0C4D6;</span>@textColor:<span class="token comment" spellcheck="true">#333333;</span>.scrollbar <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token operator">&amp;</span>::-webkit-scrollbar <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    /*滚动条整体样式*/    width: 4px<span class="token punctuation">;</span>    height: 14px<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span>::-webkit-scrollbar-thumb <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    /*滚动条里面小方块*/    border-radius: 10px<span class="token punctuation">;</span>    box-shadow: inset 0 0 0 rgba<span class="token punctuation">(</span>255, 255, 255, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>    background: rgba<span class="token punctuation">(</span>11, 141, 233, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span>::-webkit-scrollbar-track <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    /*滚动条里面轨道*/    border-radius: 10px<span class="token punctuation">;</span>    background: rgba<span class="token punctuation">(</span>11, 141, 233, 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="5-vscode统一拓展插件使用"><a href="#5-vscode统一拓展插件使用" class="headerlink" title="5.vscode统一拓展插件使用"></a>5.vscode统一拓展插件使用</h2><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">prettier</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">vetur</a></p></li></ul><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h2><ol><li><p>提高代码复用，两遍及以上的代码重复需合并（函数复用、样式复用、templete模板不能重复）。</p></li><li><p>优先框架组件使用，其次优质组件,其次自定义组件样式。</p></li><li><p>公共组件，需抽象化命名属性及方法名。</p></li><li><p>导入组件优先使用 npm 优质高 star 组件，优先使用 es6 模块导入方式<code>import</code>，选择组件需两人以上共同决定。</p></li><li><p>尽量避免父子组件强耦合绑定属性。</p></li><li><p>保证注释同步更新，多余注释及时删除（多余html、css、js注释）。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce方法应用技巧</title>
      <link href="/2019/10/09/rffyyjq/"/>
      <url>/2019/10/09/rffyyjq/</url>
      
        <content type="html"><![CDATA[<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br>注意: reduce() 对于空数组是不会执行回调函数的。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><table><thead><tr><th align="center">方法</th><th align="center">Chrome</th><th align="center">Edge</th><th align="center">Firefox</th><th align="center">Safari</th><th align="center">Opera</th></tr></thead><tbody><tr><td align="center">reduce()</td><td align="center">Yes</td><td align="center">9.0</td><td align="center">3.0</td><td align="center">4</td><td align="center">10.5</td></tr></tbody></table><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></pre><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>基本的数值运算，例如求和：</p><pre><code>var numbers = [65, 44, 12, 4];numbers.reduce(function(total, currentValue) &#123;    return total + currentValue;&#125;);</code></pre><p><a href="https://codepen.io/xmwarrior/pen/xxbLqwg">运行一下</a></p><h2 id="进阶应用"><a href="#进阶应用" class="headerlink" title="进阶应用"></a>进阶应用</h2><h4 id="数组转换为对象"><a href="#数组转换为对象" class="headerlink" title="数组转换为对象"></a>数组转换为对象</h4><pre><code>var arr = [&#123;    n: &quot;小明&quot;,    a: 18,    s: &quot;男&quot;&#125;, &#123;    n: &quot;小红&quot;,    a: 17,    s: &quot;女&quot;&#125;];arr.reduce(function(total, currentValue, currentIndex) &#123;    total[currentValue.n] = &#123;        age: currentValue.a,        sex: currentValue.s    &#125;;    return total;&#125;, &#123;&#125;)</code></pre><p><a href="https://codepen.io/xmwarrior/pen/povregz">运行一下</a></p><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><pre><code>let pipe = (function() &#123;    return function(value, context) &#123;        context = context || window;        let methods = [];        let oproxy = new Proxy(&#123;&#125;, &#123;            get(target, methodName) &#123;                if(methodName === &#39;get&#39;) &#123;                    return methods.reduce((val, fn) =&gt; fn(val, context), value);                &#125; else &#123;                    methods.push(context[methodName]);                    return oproxy;                &#125;            &#125;        &#125;);        return oproxy;    &#125;&#125;)();let obj = &#123;    double: val =&gt; val * 2,    pow: val =&gt; val * val&#125;pipe(4, obj).double.pow.get //64</code></pre><p><a href="https://codepen.io/xmwarrior/pen/ZEYJeWb">运行一下</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于elementUI表头筛选组件封装</title>
      <link href="/2019/09/30/jyebtsxzjfz/"/>
      <url>/2019/09/30/jyebtsxzjfz/</url>
      
        <content type="html"><![CDATA[<h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p>推荐<code>main.js</code>里全局引用：</p><pre><code>import ElTableColumnPro from &#39;./components/ElTableColumnPro.vue&#39;;ElTableColumnPro.install = function(Vue) &#123; Vue.component(ElTableColumnPro.name, ElTableColumnPro);&#125;;Vue.use(ElTableColumnPro);</code></pre><p>然后引用页面直接在<el-table>标签下添加，具体各种类型的筛选自行根据类型添加相应格式，以下为input类型</p><pre><code>&lt;el-table-column-pro  :width=&quot;160&quot;  prop=&quot;AssetCode&quot;  label=&quot;设备编号 &quot;  align=&quot;center&quot;  header-align=&quot;center&quot;  placeholder=&quot;请输入设备编号&quot;  :callback=&quot;getTableDatas&quot;  renderType=&quot;input&quot;  :param.sync=&quot;AssetCode&quot;&gt;  &lt;template #content=&quot;scope&quot;&gt;    &lt;div class=&quot;text-center&quot;&gt;      &lt;router-link        :to=&quot;&#123; name: &#39;资产管理详情&#39;, query: &#123; id: scope.row.Id &#125;&#125;&quot;      &gt;&#123;&#123;scope.row.AssetCode&#125;&#125;&lt;/router-link&gt;    &lt;/div&gt;  &lt;/template&gt;&lt;/el-table-column-pro&gt;</code></pre><h2 id="ElTableColumnPro-vue"><a href="#ElTableColumnPro-vue" class="headerlink" title="ElTableColumnPro.vue"></a>ElTableColumnPro.vue</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el-table-column    v-if<span class="token operator">=</span><span class="token string">"visible"</span>    :formatter<span class="token operator">=</span><span class="token string">"formatter"</span>    :align<span class="token operator">=</span><span class="token string">"align"</span>    :prop<span class="token operator">=</span><span class="token string">"prop"</span>    :header-align<span class="token operator">=</span><span class="token string">"headerAlign"</span>    :label<span class="token operator">=</span><span class="token string">"label"</span>    :width<span class="token operator">=</span><span class="token string">"width"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>template v-slot:header<span class="token operator">=</span><span class="token string">"slotProps"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span>-- input --<span class="token operator">></span>      <span class="token operator">&lt;</span>div v-if<span class="token operator">=</span><span class="token string">"renderType==='input'"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;label&amp;#125;&amp;#125;&lt;/span></span>        <span class="token operator">&lt;</span>el-popover v-model<span class="token operator">=</span><span class="token string">"popover"</span> placement<span class="token operator">=</span><span class="token string">"bottom"</span> width<span class="token operator">=</span><span class="token string">"220"</span> trigger<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"d-flex"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>el-input size<span class="token operator">=</span><span class="token string">"mini"</span> :placeholder<span class="token operator">=</span><span class="token string">"placeholder"</span> v-model<span class="token operator">=</span><span class="token string">"value"</span> :clearable<span class="token operator">=</span><span class="token string">"isClear"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-input<span class="token operator">></span>            <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"search-popver"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>el-button type<span class="token operator">=</span><span class="token string">"primary"</span> size<span class="token operator">=</span><span class="token string">"mini"</span> @click<span class="token operator">=</span><span class="token string">"emitChange"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-search"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-button<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> class<span class="token operator">=</span><span class="token string">"cursor-point"</span> :class<span class="token operator">=</span><span class="token string">"param?'filtered-color '+icon:icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>        <span class="token operator">&lt;</span>/el-popover<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token keyword">select</span> --<span class="token operator">></span>      <span class="token operator">&lt;</span>div v-if<span class="token operator">=</span><span class="token string">"renderType==='select'"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;label&amp;#125;&amp;#125;&lt;/span></span>        <span class="token operator">&lt;</span>el-popover v-model<span class="token operator">=</span><span class="token string">"popover"</span> placement<span class="token operator">=</span><span class="token string">"bottom"</span> width<span class="token operator">=</span><span class="token string">"200"</span> trigger<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"d-flex"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>el-select              size<span class="token operator">=</span><span class="token string">"mini"</span>              v-model<span class="token operator">=</span><span class="token string">"value"</span>              placeholder<span class="token operator">=</span><span class="token string">"请选择"</span>              filterable              :clearable<span class="token operator">=</span><span class="token string">"isClear"</span>            <span class="token operator">></span>              <span class="token operator">&lt;</span>el-option                v-for<span class="token operator">=</span><span class="token string">"(item,index) in selectList"</span>                :label<span class="token operator">=</span><span class="token string">"item.name"</span>                :value<span class="token operator">=</span><span class="token string">"item.value"</span>                :key<span class="token operator">=</span><span class="token string">"index"</span>              <span class="token operator">></span><span class="token operator">&lt;</span>/el-option<span class="token operator">></span>            <span class="token operator">&lt;</span>/el-select<span class="token operator">></span>            <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"search-popver"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>el-button type<span class="token operator">=</span><span class="token string">"primary"</span> size<span class="token operator">=</span><span class="token string">"mini"</span> class<span class="token operator">=</span><span class="token string">"el-icon-search"</span> @click<span class="token operator">=</span><span class="token string">"emitChange"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-button<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> class<span class="token operator">=</span><span class="token string">"cursor-point"</span> :class<span class="token operator">=</span><span class="token string">"param?'filtered-color '+icon:icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>        <span class="token operator">&lt;</span>/el-popover<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span>-- Cascader --<span class="token operator">></span>      <span class="token operator">&lt;</span>div v-if<span class="token operator">=</span><span class="token string">"renderType==='cascader'"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;label&amp;#125;&amp;#125;&lt;/span></span>        <span class="token operator">&lt;</span>el-popover v-model<span class="token operator">=</span><span class="token string">"popover"</span> placement<span class="token operator">=</span><span class="token string">"bottom"</span> width<span class="token operator">=</span><span class="token string">"200"</span> trigger<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"d-flex"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>el-cascader              v-model<span class="token operator">=</span><span class="token string">"value"</span>              size<span class="token operator">=</span><span class="token string">"mini"</span>              placeholder<span class="token operator">=</span><span class="token string">"请选择"</span>              clearable              :options<span class="token operator">=</span><span class="token string">"selectList"</span>              :props<span class="token operator">=</span><span class="token string">"defaultProps"</span>              :show-all-levels<span class="token operator">=</span><span class="token string">"false"</span>            <span class="token operator">></span><span class="token operator">&lt;</span>/el-cascader<span class="token operator">></span>            <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"search-popver"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>el-button type<span class="token operator">=</span><span class="token string">"primary"</span> size<span class="token operator">=</span><span class="token string">"mini"</span> class<span class="token operator">=</span><span class="token string">"el-icon-search"</span> @click<span class="token operator">=</span><span class="token string">"emitChange"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-button<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> class<span class="token operator">=</span><span class="token string">"cursor-point"</span> :class<span class="token operator">=</span><span class="token string">"param?'filtered-color '+icon:icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>        <span class="token operator">&lt;</span>/el-popover<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span>-- datetimerange --<span class="token operator">></span>      <span class="token operator">&lt;</span>div v-if<span class="token operator">=</span><span class="token string">"renderType==='datetimerange'"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;label&amp;#125;&amp;#125;&lt;/span></span>        <span class="token operator">&lt;</span>el-popover v-model<span class="token operator">=</span><span class="token string">"popover"</span> placement<span class="token operator">=</span><span class="token string">"bottom"</span> width<span class="token operator">=</span><span class="token string">"430"</span> trigger<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"d-flex"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>el-input size<span class="token operator">=</span><span class="token string">"mini"</span> :placeholder<span class="token operator">=</span><span class="token string">"placeholder"</span> v-model<span class="token operator">=</span><span class="token string">"value"</span> :clearable<span class="token operator">=</span><span class="token string">"isClear"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-input<span class="token operator">></span> --<span class="token operator">></span>            <span class="token operator">&lt;</span>el-date-picker              size<span class="token operator">=</span><span class="token string">"mini"</span>              :placeholder<span class="token operator">=</span><span class="token string">"placeholder"</span>              v-model<span class="token operator">=</span><span class="token string">"value"</span>              type<span class="token operator">=</span><span class="token string">"datetimerange"</span>              range-separator<span class="token operator">=</span><span class="token string">"至"</span>              start-placeholder<span class="token operator">=</span><span class="token string">"开始日期"</span>              end-placeholder<span class="token operator">=</span><span class="token string">"结束日期"</span>              :clearable<span class="token operator">=</span><span class="token string">"isClear"</span>            <span class="token operator">></span><span class="token operator">&lt;</span>/el-date-picker<span class="token operator">></span>            <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"search-popver"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>el-button type<span class="token operator">=</span><span class="token string">"primary"</span> size<span class="token operator">=</span><span class="token string">"mini"</span> @click<span class="token operator">=</span><span class="token string">"emitChange"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-search"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-button<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> class<span class="token operator">=</span><span class="token string">"cursor-point"</span> :class<span class="token operator">=</span><span class="token string">"param?'filtered-color '+icon:icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>        <span class="token operator">&lt;</span>/el-popover<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>template v-slot<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"content"</span> :row<span class="token operator">=</span><span class="token string">"scope.row"</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;scope.row[prop]&amp;#125;&amp;#125;&lt;/slot></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span>  <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  name: <span class="token string">"el-table-column-pro"</span>,  props: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    prop: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    label: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    width: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Number    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    renderType: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String,      validator: value <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">[</span><span class="token string">"datetimerange"</span>, <span class="token string">"input"</span>, <span class="token string">"select"</span>, <span class="token string">"cascader"</span><span class="token punctuation">]</span>.includes<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    placeholder: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    rederWidth: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String,      default: <span class="token string">"230px"</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    param: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: <span class="token punctuation">[</span>String, Number, Array<span class="token punctuation">]</span>,      default: <span class="token string">""</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    startDate: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    endDate: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    selectList: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Array    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    defaultProps: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Object    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    isClear: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Boolean,      default: <span class="token boolean">true</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    visible: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Boolean,      default: <span class="token boolean">true</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    filterIcon: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String,      default: <span class="token string">"el-icon-search"</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    callback: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Function    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    formatter: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: Function,      default: <span class="token punctuation">(</span>row, cellValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> cellValue    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    align: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    headerAlign: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      type: String    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      icon: this.filterIcon,      value: this.param,      popover: <span class="token boolean">false</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    emitChange<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this.<span class="token variable">$emit</span><span class="token punctuation">(</span><span class="token string">"update:param"</span>, this.value<span class="token punctuation">)</span><span class="token punctuation">;</span>      this.callback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      this.popover <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    fomatMethod<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token keyword">return</span> this.formatter<span class="token punctuation">(</span><span class="token string">""</span>, <span class="token string">""</span>, value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span>// table表头筛选颜色.filtered-color <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  color: var<span class="token punctuation">(</span>--thFilterColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> elementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express搭建增删改查本地JSON后台(示例)</title>
      <link href="/2019/05/27/edjzsgcbdjht/"/>
      <url>/2019/05/27/edjzsgcbdjht/</url>
      
        <content type="html"><![CDATA[<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><img src="/images/express.png" alt="avatar"></p><h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><pre class=" language-bash"><code class="language-bash">const express <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const os <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const bodyParser <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //调用模板const app <span class="token operator">=</span> express<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const PATH <span class="token operator">=</span> <span class="token string">'/mock/'</span><span class="token punctuation">;</span> //json路径const VIEWPATH <span class="token operator">=</span> <span class="token string">'/view/'</span><span class="token punctuation">;</span>const PATHNAME <span class="token operator">=</span> <span class="token string">'data'</span><span class="token punctuation">;</span> //json文件名// 允许访问静态文件app.use<span class="token punctuation">(</span><span class="token string">'/assets'</span>, express.static<span class="token punctuation">(</span><span class="token string">'assets'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>app.use<span class="token punctuation">(</span>express.static<span class="token punctuation">(</span><span class="token string">'view'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>app.use<span class="token punctuation">(</span><span class="token string">'/mock'</span>, express.static<span class="token punctuation">(</span><span class="token string">'mock'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//创建application/json解析app.use<span class="token punctuation">(</span>bodyParser.urlencoded<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    extended: <span class="token boolean">true</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;));</span>// 查app.get<span class="token punctuation">(</span><span class="token string">'/getinfo'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>req, res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const query <span class="token operator">=</span> req.query<span class="token punctuation">;</span> //get请求 获取参数    console.log<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span><span class="token punctuation">)</span>    fs.readFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>err, data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">let</span> datas <span class="token operator">=</span> data.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datas <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">&amp;&amp;</span> query.id<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            datas <span class="token operator">=</span> datas.data.filter<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">(</span>item.id<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> String<span class="token punctuation">(</span>query.id<span class="token punctuation">))</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        res.send<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>// 增app.post<span class="token punctuation">(</span><span class="token string">'/add'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>req, res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const query <span class="token operator">=</span> req.body<span class="token punctuation">;</span> //post请求 获取参数    fs.readFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>err, data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query.hasOwnProperty<span class="token punctuation">(</span><span class="token string">"details"</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                res.send<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    resCode: 1,                    responseText: <span class="token string">'details为必填项'</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> data.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            datas <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 数据排序            datas.data.sort<span class="token punctuation">((</span>a, b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a.id - b.id<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 添加 新对象            query.id <span class="token operator">=</span> datas.data.length<span class="token punctuation">;</span>            datas.data.push<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>            const datasStr <span class="token operator">=</span> JSON.stringify<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>            fs.writeFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, datasStr, <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                res.send<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    resCode: 1,                    responseText: <span class="token string">'添加成功！'</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>// 删app.post<span class="token punctuation">(</span><span class="token string">'/del'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>req, res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const query <span class="token operator">=</span> req.body<span class="token punctuation">;</span> //post请求 获取参数    fs.readFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>err, data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">&amp;&amp;</span> query.id<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> data.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            datas <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 查找id            const delIndex <span class="token operator">=</span> datas.data.findIndex<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">(</span>item.id<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> String<span class="token punctuation">(</span>query.id<span class="token punctuation">))</span><span class="token punctuation">;</span>            datas.data.splice<span class="token punctuation">(</span>delIndex, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 删除            const datasStr <span class="token operator">=</span> JSON.stringify<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>            fs.writeFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, datasStr, <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                res.send<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    resCode: 1,                    responseText: <span class="token string">'删除成功！'</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>// 改app.post<span class="token punctuation">(</span><span class="token string">'/updateDetails'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>req, res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const query <span class="token operator">=</span> req.body<span class="token punctuation">;</span> //post请求 获取参数    fs.readFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>err, data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">&amp;&amp;</span> query.id<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> data.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            datas <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 查找id            <span class="token keyword">if</span> <span class="token punctuation">(</span>isJSON<span class="token punctuation">(</span>decodeURIComponent<span class="token punctuation">(</span>query.jsonModel<span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>const item of datas.data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">(</span>item.id<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> String<span class="token punctuation">(</span>query.id<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        item.details <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>decodeURIComponent<span class="token punctuation">(</span>query.jsonModel<span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                resErrorCode<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            // 修改            const datasStr <span class="token operator">=</span> JSON.stringify<span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>            fs.writeFile<span class="token punctuation">(</span>__dirname + PATH + PATHNAME + <span class="token string">'.json'</span>, datasStr, <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    console.error<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                res.send<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    resCode: 1,                    responseText: <span class="token string">'修改成功！'</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>// 测试链接app.get<span class="token punctuation">(</span><span class="token string">'/'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>req, res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    res.sendFile<span class="token punctuation">(</span>__dirname + VIEWPATH + <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>//监听<span class="token keyword">let</span> server <span class="token operator">=</span> app.listen<span class="token punctuation">(</span>3000, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const myHost <span class="token operator">=</span> getIPAdress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    const port <span class="token operator">=</span> server.address<span class="token punctuation">(</span><span class="token punctuation">)</span>.port    console.log<span class="token punctuation">(</span><span class="token string">"接口地址为 http://"</span> + myHost + <span class="token string">':'</span> + port<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>//获取本机ip<span class="token keyword">function</span> getIPAdress<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    const interfaces <span class="token operator">=</span> os.networkInterfaces<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>const devName <span class="token keyword">in</span> interfaces<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        const iface <span class="token operator">=</span> interfaces<span class="token punctuation">[</span>devName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iface.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            const <span class="token function">alias</span> <span class="token operator">=</span> iface<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alias.family <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'IPv4'</span> <span class="token operator">&amp;&amp;</span> alias.address <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'127.0.0.1'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alias.internal<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">return</span> alias.address<span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 获取对象键值对 数量<span class="token keyword">function</span> getObjLength<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> Object.keys<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>.length<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>/*返回错误信息*/<span class="token keyword">function</span> resErrorCode<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    res.send<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        errorCode: 1,        responseText: <span class="token string">'添加参数有误，请联系后台确认提交参数要求！'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 判断是否是JSON字符串<span class="token keyword">function</span> isJSON<span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof str <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        try <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var obj <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof obj <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; catch (e) &amp;#123;</span>            console.log<span class="token punctuation">(</span><span class="token string">'error：'</span> + str + <span class="token string">'!!!'</span> + e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    console.log<span class="token punctuation">(</span><span class="token string">'It is not a string!'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>此基础示例为express入门示例，仅可用于前端配合mock插件自己模拟对接后台使用。<br>真要拿node做后台，需配合自己用的数据库，学习熟练SQL语法对数据库进行增删改查操作。<br>学习没有捷径可言，真要做好一个node后台，还要下很多功夫，也需要多个项目坑坑洼洼的磨练，加油吧。</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀文章收录</title>
      <link href="/2019/05/15/yxwzsl/"/>
      <url>/2019/05/15/yxwzsl/</url>
      
        <content type="html"><![CDATA[<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul><li><a href="https://segmentfault.com/a/1190000019176325">竞争激烈的互联网时代，是否需要注重一下WEB安全？</a> -2019年05月15日</li></ul><h2 id="网络、浏览器基础"><a href="#网络、浏览器基础" class="headerlink" title="网络、浏览器基础"></a>网络、浏览器基础</h2><ul><li><a href="https://segmentfault.com/a/1190000019176325">你不知道的浏览器页面渲染机制</a> -2019年04月02日</li><li><a href="https://segmentfault.com/a/1190000013331105">面试的信心来源于过硬的基础</a> -2018年02月23日</li><li><a href="https://segmentfault.com/a/1190000018886852">http 缓存小结</a> 2019-04-16</li><li><a href="https://segmentfault.com/a/1190000018811208">你不知道的浏览器页面渲染机制</a> 2019-04-10</li></ul><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><ul><li><a href="https://segmentfault.com/a/1190000019008207">跨域，拒绝说概念，上demo</a> 2019-4-27</li><li><a href="https://segmentfault.com/a/1190000005926579">debounce(防抖)和throttle(节流)</a> -2016年07月10日</li><li><a href="https://segmentfault.com/a/1190000013041329">javascript 总结（常用工具类的封装）</a> -2018年01月30日</li><li><a href="https://segmentfault.com/a/1190000019002373">【JS基础】一文看懂前端模块化规范</a> 2019-04-26</li><li><a href="https://segmentfault.com/a/1190000000754560">HTML5 本地裁剪图片并上传至服务器（老梗）</a> 2014-11-03</li></ul><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><ul><li><a href="https://segmentfault.com/a/1190000019171125">CSS实现两个球相交的粘粘效果</a> -2019年05月14日</li><li><a href="https://segmentfault.com/a/1190000019092498">CSS团队协作规范</a> -2019年05月07日</li><li><a href="https://segmentfault.com/a/1190000010989233">【整理】几种解决inline-block间隙的方案</a> 2017-09-03</li><li><a href="https://segmentfault.com/a/1190000010989110">【整理】CSS布局方案</a> 2017-09-03</li><li><a href="https://juejin.im/post/58e3a5a0a0bb9f0069fc16bb">一劳永逸的搞定 flex 布局</a> 2017-04-19</li></ul><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><ul><li><a href="https://segmentfault.com/a/1190000013391021">水平且垂直居中方法（10种）</a> 2018-02-26</li></ul><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><ul><li><a href="https://segmentfault.com/a/1190000019091851">记录一次开发微信网页分享</a></li></ul><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><ul><li><a href="https://segmentfault.com/u/panjiachen/articles">手摸手系列</a> -2019-05-09</li><li><a href="https://segmentfault.com/a/1190000019107528">使用vuex的问题记录–解决刷新页面state数据消失</a> -2019-05-08</li><li><a href="https://segmentfault.com/a/1190000018989241">快速上手最新的 Vue CLI 3</a> -2019-04-25</li></ul><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><ul><li><a href="https://segmentfault.com/a/1190000009882841">React系列</a> 2017-06-22</li></ul><h2 id="环境搭建、Webpack"><a href="#环境搭建、Webpack" class="headerlink" title="环境搭建、Webpack"></a>环境搭建、Webpack</h2><ul><li><a href="https://segmentfault.com/a/1190000006178770">入门 Webpack，看这篇就够了</a> 2016-08-05</li><li><a href="https://segmentfault.com/a/1190000018805925">使用webpack构建多页应用</a> 2019-04-09</li><li><a href="https://blog.fundebug.com/2018/06/13/webpack-babel-tutorial/">webpack运行Babel教程</a> 2018-06-03</li><li><a href="https://segmentfault.com/a/1190000019168638">10秒钟构建你自己的”造轮子”工厂！ 2019年github&#x2F;npm工程化协作开发栈最佳实践</a> 2019-05-13</li></ul><h2 id="精进思维"><a href="#精进思维" class="headerlink" title="精进思维"></a>精进思维</h2><ul><li><a href="https://segmentfault.com/a/1190000018868172">必须知道的程序员思维</a> 2019-04-15</li><li><a href="https://blog.fundebug.com/2018/09/13/10-principle-for-programer/">写给工程师的十条精进原则</a> 2018-09-03</li><li><a href="https://segmentfault.com/a/1190000019017352">JavaScript设计模式精华摘抄（持续更新…）</a> 2019-04-28</li></ul><h2 id="流行插件、工具库"><a href="#流行插件、工具库" class="headerlink" title="流行插件、工具库"></a>流行插件、工具库</h2><ul><li><a href="https://segmentfault.com/a/1190000017325761">值得看看，2019 年 11 个受欢迎的 JavaScript 动画库！</a> 2018-12-10</li><li><a href="https://segmentfault.com/a/1190000019146249">10个有趣的javascript和css库（2019年最新）</a> 2019-05-11</li></ul><h2 id="浏览器拓展插件、编辑器"><a href="#浏览器拓展插件、编辑器" class="headerlink" title="浏览器拓展插件、编辑器"></a>浏览器拓展插件、编辑器</h2><ul><li><a href="https://segmentfault.com/a/1190000018889726">写了一个chrome插件：拦截ajax请求并修改返回结果</a> 2019-04-16</li><li><a href="https://segmentfault.com/a/1190000018993259">可以提高程序员效率的工具！</a> 2019-04-16</li><li><a href="https://segmentfault.com/a/1190000007688656">VS Code 快捷键（中英文对照版）</a> 2016-12-04</li><li><a href="https://segmentfault.com/a/1190000019055976">用vscode开发vue应用</a> 2019-05-02</li></ul><h2 id="后台、python"><a href="#后台、python" class="headerlink" title="后台、python"></a>后台、python</h2><ul><li><a href="https://segmentfault.com/a/1190000019142622">系统的讲解 - SSO单点登录</a> 2019-5-10</li><li><a href="https://segmentfault.com/a/1190000017319797">为什么要学习Python？这10个理由足够了！</a> 2018-12-10</li><li><a href="https://segmentfault.com/a/1190000013522687">后端好书阅读与推荐（续四）</a> 2018-03-15</li></ul><h2 id="前人整理"><a href="#前人整理" class="headerlink" title="前人整理"></a>前人整理</h2><ul><li><a href="https://segmentfault.com/a/1190000018796317">前端练级攻略(第二部分)</a> 2019-04-09</li><li><a href="https://segmentfault.com/a/1190000018992363">一名【合格】前端工程师的自检清单</a> 2019-04-16</li><li><a href="https://segmentfault.com/a/1190000019022842">前端开发中遇到的一些问题—-持续更新</a> 2019-04-29</li><li><a href="https://segmentfault.com/a/1190000011091907">我遇到的前端面试题2017</a> 2017-09-09</li></ul><h2 id="周边"><a href="#周边" class="headerlink" title="周边"></a>周边</h2><ul><li><a href="https://mp.weixin.qq.com/s/GnxEa1QrPjO051Caq18Kag">介绍两个丧心病狂的Github项目</a> 2018-08-21</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常优质文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 优秀文章收录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件传值</title>
      <link href="/2019/04/29/vzucz/"/>
      <url>/2019/04/29/vzucz/</url>
      
        <content type="html"><![CDATA[<h2 id="一、父子传值"><a href="#一、父子传值" class="headerlink" title="一、父子传值"></a>一、父子传值</h2><h3 id="1-props传递单个参数"><a href="#1-props传递单个参数" class="headerlink" title="1. props传递单个参数"></a>1. props传递单个参数</h3><h4 id="·-父组件"><a href="#·-父组件" class="headerlink" title="· 父组件"></a>· 父组件</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"app-container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Pagination :page<span class="token operator">=</span><span class="token string">"currentPage"</span> @changePage<span class="token operator">=</span><span class="token string">"listenPageChange"</span>/<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> Pagination from <span class="token string">'./components/pagination'</span><span class="token punctuation">;</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  components:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    Pagination  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    listenPageChange<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      console.log<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      currentPage:1  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="·子组件"><a href="#·子组件" class="headerlink" title="·子组件"></a>·子组件</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el-pagination    @size-change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>    @current-change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>    :current-page<span class="token operator">=</span><span class="token string">"page"</span>    :page-sizes<span class="token operator">=</span><span class="token string">"[100, 200, 300, 400]"</span>    :page-size<span class="token operator">=</span><span class="token string">"100"</span>    layout<span class="token operator">=</span><span class="token string">"total, sizes, prev, pager, next, jumper"</span>    :total<span class="token operator">=</span><span class="token string">"400"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/el-pagination<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  props: <span class="token punctuation">[</span><span class="token string">"page"</span><span class="token punctuation">]</span>,  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    handleSizeChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this.pageOption.pageSize <span class="token operator">=</span> val<span class="token punctuation">;</span>      this.listenOptionChange<span class="token punctuation">(</span>this.pageOption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    handleCurrentChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      this.pageOption.page <span class="token operator">=</span> val<span class="token punctuation">;</span>      this.listenOptionChange<span class="token punctuation">(</span>this.pageOption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    listenOptionChange<span class="token punctuation">(</span>datas<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>       this.<span class="token variable">$emit</span><span class="token punctuation">(</span><span class="token string">"changePage"</span>, datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="2-props传递对象"><a href="#2-props传递对象" class="headerlink" title="2. props传递对象"></a>2. props传递对象</h3><h4 id="·父组件"><a href="#·父组件" class="headerlink" title="·父组件"></a>·父组件</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"p-5"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Pagination :pageOption<span class="token operator">=</span><span class="token string">"pageOptions"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> Pagination from <span class="token string">'./components/pagination'</span><span class="token punctuation">;</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      pageOptions:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        page:1,        pageSize:10,        pageSizes:<span class="token punctuation">[</span>10,20,30,40<span class="token punctuation">]</span>,        total:40      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  components: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    Pagination  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="·-子组件"><a href="#·-子组件" class="headerlink" title="· 子组件"></a>· 子组件</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>el-pagination      @size-change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>      @current-change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>      :current-page<span class="token operator">=</span><span class="token string">"propOptions.page"</span>      :page-sizes<span class="token operator">=</span><span class="token string">"propOptions.pageSizes"</span>      :page-size<span class="token operator">=</span><span class="token string">"propOptions.pageSize"</span>      layout<span class="token operator">=</span><span class="token string">"total, sizes, prev, pager, next, jumper"</span>      :total<span class="token operator">=</span><span class="token string">"propOptions.total"</span>    <span class="token operator">></span><span class="token operator">&lt;</span>/el-pagination<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  props: <span class="token punctuation">[</span><span class="token string">"page-option"</span><span class="token punctuation">]</span>,  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        propOptions:this.pageOption    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      handleSizeChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        this.propOptions.pageSize<span class="token operator">=</span>val<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>      handleCurrentChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        this.propOptions.page<span class="token operator">=</span>val<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="二、兄弟组件传值"><a href="#二、兄弟组件传值" class="headerlink" title="二、兄弟组件传值"></a>二、兄弟组件传值</h2><h3 id="1-借助事件车"><a href="#1-借助事件车" class="headerlink" title="1. 借助事件车"></a>1. 借助事件车</h3><h4 id="·-自定义公用组件bus-js"><a href="#·-自定义公用组件bus-js" class="headerlink" title="· 自定义公用组件bus.js"></a>· 自定义公用组件bus.js</h4><p>自定义创建bus.js,兄弟组件共同引用此js，bus.js内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token punctuation">;</span>var VueEvent<span class="token operator">=</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">export</span> default VueEvent<span class="token punctuation">;</span></code></pre><h4 id="·-兄弟组件a"><a href="#·-兄弟组件a" class="headerlink" title="· 兄弟组件a"></a>· 兄弟组件a</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>el-pagination      @size-change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>      @current-change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>      :current-page<span class="token operator">=</span><span class="token string">"propOptions.page"</span>      :page-sizes<span class="token operator">=</span><span class="token string">"propOptions.pageSizes"</span>      :page-size<span class="token operator">=</span><span class="token string">"propOptions.pageSize"</span>      layout<span class="token operator">=</span><span class="token string">"total, sizes, prev, pager, next, jumper"</span>      :total<span class="token operator">=</span><span class="token string">"propOptions.total"</span>    <span class="token operator">></span><span class="token operator">&lt;</span>/el-pagination<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> Bus from <span class="token string">'./bus.js'</span><span class="token punctuation">;</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  props: <span class="token punctuation">[</span><span class="token string">"page-option"</span><span class="token punctuation">]</span>,  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        propOptions:this.pageOption    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      handleSizeChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        console.log<span class="token punctuation">(</span>`每页 $<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;val&amp;#125; 条`);</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>      handleCurrentChange<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        Bus.<span class="token variable">$emit</span><span class="token punctuation">(</span><span class="token string">'pageChangeTo'</span>,val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="·-兄弟组件b"><a href="#·-兄弟组件b" class="headerlink" title="· 兄弟组件b"></a>· 兄弟组件b</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>el-steps :active<span class="token operator">=</span><span class="token string">"pageOption.page"</span> align-center<span class="token operator">></span>      <span class="token operator">&lt;</span>el-step title<span class="token operator">=</span><span class="token string">"步骤1"</span> description<span class="token operator">=</span><span class="token string">"这是一段很长很长很长的描述性文字"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-step<span class="token operator">></span>      <span class="token operator">&lt;</span>el-step title<span class="token operator">=</span><span class="token string">"步骤2"</span> description<span class="token operator">=</span><span class="token string">"这是一段很长很长很长的描述性文字"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-step<span class="token operator">></span>      <span class="token operator">&lt;</span>el-step title<span class="token operator">=</span><span class="token string">"步骤3"</span> description<span class="token operator">=</span><span class="token string">"这是一段很长很长很长的描述性文字"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-step<span class="token operator">></span>      <span class="token operator">&lt;</span>el-step title<span class="token operator">=</span><span class="token string">"步骤4"</span> description<span class="token operator">=</span><span class="token string">"这是一段很长很长很长的描述性文字"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-step<span class="token operator">></span>    <span class="token operator">&lt;</span>/el-steps<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> Bus from <span class="token string">"./bus.js"</span><span class="token punctuation">;</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      pageOption: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        page: 1      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    this.listenPageChange<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    listenPageChange<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      Bus.<span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">"pageChangeTo"</span>, val <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        this.pageOption.page <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h2 id="三、Vuex传值"><a href="#三、Vuex传值" class="headerlink" title="三、Vuex传值"></a>三、Vuex传值</h2><h3 id="1-开始使用vuex，新建一个-sotre文件夹，分开维护-actions-mutations-getters"><a href="#1-开始使用vuex，新建一个-sotre文件夹，分开维护-actions-mutations-getters" class="headerlink" title="1. 开始使用vuex，新建一个 sotre文件夹，分开维护 actions mutations getters"></a>1. 开始使用vuex，新建一个 sotre文件夹，分开维护 actions mutations getters</h3><p><img src="https://img-blog.csdn.net/20180208174810357" alt="网络不好"></p><h3 id="2-在store-x2F-index-js文件中新建vuex-的store实例"><a href="#2-在store-x2F-index-js文件中新建vuex-的store实例" class="headerlink" title="2. 在store&#x2F;index.js文件中新建vuex 的store实例"></a>2. 在store&#x2F;index.js文件中新建vuex 的store实例</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> Vuex from <span class="token string">'vuex'</span><span class="token function">import</span> * as getters from <span class="token string">'./getters'</span> // 导入响应的模块，*相当于引入了这个组件下所有导出的事例<span class="token function">import</span> * as actions from <span class="token string">'./actions'</span><span class="token function">import</span> * as mutations from <span class="token string">'./mutations'</span>Vue.use<span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>// 首先声明一个需要全局维护的状态 state,比如 我这里举例的resturantNameconst state <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    resturantName: <span class="token string">'飞歌餐馆'</span> // 默认值    // id: xxx  如果还有全局状态也可以在这里添加    // name:xxx<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// 注册上面引入的各大模块const store <span class="token operator">=</span> new Vuex.Store<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    state,    // 共同维护的一个状态，state里面可以是很多个全局状态    getters,  // 获取数据并渲染    actions,  // 数据的异步操作    mutations  // 处理数据的唯一途径，state的改变或赋值只能在这里<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span><span class="token function">export</span> default store  // 导出store并在 main.js中引用注册。</code></pre><h3 id="3-actions"><a href="#3-actions" class="headerlink" title="3.actions"></a>3.actions</h3><pre class=" language-bash"><code class="language-bash">// 给action注册事件处理函数。当这个函数被触发时候，将状态提交到mutations中处理<span class="token function">export</span> <span class="token keyword">function</span> modifyAName<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;commit&amp;#125;, name) &amp;#123; // commit 提交；name即为点击后传递过来的参数，此时是 'A餐馆'</span>    <span class="token keyword">return</span> commit <span class="token punctuation">(</span><span class="token string">'modifyAName'</span>, name<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token function">export</span> <span class="token keyword">function</span> modifyBName<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;commit&amp;#125;, name) &amp;#123;</span>    <span class="token keyword">return</span> commit <span class="token punctuation">(</span><span class="token string">'modifyBName'</span>, name<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// ES6精简写法// <span class="token function">export</span> const modifyAName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;commit&amp;#125;,name) => commit('modifyAName', name)</span></code></pre><h3 id="4-mutations"><a href="#4-mutations" class="headerlink" title="4.mutations"></a>4.mutations</h3><pre class=" language-bash"><code class="language-bash">// 提交 mutations是更改Vuex状态的唯一合法方法<span class="token function">export</span> const modifyAName <span class="token operator">=</span> <span class="token punctuation">(</span>state, name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; // A组件点击更改餐馆名称为 A餐馆</span>    state.resturantName <span class="token operator">=</span> name // 把方法传递过来的参数，赋值给state中的resturantName<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token function">export</span> const modifyBName <span class="token operator">=</span> <span class="token punctuation">(</span>state, name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; // B组件点击更改餐馆名称为 B餐馆</span>    state.resturantName <span class="token operator">=</span> name<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="5-getters"><a href="#5-getters" class="headerlink" title="5.getters"></a>5.getters</h3><pre class=" language-bash"><code class="language-bash">// 获取最终的状态信息<span class="token function">export</span> const resturantName <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> state.resturantName</code></pre><h3 id="6-在main-js中导入-store实例"><a href="#6-在main-js中导入-store实例" class="headerlink" title="6.在main.js中导入 store实例"></a>6.在main.js中导入 store实例</h3><pre class=" language-bash"><code class="language-bash">// The Vue build version to load with the <span class="token variable"><span class="token variable">`</span><span class="token function">import</span><span class="token variable">`</span></span> <span class="token function">command</span>// <span class="token punctuation">(</span>runtime-only or standalone<span class="token punctuation">)</span> has been <span class="token keyword">set</span> <span class="token keyword">in</span> webpack.base.conf with an alias.<span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> App from <span class="token string">'./App'</span><span class="token function">import</span> router from <span class="token string">'./router'</span><span class="token function">import</span> store from <span class="token string">'./store'</span>Vue.config.productionTip <span class="token operator">=</span> <span class="token boolean">false</span>/* eslint-disable no-new */new Vue<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  el: <span class="token string">'#app'</span>,  router,  store,  // 这样就能全局使用vuex了  components: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; App &amp;#125;,</span>  template: <span class="token string">'&lt;App/>'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span></code></pre><h3 id="7-在组件A中，定义点击事件，点击-修改-餐馆的名称，并把餐馆的名称在事件中用参数进行传递。"><a href="#7-在组件A中，定义点击事件，点击-修改-餐馆的名称，并把餐馆的名称在事件中用参数进行传递。" class="headerlink" title="7.在组件A中，定义点击事件，点击 修改 餐馆的名称，并把餐馆的名称在事件中用参数进行传递。"></a>7.在组件A中，定义点击事件，点击 修改 餐馆的名称，并把餐馆的名称在事件中用参数进行传递。</h3><p>…mapactions 和 …mapgetters都是vuex提供的语法糖，在底层已经封装好了，拿来就能用，简化了很多操作。</p><p>其中…mapActions([‘clickAFn’]) 相当于this.$store.dispatch(‘clickAFn’，{参数})，mapActions中只需要指定方法名即可，参数省略。</p><p>…mapGetters([‘resturantName’])相当于this.$store.getters.resturantName</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"componentsA"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>P class<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>组件A<span class="token operator">&lt;</span>/P<span class="token operator">></span>      <span class="token operator">&lt;</span>P class<span class="token operator">=</span><span class="token string">"titleName"</span><span class="token operator">></span>餐馆名称：<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;resturantName&amp;#125;&amp;#125;&lt;/P></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 点击修改 为 A 餐馆 --<span class="token operator">></span>          <span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token string">"btn"</span> @click<span class="token operator">=</span><span class="token string">"modifyAName('A餐馆')"</span><span class="token operator">></span>修改为A餐馆<span class="token operator">&lt;</span>/button<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"marTop"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token string">"btn"</span> @click<span class="token operator">=</span><span class="token string">"trunToB"</span><span class="token operator">></span>跳转到B页面<span class="token operator">&lt;</span>/button<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;mapActions, mapGetters&amp;#125; from 'vuex'</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  name: <span class="token string">'A'</span>,  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token punctuation">..</span>.mapActions<span class="token punctuation">(</span> // 语法糖          <span class="token punctuation">[</span><span class="token string">'modifyAName'</span><span class="token punctuation">]</span> // 相当于this.<span class="token variable">$store</span>.dispatch<span class="token punctuation">(</span><span class="token string">'modifyName'</span><span class="token punctuation">)</span>,提交这个方法      <span class="token punctuation">)</span>,      trunToB <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;path: '/componentsB'&amp;#125;) // 路由跳转到B</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  computed: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token punctuation">..</span>.mapGetters<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'resturantName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> // 动态计算属性，相当于this.<span class="token variable">$store</span>.getters.resturantName  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Add <span class="token string">"scoped"</span> attribute to limit CSS to this component only --<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>    .title,.titleName<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        color: blue<span class="token punctuation">;</span>        font-size: 20px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    .btn<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        width: 160px<span class="token punctuation">;</span>        height: 40px<span class="token punctuation">;</span>        background-color: blue<span class="token punctuation">;</span>        border: none<span class="token punctuation">;</span>        outline: none<span class="token punctuation">;</span>        color: <span class="token comment" spellcheck="true">#ffffff;</span>        border-radius: 4px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    .marTop<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        margin-top: 20px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span></code></pre><p>B组件同理</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"componentsB"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>P class<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>组件B<span class="token operator">&lt;</span>/P<span class="token operator">></span>      <span class="token operator">&lt;</span>P class<span class="token operator">=</span><span class="token string">"titleName"</span><span class="token operator">></span>餐馆名称：<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;resturantName&amp;#125;&amp;#125;&lt;/P></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>-- 点击修改 为 B 餐馆 --<span class="token operator">></span>          <span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token string">"btn"</span> @click<span class="token operator">=</span><span class="token string">"modifyBName('B餐馆')"</span><span class="token operator">></span>修改为B餐馆<span class="token operator">&lt;</span>/button<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"marTop"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token string">"btn"</span> @click<span class="token operator">=</span><span class="token string">"trunToA"</span><span class="token operator">></span>跳转到A页面<span class="token operator">&lt;</span>/button<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;mapActions, mapGetters&amp;#125; from 'vuex'</span><span class="token function">export</span> default <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  name: <span class="token string">'B'</span>,  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  methods:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token punctuation">..</span>.mapActions<span class="token punctuation">(</span> // 语法糖          <span class="token punctuation">[</span><span class="token string">'modifyBName'</span><span class="token punctuation">]</span> // 相当于this.<span class="token variable">$store</span>.dispatch<span class="token punctuation">(</span><span class="token string">'modifyName'</span><span class="token punctuation">)</span>,提交这个方法      <span class="token punctuation">)</span>,      trunToA <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;path: '/componentsA'&amp;#125;) // 路由跳转到A</span>      <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>  computed: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token punctuation">..</span>.mapGetters<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'resturantName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> // 动态计算属性，相当于this.<span class="token variable">$store</span>.getters.resturantName  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Add <span class="token string">"scoped"</span> attribute to limit CSS to this component only --<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>    .title,.titleName<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        color: red<span class="token punctuation">;</span>        font-size: 20px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    .btn<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        width: 160px<span class="token punctuation">;</span>        height: 40px<span class="token punctuation">;</span>        background-color: red<span class="token punctuation">;</span>        border: none<span class="token punctuation">;</span>        outline: none<span class="token punctuation">;</span>        color: <span class="token comment" spellcheck="true">#ffffff;</span>        border-radius: 4px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    .marTop<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        margin-top: 20px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span></code></pre><p>参考文章：<a href="https://blog.csdn.net/qq_35430000/article/details/79291287">Vue通信、传值的多种方式，详解（都是干货）</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客体会</title>
      <link href="/2019/04/18/djhbkth/"/>
      <url>/2019/04/18/djhbkth/</url>
      
        <content type="html"><![CDATA[<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>虽然此前也搭建过博客，并且尝试写过markdown博客文章，但也没有深入了解过hexo博客的搭建。一切只能从一个合并博客内容的想法开始…<br>因为本人日前做过两个博客，XMwarrior跟xmsniper。</p><ul><li>XMwarrior是纯手撸的博客，设计到呈现、布局到逻辑都是自己大体借鉴别的博客做出来的，哈哈，这也是术业不专攻造成的失败原因，自己看着都别扭。</li><li>XMsniper一开始采用了一个简单的hexo theme皮肤yilla。还是能满足程序员的审美的。</li></ul><p>本来两个项目，互不相干也就相安无事了，但不规范，不正规，老旧不更新的东西，总是免不了淘汰或升级的命运。<br>这不，导火索就是个人精力有限，两个博客我都不想放弃，但是同时维护两个博客除了浪费时间，自己的资源分散不集中外，实在是没啥好处。<br>但合并并不是如我预料的那般简单：</p><ol><li>基于github的开放式代码管理模式，让个人资料完全没有自己的隐私。</li><li>个人博客如果仅作自我娱乐，归纳总结的话。为何不直接用更简单的方式，如：segmentfault，博客园，CSDN，知乎等等。</li><li>每天读过，看过的优质文章找个什么地方分类，整理，收藏才好。</li><li>文章到底有没有人来看?别人看过后，是否有建议?</li><li>文章太长会使页面太长，进而引起阅读困难。</li><li>个人博客影响力毕竟太小，怎样才能扩大自己的分享圈。</li></ol><h2 id="挖掘根本需求"><a href="#挖掘根本需求" class="headerlink" title="挖掘根本需求"></a>挖掘根本需求</h2><ol><li>对于自己的文章源码markdown，个人的hexo皮肤配置，我并不想公开；生成的博客文章网站代码，可以公开。</li><li>其实我要的是在个人归纳总结的基础上，分享经验。归纳总结不仅在文字表达，而且需要带可运行实例。</li><li>我需要一个单独的博客区域存放优质文章。</li><li>我需要正常博客应该有的访问量、访问人数统计，也需要有文章评论系统。</li><li>我需要一个带有锚点目录，方便查看文章的功能。</li><li>我需要文章分享到各大平台网站的功能。</li></ol><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>过程不是那么一番风顺，在尝试过同类的3个hexo theme皮肤，添加各个功能过程中，又出现了诸多问题：<br>7. 码云git管理嵌套github代码管理，造成git提交bug。<br>8. hexo clean 清理build文件夹，造成github的git记录被清空，静态资源文件被清除。<br>9. 更新替换个人信息，修改皮肤样式，各种细节修改，带来一系列工作量。<br>10. 依赖插件加载过慢造成页面加载过慢。<br>11. 首屏加载速度缓慢，其他页面同样因为加载文件过多造成加载过慢。<br>12. gitalk经过theme主题作者的封装修改后，并未提供相关文档说明，导致评论模块报错。</p><p>是不是突然感觉一个头两个大？本来一天就搞定的计划，直接呵呵了。断断续续搞定完这些问题，<br>已经是两天以后。好在探索解决问题的过程也充满了乐趣。磕磕绊绊的bug路，也让自己对博客搭建这个套路，理解个七七八八。</p><h2 id="成果-amp-经验"><a href="#成果-amp-经验" class="headerlink" title="成果&amp;经验"></a>成果&amp;经验</h2><ul><li>个人代码正式合二为一，码云管理所有博客代码，github管理展示代码。</li><li>博客最终采用matery主题。<br> -采用gitalk评论功能。<br> -不蒜子网站统计。<br> -hexo-wordcount文章字数统计、阅读时长、总字数统计。<br> -分享等其他基本功能。<br> -为优化首屏加载速度，放弃视频，音频功能。</li></ul><p>个人博客平台终于搭建好了。心底着实松了一口气。（搞定最后一个问题时，真是又高兴又激动…O(∩_∩)O哈哈~）<br>哈哈，终于回归正轨，此处留此文章一篇，权作纪念！</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观点与感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观点与感想</title>
      <link href="/2019/04/17/gdygx/"/>
      <url>/2019/04/17/gdygx/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://segmentfault.com/a/1190000018868172">必须知道的程序员思维</a> -2019年04月15日</li><li><a href="https://blog.fundebug.com/2018/09/13/10-principle-for-programer/">写给工程师的十条精进原则</a> -2018年09月13日</li><li><a href="http://www.ruanyifeng.com/survivor/">《未来世界的幸存者》</a> -2018年07月09日</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常优质文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观点与感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天气插件改造之Free初探</title>
      <link href="/2019/04/11/tqcjzfree/"/>
      <url>/2019/04/11/tqcjzfree/</url>
      
        <content type="html"><![CDATA[<p>此处不宜多说（露出一个高深莫测的微笑！），精华自取：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>function <span class="token punctuation">(</span>window, document, scriptName, wigetname, url, jsonurl, scriptNode, originalNode<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    $.extend<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        smartDefaultOption: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">"flavor"</span><span class="token keyword">:</span> <span class="token string">"bubble"</span>, //样式选择：bubble浮动气泡，slim固定极简            <span class="token string">"positionMode"</span><span class="token keyword">:</span> <span class="token string">"static"</span>, //浮动气泡所需属性：默认fixed            <span class="token string">"location"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"北京市"</span>,                <span class="token string">"54511"</span>,                <span class="token string">"110101"</span>,                <span class="token string">"101010100"</span>            <span class="token punctuation">]</span>,            <span class="token string">"geolocation"</span><span class="token keyword">:</span> <span class="token string">"disabled"</span>, //城市定位：enabled启用，disabled不启用。 默认免费版不能开启定位            <span class="token string">"theme"</span><span class="token keyword">:</span> <span class="token string">"chameleon"</span>, //浮层背景：chameleon随天气变化，white白色，black黑色            <span class="token string">"container"</span><span class="token keyword">:</span> <span class="token string">"wp-container"</span>, //dom元素id开头            <span class="token string">"color"</span><span class="token keyword">:</span> <span class="token string">"#FFFFFF"</span>, //字体颜色            <span class="token string">"background"</span><span class="token keyword">:</span> <span class="token string">"#C6C6C6"</span>, //背景色：不需要设置时删掉此属性            <span class="token string">"bubble"</span><span class="token keyword">:</span> <span class="token string">"disabled"</span>, //slim模式下：启用浮层显示天气详情和预报：enabled启用，disabled不启用。            <span class="token string">"uuid"</span><span class="token keyword">:</span> <span class="token string">"b93a5df5-4925-42a9-a202-5564d7495237"</span>, //下面这两项时4Dsmart网站的账号的id、hash            <span class="token string">"hash"</span><span class="token keyword">:</span> <span class="token string">"F494D79972E3122A99CA36C4BC8A9713"</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        //封装同步ajax        getAsyncData: <span class="token keyword">function</span> <span class="token punctuation">(</span>url, data, datatype<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var res <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            $.ajax<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                url: url,                data: data,                type: <span class="token string">"get"</span>,                dataType: datatype <span class="token operator">||</span> <span class="token string">"json"</span>,                async: false, //同步请求                timeout: 30000,                error: <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    res <span class="token operator">=</span> e.responseText<span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                success: <span class="token keyword">function</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    res <span class="token operator">=</span> r<span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        /*调用百度API获取“城市中心经纬度”         * <span class="token keyword">return</span> lat,lng         */        getLocation: <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            $.ajax<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                url: <span class="token string">"http://api.map.baidu.com/location/ip?ak=0V85NTruj3YuZa44xCiOP3MqiokuqoWr&amp;coor=bd09ll"</span>,                type: <span class="token string">"POST"</span>,                dataType: <span class="token string">"jsonp"</span>,                success: <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    //console.log<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    var cityLocation <span class="token operator">=</span> data.content.point.y + <span class="token string">','</span> + data.content.point.x<span class="token punctuation">;</span>                    fn <span class="token operator">&amp;&amp;</span> fn<span class="token punctuation">(</span>cityLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        /*调用百度API根据经纬度反查“城市名、区号”，根据城市名查询“城市气象台号、天气城市编号”         * <span class="token keyword">return</span> <span class="token string">"城市名、城市气象台号、区号、天气城市编号"</span>         */        getDirectName: <span class="token keyword">function</span> <span class="token punctuation">(</span>cityLocation, fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            $.ajax<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                url: <span class="token string">'http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location='</span> + cityLocation + <span class="token string">'&amp;output=json&amp;pois=1&amp;latest_admin=1&amp;ak=0V85NTruj3YuZa44xCiOP3MqiokuqoWr'</span>,                type: <span class="token string">"get"</span>,                async: true,                dataType: <span class="token string">"jsonp"</span>,                success: <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    //console.log<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    var cityName <span class="token operator">=</span> res.result.addressComponent.city.replace<span class="token punctuation">(</span><span class="token string">'市'</span>, <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    var cityObservatoryCode <span class="token operator">=</span> $.getAsyncData<span class="token punctuation">(</span>jsonurl<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'observatory'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cityName<span class="token punctuation">]</span><span class="token punctuation">;</span>                    var directAreaCode <span class="token operator">=</span> res.result.addressComponent.adcode<span class="token punctuation">;</span>                    var cityWeatherCode <span class="token operator">=</span> $.getAsyncData<span class="token punctuation">(</span>jsonurl<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'weathercity'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cityName<span class="token punctuation">]</span><span class="token punctuation">;</span>                    //console.log<span class="token punctuation">(</span><span class="token string">'城市名：'</span>+cityName+<span class="token string">'\n'</span>,<span class="token string">'城市气象台号：'</span>+cityObservatoryCode+<span class="token string">'\n'</span>,<span class="token string">'区号：'</span>+directAreaCode+<span class="token string">'\n'</span>,<span class="token string">'天气城市编号：'</span>+cityWeatherCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    fn <span class="token operator">&amp;&amp;</span> fn<span class="token punctuation">(</span>cityName, cityObservatoryCode, directAreaCode, cityWeatherCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        //根据城市名、城市气象台号、区号、天气城市编号，调用smart-weather查询天气        getWeather: <span class="token keyword">function</span> <span class="token punctuation">(</span>cityName, cityObservatoryCode, directAreaCode, cityWeatherCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            //smart-weather天气具体参数配置            var data <span class="token operator">=</span> $.smartDefaultOption<span class="token punctuation">;</span>            data.location <span class="token operator">=</span> <span class="token punctuation">[</span>                cityName,                cityObservatoryCode,                directAreaCode,                cityWeatherCode            <span class="token punctuation">]</span><span class="token punctuation">;</span>            wp<span class="token punctuation">(</span><span class="token string">"init"</span>, data<span class="token punctuation">)</span><span class="token punctuation">;</span>            wp<span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        //封装完的基于4Dsmart的免费获取天气方法        getFreeWeather: <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>$.isEmptyObject<span class="token punctuation">(</span>data<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>var key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    $.smartDefaultOption<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>            $.getLocation<span class="token punctuation">(</span>function <span class="token punctuation">(</span>cityLocation<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                $.getDirectName<span class="token punctuation">(</span>cityLocation, <span class="token keyword">function</span> <span class="token punctuation">(</span>cityName, cityObservatoryCode, directAreaCode, cityWeatherCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    $.getWeather<span class="token punctuation">(</span>cityName, cityObservatoryCode, directAreaCode, cityWeatherCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    //天气插件依赖    initScript <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        scriptNode <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originalNode <span class="token operator">=</span> document.getElementsByTagName<span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        scriptNode.src <span class="token operator">=</span> url<span class="token punctuation">;</span>        scriptNode.async <span class="token operator">=</span> 1<span class="token punctuation">;</span>        originalNode.parentNode.insertBefore<span class="token punctuation">(</span>scriptNode, originalNode<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>    window<span class="token punctuation">[</span><span class="token string">"wpObjectName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wp"</span><span class="token punctuation">;</span>    window<span class="token punctuation">[</span><span class="token string">"wp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"wp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"wp"</span><span class="token punctuation">]</span>.arg <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"wp"</span><span class="token punctuation">]</span>.arg <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>.push<span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    window<span class="token punctuation">[</span><span class="token string">"wp"</span><span class="token punctuation">]</span>.l <span class="token operator">=</span> +new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window.attachEvent<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        window.attachEvent<span class="token punctuation">(</span><span class="token string">"onload"</span>, initScript<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        window.addEventListener<span class="token punctuation">(</span><span class="token string">"load"</span>, initScript, false<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;(window, document, "script", "wp", "js/smart-weather.js", "js/weather-city.json"));</span></code></pre><p>参考文档：<br><a href="http://www.4dsmart.cn/weatherEnvironmental/plugin.action">四维智城数据</a><br><a href="http://lbsyun.baidu.com/">百度开放平台</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数缓存应用之斐波那契数列</title>
      <link href="/2019/04/02/gjhshcyyzfbnxsl/"/>
      <url>/2019/04/02/gjhshcyyzfbnxsl/</url>
      
        <content type="html"><![CDATA[<p>合理的利用js缓存，能有效提升复杂运算效率，此处有两种概念：<br>1.闭包-（指有权访问另一个函数作用域中的变量的函数）<br>2.高阶函数-（接受其他函数作为参数或返回其他函数的函数）<br>此处以斐波那契数列为例，演示了运用缓存与不运用缓存计算的效率差别。</p><p>斐波那契数列是一组数字，以1 或 0 开头，后面跟着1，然后根据每个数字等于前两个数字之和规则进行。如</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …<span class="token punctuation">]</span></code></pre><p>根据此规律，编写一个函数返回斐波那契数列中的 n 元素，可解：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> fibonacci<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> 1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> 1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n - 1<span class="token punctuation">)</span> + fibonacci<span class="token punctuation">(</span>n - 2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span></code></pre><p>运用高阶函数缓存改写此方法，可封装函数：</p><pre class=" language-bash"><code class="language-bash">var memoizer <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var cache <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            var result <span class="token operator">=</span> fun<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>var fibonacciUseCache <span class="token operator">=</span> memoizer<span class="token punctuation">(</span>fibonacciMemorizer<span class="token punctuation">)</span><span class="token punctuation">;</span>var fibonacciMemorizer <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> 1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> 1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> fibonacciUseCache<span class="token punctuation">(</span>n - 1<span class="token punctuation">)</span> + fibonacciUseCache<span class="token punctuation">(</span>n - 2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>下面是写给自己看的，此处用jquery拓展封装下，备用：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    $.extend<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        memoizer: <span class="token keyword">function</span> <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var cache <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                    var result <span class="token operator">=</span> fun<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)();</span></code></pre><p>参考文档：</p><ul><li><a href="https://segmentfault.com/a/1190000018589996">Web 性能优化：理解及使用 JavaScript 缓存-前端小智</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">Web Worker 使用教程-阮一峰</a></li></ul><p>示例：<a href="/pages/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%BC%93%E5%AD%98%E5%BA%94%E7%94%A8%E4%B9%8B%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/index.html">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除cookie稳妥做法</title>
      <link href="/2019/03/27/qckwtzf/"/>
      <url>/2019/03/27/qckwtzf/</url>
      
        <content type="html"><![CDATA[<p>清除cookie稳妥做法就是设置cookie与清除cookie写法一致，cookie清除不了的问题，主要出现在设置与清除cookie并非一端操作的情况下，此时需要注意path、domain的设置必须保持一致，注意下文中注释<code>//warning</code>处代码，如下：</p><pre class=" language-bash"><code class="language-bash">/*Days默认输入number或string格式数字<span class="token operator">=</span>day；s10、m10、h10、d10分别代表秒、分、小时、天*/<span class="token keyword">function</span> setCookie<span class="token punctuation">(</span>name, value, Days<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var cookieString <span class="token operator">=</span> name + <span class="token string">'='</span> + escape<span class="token punctuation">(</span>value<span class="token punctuation">)</span>,        checkTime, checkMark<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNaN<span class="token punctuation">(</span>+Days<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        checkTime <span class="token operator">=</span> +Days    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        checkTime <span class="token operator">=</span> Days.substr<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        checkMark <span class="token operator">=</span> Days.substr<span class="token punctuation">(</span>0, 1<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; if (checkTime > 0) &amp;#123;</span>        var setDate <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setDate.setTime<span class="token punctuation">(</span>setDate.getTime<span class="token punctuation">(</span><span class="token punctuation">)</span> + checkstr<span class="token punctuation">(</span>checkMark, checkTime<span class="token punctuation">))</span><span class="token punctuation">;</span>        cookieString <span class="token operator">=</span> name + <span class="token string">'='</span> + escape<span class="token punctuation">(</span>value<span class="token punctuation">)</span> + <span class="token string">'; expires='</span> + setDate.toGMTString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">';path=/;domain='</span> + location.hostname    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    document.cookie <span class="token operator">=</span> cookieString<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> getCookie<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var strCookie <span class="token operator">=</span> document.cookie,        arrCookie <span class="token operator">=</span> strCookie.split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0, len <span class="token operator">=</span> arrCookie.length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        var Arr_keyvalue <span class="token operator">=</span> arrCookie<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Arr_keyvalue<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.replace<span class="token punctuation">(</span>/<span class="token punctuation">(</span>^\s*<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>\s*$<span class="token punctuation">)</span>/g, <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">==</span> name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> unescape<span class="token punctuation">(</span>Arr_keyvalue<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> deleteCookie<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var setDate <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    setDate.setTime<span class="token punctuation">(</span>setDate.getTime<span class="token punctuation">(</span><span class="token punctuation">)</span> - 10000<span class="token punctuation">)</span><span class="token punctuation">;</span>    var value <span class="token operator">=</span> getCookie<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        document.cookie <span class="token operator">=</span> name + <span class="token string">'='</span> + value + <span class="token string">'; expires='</span> + setDate.toGMTString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">';path=/;domain='</span> + location.hostname    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> checkstr<span class="token punctuation">(</span>mark, Time<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> Time * 24 * 60 * 60 * 1000    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        switch <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token keyword">:</span>                <span class="token keyword">return</span> Time * 1000<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token keyword">:</span>                <span class="token keyword">return</span> Time * 60 * 1000<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token keyword">:</span>                <span class="token keyword">return</span> Time * 60 * 60 * 1000<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token keyword">:</span>                <span class="token keyword">return</span> Time * 24 * 60 * 60 * 1000<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            default:                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>色调旋转滤镜按钮-在线生成</title>
      <link href="/2019/03/18/sdxzljzxsc/"/>
      <url>/2019/03/18/sdxzljzxsc/</url>
      
        <content type="html"><![CDATA[<p>本例应用颜色拾取插件 <a href="https://farbelous.io/bootstrap-colorpicker/tutorial-Basics.html">https://farbelous.io/bootstrap-colorpicker/tutorial-Basics.html</a><br>直接放源码，有兴趣的点击例子查看：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"zh"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>色调旋转滤镜下的按钮<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"</span>        integrity<span class="token operator">=</span><span class="token string">"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"</span> crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"css/bootstrap-colorpicker.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        html,        body <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            height: 100%<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"container jumbotron h-100"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>选择颜色<span class="token operator">&lt;</span>/h1<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"demo"</span> class<span class="token operator">=</span><span class="token string">"input-group"</span> title<span class="token operator">=</span><span class="token string">"Using input value"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> class<span class="token operator">=</span><span class="token string">"form-control input-lg"</span> value<span class="token operator">=</span><span class="token string">""</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"input-group-append"</span><span class="token operator">></span><span class="token operator">&lt;</span>span                    class<span class="token operator">=</span><span class="token string">"input-group-text colorpicker-input-addon"</span><span class="token operator">></span><span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>h4 class<span class="token operator">=</span><span class="token string">"pt-3"</span><span class="token operator">></span>色调旋转滤镜下的按钮<span class="token operator">&lt;</span>/h4<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"hueBtnBox"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>h4 class<span class="token operator">=</span><span class="token string">"pt-3"</span><span class="token operator">></span>css<span class="token operator">&lt;</span>/h4<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"css"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.3.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/bootstrap.bundle.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/bootstrap-colorpicker.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token variable"><span class="token variable">$(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">)</span></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token punctuation">$(</span><span class="token string">'#demo'</span><span class="token punctuation">)</span>.colorpicker<span class="token punctuation">(</span><span class="token operator">&amp;</span>#123<span class="token punctuation">;</span>                <span class="token string">"color"</span><span class="token keyword">:</span> <span class="token string">"#ff0000"</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            <span class="token punctuation">$(</span><span class="token string">'#demo'</span><span class="token punctuation">)</span>.on<span class="token punctuation">(</span><span class="token string">'colorpickerChange'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#123<span class="token punctuation">;</span>                initColor<span class="token punctuation">(</span>event.color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            //初始化            initColor<span class="token punctuation">(</span><span class="token string">'#ff0000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //生成36种旋转滤镜颜色            <span class="token keyword">function</span> initColor<span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                color <span class="token operator">=</span> String<span class="token punctuation">(</span>color<span class="token punctuation">)</span>.indexOf<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> 0 ? color <span class="token keyword">:</span> hexify<span class="token punctuation">(</span>String<span class="token punctuation">(</span>color<span class="token punctuation">))</span><span class="token punctuation">;</span>                var templeteStyle <span class="token operator">=</span> <span class="token string">'.ui-button-primary&amp;#123;border: 1px solid '</span> + color + <span class="token string">';background-color: '</span> +                    color + <span class="token string">';color: #fff;&amp;#125;.ui-button-primary:hover &amp;#123;background-color: '</span> + LightenDarkenColor<span class="token punctuation">(</span>                        color, -20<span class="token punctuation">)</span> + <span class="token string">';border-color: '</span> + LightenDarkenColor<span class="token punctuation">(</span>color, -20<span class="token punctuation">)</span> + <span class="token string">';&amp;#125;'</span><span class="token punctuation">;</span>                var res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">$(</span><span class="token string">'#colorPickerStyle'</span><span class="token punctuation">)</span>.length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#123<span class="token punctuation">;</span>                    <span class="token variable"><span class="token variable">$(</span>document.head<span class="token variable">)</span></span>.append<span class="token punctuation">(</span><span class="token string">'&lt;style id="colorPickerStyle">'</span> + templeteStyle + <span class="token string">'&lt;/style>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                    <span class="token punctuation">$(</span><span class="token string">'#colorPickerStyle'</span><span class="token punctuation">)</span>.html<span class="token punctuation">(</span>templeteStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0, len <span class="token operator">=</span> 36<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    res.push<span class="token punctuation">(</span><span class="token string">'&lt;button class="btn ui-button-primary m-1" style="filter:hue-rotate('</span> + i +                        <span class="token string">'0deg);">其它色按钮&lt;/button>'</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token punctuation">$(</span><span class="token string">'#hueBtnBox'</span><span class="token punctuation">)</span>.html<span class="token punctuation">(</span>res.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">$(</span><span class="token string">'#css'</span><span class="token punctuation">)</span>.html<span class="token punctuation">(</span>templeteStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        //十六进制转为RGB        <span class="token keyword">function</span> hex2Rgb<span class="token punctuation">(</span>hex<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var rgb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>/^\#<span class="token punctuation">[</span>0-9A-F<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;3&amp;#125;$/i.test(hex)) &amp;#123; //判断传入是否为#三位十六进制数</span>                <span class="token keyword">let</span> sixHex <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>                hex.replace<span class="token punctuation">(</span>/<span class="token punctuation">[</span>0-9A-F<span class="token punctuation">]</span>/ig, <span class="token keyword">function</span> <span class="token punctuation">(</span>kw<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    sixHex +<span class="token operator">=</span> kw + kw<span class="token punctuation">;</span> //把三位16进制数转化为六位                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                hex <span class="token operator">=</span> sixHex<span class="token punctuation">;</span> //保存回hex            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>/^<span class="token comment" spellcheck="true">#[0-9A-F]&amp;#123;6&amp;#125;$/i.test(hex)) &amp;#123; //判断传入是否为#六位十六进制数</span>                hex.replace<span class="token punctuation">(</span>/<span class="token punctuation">[</span>0-9A-F<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;2&amp;#125;/ig, function (kw) &amp;#123;</span>                    rgb.push<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">'0x'</span> + kw<span class="token punctuation">))</span><span class="token punctuation">;</span> //十六进制转化为十进制并存如数组                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                <span class="token keyword">return</span> `rgb<span class="token punctuation">(</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;rgb.join(',')&amp;#125;)`; //输出RGB格式颜色</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                console.log<span class="token punctuation">(</span>`Input $<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;hex&amp;#125; is wrong!`);</span>                <span class="token keyword">return</span> <span class="token string">'rgb(0,0,0)'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        //rgb转换十六进制        <span class="token keyword">function</span> hexify<span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var values <span class="token operator">=</span> color                .replace<span class="token punctuation">(</span>/rgba?\<span class="token punctuation">(</span>/, <span class="token string">''</span><span class="token punctuation">)</span>                .replace<span class="token punctuation">(</span>/\<span class="token punctuation">)</span>/, <span class="token string">''</span><span class="token punctuation">)</span>                .replace<span class="token punctuation">(</span>/<span class="token punctuation">[</span>\s+<span class="token punctuation">]</span>/g, <span class="token string">''</span><span class="token punctuation">)</span>                .split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var a <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span>values<span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token operator">||</span> 1<span class="token punctuation">)</span>,                r <span class="token operator">=</span> Math.floor<span class="token punctuation">(</span>a * parseInt<span class="token punctuation">(</span>values<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span>1 - a<span class="token punctuation">)</span> * 255<span class="token punctuation">)</span>,                g <span class="token operator">=</span> Math.floor<span class="token punctuation">(</span>a * parseInt<span class="token punctuation">(</span>values<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span>1 - a<span class="token punctuation">)</span> * 255<span class="token punctuation">)</span>,                b <span class="token operator">=</span> Math.floor<span class="token punctuation">(</span>a * parseInt<span class="token punctuation">(</span>values<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span>1 - a<span class="token punctuation">)</span> * 255<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"#"</span> +                <span class="token punctuation">(</span><span class="token string">"0"</span> + r.toString<span class="token punctuation">(</span>16<span class="token punctuation">))</span>.slice<span class="token punctuation">(</span>-2<span class="token punctuation">)</span> +                <span class="token punctuation">(</span><span class="token string">"0"</span> + g.toString<span class="token punctuation">(</span>16<span class="token punctuation">))</span>.slice<span class="token punctuation">(</span>-2<span class="token punctuation">)</span> +                <span class="token punctuation">(</span><span class="token string">"0"</span> + b.toString<span class="token punctuation">(</span>16<span class="token punctuation">))</span>.slice<span class="token punctuation">(</span>-2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        //转换颜色变亮、变暗        <span class="token keyword">function</span> LightenDarkenColor<span class="token punctuation">(</span>col, amt<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var usePound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>col<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                col <span class="token operator">=</span> col.slice<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>                usePound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            var num <span class="token operator">=</span> parseInt<span class="token punctuation">(</span>col, 16<span class="token punctuation">)</span><span class="token punctuation">;</span>            var r <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">>></span> 16<span class="token punctuation">)</span> + amt<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> 255<span class="token punctuation">)</span> r <span class="token operator">=</span> 255<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> 0<span class="token punctuation">)</span> r <span class="token operator">=</span> 0<span class="token punctuation">;</span>            var b <span class="token operator">=</span> <span class="token punctuation">((</span>num <span class="token operator">>></span> 8<span class="token punctuation">)</span> <span class="token operator">&amp;</span> 0x00FF<span class="token punctuation">)</span> + amt<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> 255<span class="token punctuation">)</span> b <span class="token operator">=</span> 255<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> 0<span class="token punctuation">)</span> b <span class="token operator">=</span> 0<span class="token punctuation">;</span>            var g <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> 0x0000FF<span class="token punctuation">)</span> + amt<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">></span> 255<span class="token punctuation">)</span> g <span class="token operator">=</span> 255<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;</span> 0<span class="token punctuation">)</span> g <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>usePound ? <span class="token string">"#"</span> <span class="token keyword">:</span> <span class="token string">""</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span>g <span class="token operator">|</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;&lt;</span> 8<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> 16<span class="token punctuation">))</span>.toString<span class="token punctuation">(</span>16<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span></code></pre><p>示例：<a href="/pages/%E8%89%B2%E8%B0%83%E6%97%8B%E8%BD%AC%E6%BB%A4%E9%95%9C%E6%8C%89%E9%92%AE%E5%9C%A8%E7%BA%BF%E7%94%9F%E6%88%90/index.html">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> bootstrap </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度分享-设置缩略图及标题</title>
      <link href="/2019/03/14/bdfxszsltjbt/"/>
      <url>/2019/03/14/bdfxszsltjbt/</url>
      
        <content type="html"><![CDATA[<h4 id="一不小心走进你的锅…"><a href="#一不小心走进你的锅…" class="headerlink" title="一不小心走进你的锅…"></a><strong>一不小心走进你的锅…</strong></h4><p>当你工作中用到  <a href="http://share.baidu.com/code">百度分享</a>，<br>百度官方提供了两种方式，如图：<br><img src="/images/share.jpg" alt="avatar"><br>一定会毫不犹豫点进百度分享官网，<br>按其提示的两种方式选择一种来用，那么问题来了…,当你真的把网页分享出去时，你可能提出类似这种问题：<br><a href="http://tieba.baidu.com/p/5657545534">…无法正常显示分享缩略图和介绍?</a>。<br>说到这里吐出一口老血！<br>直接讲重点：<br>1.按照官方<code>自由选择版</code>，获取到代码后。黏贴到需要分享的网页的js里。下面这是展开的样子：</p><pre class=" language-bash"><code class="language-bash">window._bd_share_config <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"common"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"bdSnsKey"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>        <span class="token string">"bdText"</span><span class="token keyword">:</span> <span class="token string">""</span>, //标题        <span class="token string">"bdDesc"</span><span class="token keyword">:</span> <span class="token string">""</span>, //官方解释：“分享的摘要”，此处就是附带分享发出去的文字，你可以尝试加上自行体会<span class="token punctuation">..</span>.        <span class="token string">"bdMini"</span><span class="token keyword">:</span> <span class="token string">"2"</span>,        <span class="token string">"bdMiniList"</span><span class="token keyword">:</span> false,        <span class="token string">"bdPic"</span><span class="token keyword">:</span> <span class="token string">""</span>, //缩略图        <span class="token string">"bdStyle"</span><span class="token keyword">:</span> <span class="token string">"0"</span>,        <span class="token string">"bdSize"</span><span class="token keyword">:</span> <span class="token string">"16"</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token string">"slide"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"slide"</span>,        <span class="token string">"bdImg"</span><span class="token keyword">:</span> <span class="token string">"1"</span>,        <span class="token string">"bdPos"</span><span class="token keyword">:</span> <span class="token string">"right"</span>,        <span class="token string">"bdTop"</span><span class="token keyword">:</span> <span class="token string">"157.5"</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>with<span class="token punctuation">(</span>document<span class="token punctuation">)</span> 0<span class="token punctuation">[</span><span class="token punctuation">(</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">||</span> body<span class="token punctuation">)</span>.appendChild<span class="token punctuation">(</span>createElement<span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">))</span>.src <span class="token operator">=</span> <span class="token string">'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='</span> + ~<span class="token punctuation">(</span>-new Date<span class="token punctuation">(</span><span class="token punctuation">)</span> / 36e5<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>2.打开官方<code>专业开发版</code>文档。关于各个参数的解释文档里该跟你说的都说了，说到这里本该结束了。但我还是多加一句，官方不想跟你说的没说…。<br>比如：当你分享出去自己的网页，再分享出去一个百度百科。具体的坑请自行尝试。</p><p>示例：<a href="https://codepen.io/xmwarrior/pen/eYmEvyB">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>position-sticky</title>
      <link href="/2019/03/14/sticky/"/>
      <url>/2019/03/14/sticky/</url>
      
        <content type="html"><![CDATA[<h2 id="position-sticky简介"><a href="#position-sticky简介" class="headerlink" title="position:sticky简介"></a>position:sticky简介</h2><p>单词sticky的中文意思是“粘性的”，position:sticky表现也符合这个粘性的表现。<br>基本上，可以看出是position:relative和position:fixed的结合体——当元素在屏幕内，表现为relative，就要滚出显示器屏幕的时候，表现为fixed。<br>你可以点击 <a href="https://codepen.io/xmwarrior/pen/rNazyYW">此处</a> 感受一下。</p><p>不过应用此属性需要注意html布局配合，以下是css样式及html结构，具体体会你将在使用时，切身体会到：</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a><strong>css</strong></h3><pre class=" language-bash"><code class="language-bash">h4 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    position: sticky<span class="token punctuation">;</span>    z-index: 1<span class="token punctuation">;</span>    top: 0<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>div <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    position: relative<span class="token punctuation">;</span>    background-color: <span class="token comment" spellcheck="true">#7FDBFF;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>span <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    display: block<span class="token punctuation">;</span>    position: sticky<span class="token punctuation">;</span>    bottom: 50%<span class="token punctuation">;</span>    z-index: -1<span class="token punctuation">;</span>    background: <span class="token comment" spellcheck="true">#2ECC40;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="html"><a href="#html" class="headerlink" title="html"></a><strong>html</strong></h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>h4<span class="token operator">></span>我是标题1<span class="token operator">&lt;</span>/h4<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是内容<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>/p<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>我是footer<span class="token operator">&lt;</span>/span<span class="token operator">></span>    <span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token operator">&lt;</span>/ul<span class="token operator">></span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/rNazyYW">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css变量</title>
      <link href="/2019/03/13/cssvariate/"/>
      <url>/2019/03/13/cssvariate/</url>
      
        <content type="html"><![CDATA[<h4 id="CSS变量var-语法"><a href="#CSS变量var-语法" class="headerlink" title="CSS变量var()语法"></a><strong>CSS变量var()语法</strong></h4><p>CSS中原生的变量定义语法是：<code>--*</code>，<br>变量使用语法是：<code>var(--*)</code>，<br>其中*表示我们的变量名称。<br>下面是bootstrap使用的<code>:root</code>定义：</p><pre class=" language-bash"><code class="language-bash">:root <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    --blue: <span class="token comment" spellcheck="true">#007bff;</span>    --indigo: <span class="token comment" spellcheck="true">#6610f2;</span>    --purple: <span class="token comment" spellcheck="true">#6f42c1;</span>    --pink: <span class="token comment" spellcheck="true">#e83e8c;</span>    --red: <span class="token comment" spellcheck="true">#dc3545;</span>    --orange: <span class="token comment" spellcheck="true">#fd7e14;</span>    --yellow: <span class="token comment" spellcheck="true">#ffc107;</span>    --green: <span class="token comment" spellcheck="true">#28a745;</span>    --teal: <span class="token comment" spellcheck="true">#20c997;</span>    --cyan: <span class="token comment" spellcheck="true">#17a2b8;</span>    --white: <span class="token comment" spellcheck="true">#fff;</span>    --gray: <span class="token comment" spellcheck="true">#6c757d;</span>    --gray-dark: <span class="token comment" spellcheck="true">#343a40;</span>    --primary: <span class="token comment" spellcheck="true">#007bff;</span>    --secondary: <span class="token comment" spellcheck="true">#6c757d;</span>    --success: <span class="token comment" spellcheck="true">#28a745;</span>    --info: <span class="token comment" spellcheck="true">#17a2b8;</span>    --warning: <span class="token comment" spellcheck="true">#ffc107;</span>    --danger: <span class="token comment" spellcheck="true">#dc3545;</span>    --light: <span class="token comment" spellcheck="true">#f8f9fa;</span>    --dark: <span class="token comment" spellcheck="true">#343a40;</span>    --breakpoint-xs: 0<span class="token punctuation">;</span>    --breakpoint-sm: 576px<span class="token punctuation">;</span>    --breakpoint-md: 768px<span class="token punctuation">;</span>    --breakpoint-lg: 992px<span class="token punctuation">;</span>    --breakpoint-xl: 1200px<span class="token punctuation">;</span>    --font-family-sans-serif: -apple-system,BlinkMacSystemFont,<span class="token string">"Segoe UI"</span>,Roboto,<span class="token string">"Helvetica Neue"</span>,Arial,sans-serif,<span class="token string">"Apple Color Emoji"</span>,<span class="token string">"Segoe UI Emoji"</span>,<span class="token string">"Segoe UI Symbol"</span><span class="token punctuation">;</span>    --font-family-monospace: SFMono-Regular,Menlo,Monaco,Consolas,<span class="token string">"Liberation Mono"</span>,<span class="token string">"Courier New"</span>,monospace<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>相信用不了多久，你就可以不考虑此用法的兼容性。CSS中原生的变量的应用场景你可以自己探索，在我看来，此不失为一种定制一套皮肤风格的好办法。示例里顺便试了下document.scrollingElement,如有兴趣请自行F2查看。</p><p>示例：<a href="https://codepen.io/xmwarrior/pen/zYxdZNo">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CSS3 column多栏布局实现水平滑页翻页交互</title>
      <link href="/2019/03/12/css3spfy/"/>
      <url>/2019/03/12/css3spfy/</url>
      
        <content type="html"><![CDATA[<p>今天看大神张鑫旭的文章，有一篇  <a href="https://www.zhangxinxu.com/wordpress/2017/02/css3-multiple-column-layout-read-horizontal/">基于CSS3 column多栏布局实现水平滑页翻页交互</a>，<br>为熟悉column多栏布局写法，模仿 <a href="https://m.qidian.com/">起点中文网</a> 封装了个jquery拓展方法。如下：</p><h4 id="css"><a href="#css" class="headerlink" title="css"></a><strong>css</strong></h4><pre class=" language-XML"><code class="language-XML">html,body &#123;    width: 100%;    height: 100%;    overflow: hidden;    background: #C4B399;&#125;html,body,ul,li &#123;    padding: 0;    margin: 0;&#125;ul &#123;    -webkit-columns: calc(100vw - 32px) 1;    -webkit-column-gap: 16px;    columns: calc(100vw - 32px) 1;    column-gap: 16px;    overflow: visible;    height: 100%;    transition: all 0.2s;&#125;ul li &#123;    list-style: none;    padding: 1em;    margin: 1em;    -webkit-column-break-inside: avoid;    page-break-inside: avoid;    background: #FFFFFF;    break-inside: avoid;&#125;</code></pre><h4 id="html"><a href="#html" class="headerlink" title="html"></a><strong>html</strong></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"display: flex;justify-content: space-between;position: absolute;bottom: 0;width: 100%;"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>前一页<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>后一页<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h4 id="js"><a href="#js" class="headerlink" title="js"></a><strong>js</strong></h4><p>依赖：jquery.js</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    $.extend<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        pageColumns: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            init: <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var that <span class="token operator">=</span> this<span class="token punctuation">;</span>                options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;;</span>                //默认参数                that.el <span class="token operator">=</span> options.el <span class="token operator">||</span> <span class="token punctuation">$(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                that.prevBtn <span class="token operator">=</span> options.prevBtn <span class="token operator">||</span> <span class="token punctuation">$(</span><span class="token string">'button'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>                that.nextBtn <span class="token operator">=</span> options.nextBtn <span class="token operator">||</span> <span class="token punctuation">$(</span><span class="token string">'button'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>                that.columnGap <span class="token operator">=</span> options.columnGap <span class="token operator">||</span> 16<span class="token punctuation">;</span>                that.currentPage <span class="token operator">=</span> options.currentPage <span class="token operator">||</span> 0<span class="token punctuation">;</span>                that.sectionIndex <span class="token operator">=</span> options.sectionIndex <span class="token operator">||</span> 0<span class="token punctuation">;</span>                that.direction <span class="token operator">=</span> options.direction <span class="token operator">||</span> 1<span class="token punctuation">;</span>                that.totalWidth <span class="token operator">=</span> that.el<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.scrollWidth<span class="token punctuation">;</span>                that.pageWidth <span class="token operator">=</span> that.el.outerWidth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                that.page <span class="token operator">=</span> that.totalWidth / <span class="token punctuation">(</span>that.pageWidth + that.columnGap * 2<span class="token punctuation">)</span><span class="token punctuation">;</span>                //前一页                that.prevBtn.on<span class="token punctuation">(</span><span class="token string">'click'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>that.currentPage<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        that.currentPage--<span class="token punctuation">;</span>                        that.el.css<span class="token punctuation">(</span><span class="token string">'transform'</span>, <span class="token string">'translateX(-'</span> + <span class="token punctuation">(</span>that.currentPage * <span class="token punctuation">(</span>that.pageWidth + that.columnGap<span class="token punctuation">))</span> + <span class="token string">'px)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                    that.direction <span class="token operator">=</span> 0<span class="token punctuation">;</span>                    that.sectionIndex--<span class="token punctuation">;</span>                    that.filContent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    that.slidePosition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                //后一页                that.nextBtn.on<span class="token punctuation">(</span><span class="token string">'click'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>that.currentPage <span class="token operator">&lt;</span> that.page - 1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        that.currentPage++<span class="token punctuation">;</span>                        that.el.css<span class="token punctuation">(</span><span class="token string">'transform'</span>, <span class="token string">'translateX(-'</span> + <span class="token punctuation">(</span>that.currentPage * <span class="token punctuation">(</span>that.pageWidth + that.columnGap<span class="token punctuation">))</span> + <span class="token string">'px)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                    that.direction <span class="token operator">=</span> 1<span class="token punctuation">;</span>                    that.sectionIndex++<span class="token punctuation">;</span>                    that.filContent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    that.slidePosition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                //初始化                that.filContent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                that.slidePosition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>            filContent: <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var templete <span class="token operator">=</span> <span class="token string">'很长很长的内容......'</span><span class="token punctuation">;</span>                var repeatText <span class="token operator">=</span> <span class="token string">'&lt;li>'</span> + templete.repeat<span class="token punctuation">(</span>3<span class="token punctuation">)</span> + <span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>                var title <span class="token operator">=</span> <span class="token string">'&lt;li>第'</span> + this.sectionIndex + <span class="token string">'章&lt;/li>'</span><span class="token punctuation">;</span>                this.el.html<span class="token punctuation">(</span>title + repeatText.repeat<span class="token punctuation">(</span>30<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>            slidePosition: <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var that <span class="token operator">=</span> this<span class="token punctuation">;</span>                that.el.css<span class="token punctuation">(</span><span class="token string">'transition'</span>, <span class="token string">'unset'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                that.totalWidth <span class="token operator">=</span> that.el<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.scrollWidth<span class="token punctuation">;</span>                that.page <span class="token operator">=</span> that.totalWidth / <span class="token punctuation">(</span>that.pageWidth + that.columnGap * 2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>that.direction<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    that.currentPage <span class="token operator">=</span> 0<span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                    that.currentPage <span class="token operator">=</span> Math.ceil<span class="token punctuation">(</span>that.page - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                that.el.css<span class="token punctuation">(</span><span class="token string">'transform'</span>, <span class="token string">'translateX(-'</span> + <span class="token punctuation">(</span>that.currentPage * <span class="token punctuation">(</span>that.pageWidth + that.columnGap<span class="token punctuation">))</span> + <span class="token string">'px)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    that.el.css<span class="token punctuation">(</span><span class="token string">'transition'</span>, <span class="token string">'all 0.2s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, 200);</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)();</span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/ZEYJerp">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相邻算法</title>
      <link href="/2019/03/11/xlsf/"/>
      <url>/2019/03/11/xlsf/</url>
      
        <content type="html"><![CDATA[<p>参照“猫眼电影”购票选座规则：</p><pre class=" language-bash"><code class="language-bash">/** 影院选座验证* param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Array&amp;#125; arr</span>* param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Object&amp;#125; options.ok验证成功回调函数，options.cancel验证失败回调函数</span>* <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Boolean&amp;#125; 验证成功返回true,失败返回false</span>*/<span class="token keyword">function</span> getAdjacentItem<span class="token punctuation">(</span>arr, options<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var arrLength <span class="token operator">=</span> arr.length<span class="token punctuation">;</span>    var nextItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arrLength<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrLength <span class="token operator">==</span><span class="token operator">=</span> 1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        options.ok <span class="token operator">&amp;&amp;</span> options.ok<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    arr.sort<span class="token punctuation">(</span>function <span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a.y <span class="token operator">==</span><span class="token operator">=</span> b.y <span class="token operator">&amp;&amp;</span> Math.abs<span class="token punctuation">(</span>a.x - b.x<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> 1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            nextItems.push<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                a: a,                b: b            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">return</span> a.y - b.y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrLength % 2<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math.floor<span class="token punctuation">(</span>arrLength / 2<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> nextItems.length<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            options.ok <span class="token operator">&amp;&amp;</span> options.ok<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrLength / 2 <span class="token operator">==</span><span class="token operator">=</span> nextItems.length<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            options.ok <span class="token operator">&amp;&amp;</span> options.ok<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    options.cancel <span class="token operator">&amp;&amp;</span> options.cancel<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/MWYvpZb">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页防扒</title>
      <link href="/2019/03/06/wyfp/"/>
      <url>/2019/03/06/wyfp/</url>
      
        <content type="html"><![CDATA[<p>所谓防火防盗防大佬，虽然我们提倡开源，但是有时也会用到“网页防扒”，在<a href="https://www.sojson.com/">https://www.sojson.com</a> 被挡了一会感觉很蓝瘦，顺便研究了下如何“防扒”，代码如下：</p><pre class=" language-bash"><code class="language-bash">document.onkeydown<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var e<span class="token operator">=</span>window.event<span class="token operator">||</span>arguments<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>e.keyCode<span class="token operator">==</span>123<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else if((e.ctrlKey)&amp;&amp;(e.shiftKey)&amp;&amp;(e.keyCode==73))&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>document.oncontextmenu<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap-Modal组件封装</title>
      <link href="/2019/02/26/bootstrapmodal/"/>
      <url>/2019/02/26/bootstrapmodal/</url>
      
        <content type="html"><![CDATA[<p>bootstrap-Modal组件封装：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    $.extend<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        xmDialog: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        init: function<span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var that <span class="token operator">=</span> this<span class="token punctuation">;</span>            var base <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                el: <span class="token string">'#xmCustomModal'</span>,                classes: option.classes <span class="token operator">||</span> <span class="token string">'modal-sm'</span>,                zIndex:option.zIndex<span class="token operator">||</span>10000,                styles: option.styles <span class="token operator">||</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,//临时没用到</span>                modalHeader: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    title: option.title <span class="token operator">||</span> <span class="token string">''</span>,                    styles: option.headerStyles<span class="token operator">||</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                modalBody: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    content: option.content <span class="token operator">||</span> <span class="token string">''</span>,                    styles: option.bodyStyles <span class="token operator">||</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,</span>                    loading: <span class="token string">'&lt;div id="spinLoading" class="bg-white w-100 h-100 position-absolute row align-items-center justify-content-center m-0 spin-loading" style="top:0;left:0;">&lt;div class="loader">&lt;div class="loader-inner line-spin-fade-loader">&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;/div>&lt;/div>&lt;/div>'</span>,                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                modalFooter: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    show: typeof option.showFooter <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'boolean'</span> ? option.showFooter <span class="token keyword">:</span> true,                    styles: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token string">'justify-content'</span><span class="token keyword">:</span> option.footerAlign<span class="token operator">||</span><span class="token string">'center'</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                    type: option.type <span class="token operator">||</span> <span class="token string">'confirm'</span>,                    buttons: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token string">'confirm'</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            type: <span class="token string">'ok'</span>,                            classes: <span class="token string">'btn-primary'</span>,                            text: option.okText <span class="token operator">||</span> <span class="token string">'确认'</span>,                            fn: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                option.ok ? option.ok<span class="token punctuation">(</span>that<span class="token punctuation">)</span> <span class="token keyword">:</span> that.<span class="token variable">$el</span>.modal<span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, &amp;#123;</span>                            type: <span class="token string">'cancel'</span>,                            classes: <span class="token string">'btn-secondary'</span>,                            text: <span class="token string">'取消'</span>,                            fn: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                option.cancel ? option.cancel<span class="token punctuation">(</span>that<span class="token punctuation">)</span> <span class="token keyword">:</span> that.<span class="token variable">$el</span>.modal<span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;],</span>                        <span class="token string">'tip'</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            type: <span class="token string">'tip'</span>,                            classes: <span class="token string">'btn-info'</span>,                            text: <span class="token string">'我知道了'</span>,                            fn: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                option.confirm ? option.confirm<span class="token punctuation">(</span>that<span class="token punctuation">)</span> <span class="token keyword">:</span> that.<span class="token variable">$el</span>.modal<span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;]</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                formatStyle: function<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    if<span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> $.isEmptyObject<span class="token punctuation">(</span>obj<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                        var res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        for<span class="token punctuation">(</span>var key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            res.push<span class="token punctuation">(</span>key + <span class="token string">':'</span> + obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token keyword">return</span> res.join<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                shown: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    option.shown ? option.shown<span class="token punctuation">(</span>that<span class="token punctuation">)</span> <span class="token keyword">:</span> that.hideLoading<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                hidden: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    option.hidden <span class="token operator">&amp;&amp;</span> option.hidden<span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>            if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable"><span class="token variable">$(</span>base.el<span class="token variable">)</span></span>.length<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token punctuation">$(</span><span class="token string">'body'</span><span class="token punctuation">)</span>.append<span class="token punctuation">(</span><span class="token string">'&lt;div id="'</span> + base.el.substring<span class="token punctuation">(</span>1<span class="token punctuation">)</span> + <span class="token string">'" class="modal fade" style="z-index:10000;" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" data-backdrop="static">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            that.<span class="token variable">$el</span> <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>base.el<span class="token variable">)</span></span><span class="token punctuation">;</span>            var templete <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>base.style<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                that.<span class="token variable">$el</span>.attr<span class="token punctuation">(</span><span class="token string">'style'</span>, base.style<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'&lt;div class="modal-dialog modal-dialog-centered modal-dialog-scrollable '</span> + base.classes + <span class="token string">'" role="document" style="'</span> + base.formatStyle<span class="token punctuation">(</span>base.styles<span class="token punctuation">)</span> + <span class="token string">'">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'    &lt;div class="modal-content">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'        &lt;div class="modal-header border-0 py-2" style="'</span> + base.formatStyle<span class="token punctuation">(</span>base.modalHeader.styles<span class="token punctuation">)</span> + <span class="token string">'">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'            &lt;h5 class="modal-title pr-3 text-nowrap overflow-hidden" style="text-overflow:ellipsis;">'</span> + base.modalHeader.title + <span class="token string">'&lt;/h5>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'            &lt;button type="button" class="close" style="margin:-0.5rem -1rem;padding:0.5rem 0.75rem;" data-dismiss="modal" aria-label="Close">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'                &lt;span aria-hidden="true">&amp;times;&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'            &lt;/button>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'        &lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'        &lt;div class="modalBody modal-body relative" style="'</span> + base.formatStyle<span class="token punctuation">(</span>base.modalBody.styles<span class="token punctuation">)</span> + <span class="token string">'">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'            &lt;!--提示内容-->'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span>base.modalBody.content + base.modalBody.loading<span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'        &lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>base.modalFooter.show<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                templete.push<span class="token punctuation">(</span><span class="token string">'    &lt;div class="modal-footer border-0" style="'</span> + base.formatStyle<span class="token punctuation">(</span>base.modalFooter.styles<span class="token punctuation">)</span> + <span class="token string">'">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                base.modalFooter.buttons<span class="token punctuation">[</span>base.modalFooter.type<span class="token punctuation">]</span>.forEach<span class="token punctuation">(</span>function<span class="token punctuation">(</span>item, index<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    $<span class="token punctuation">[</span><span class="token string">'xmCustomModal'</span> + index<span class="token punctuation">]</span> <span class="token operator">=</span> item.fn<span class="token punctuation">;</span>                    templete.push<span class="token punctuation">(</span><span class="token string">'    &lt;button type="button" class="btn '</span> + item.classes + <span class="token string">' px-4" onclick="'</span> + <span class="token string">'$.xmCustomModal'</span> + index + <span class="token string">'();">'</span> + item.text + <span class="token string">'&lt;/button>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                templete.push<span class="token punctuation">(</span><span class="token string">'    &lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'    &lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            templete.push<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            that.<span class="token variable">$el</span>.html<span class="token punctuation">(</span>templete.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            that.<span class="token variable">$el</span>.off<span class="token punctuation">(</span><span class="token string">'hidden.bs.modal'</span><span class="token punctuation">)</span>.on<span class="token punctuation">(</span><span class="token string">'hidden.bs.modal'</span>, function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                base.hidden <span class="token operator">&amp;&amp;</span> base.hidden<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            that.<span class="token variable">$el</span>.off<span class="token punctuation">(</span><span class="token string">'shown.bs.modal'</span><span class="token punctuation">)</span>.on<span class="token punctuation">(</span><span class="token string">'shown.bs.modal'</span>, function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                base.shown <span class="token operator">&amp;&amp;</span> base.shown<span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>            that.<span class="token variable">$el</span>.modal<span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> this<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        hideLoading: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token punctuation">$(</span><span class="token string">'#spinLoading'</span><span class="token punctuation">)</span>.hide<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> this<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)();</span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/xxbLqEd">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>title美化提示框</title>
      <link href="/2019/02/25/beautifultitle/"/>
      <url>/2019/02/25/beautifultitle/</url>
      
        <content type="html"><![CDATA[<pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0,maximum-scale<span class="token punctuation">=</span>1.0,user-scalable<span class="token punctuation">=</span>yes<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>美化title属性，使title成为提示框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token number">.</span>tipsy-tooltip &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>                <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token entity" title="\5b8b">\5b8b</span><span class="token entity" title="\4f53">\4f53</span><span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>                <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">100003</span><span class="token punctuation">;</span>                <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            <span class="token number">.</span>tipsy-arrow &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">6</span>px dashed <span class="token hexcode">#FFA500</span><span class="token punctuation">;</span>                <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>                <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>                <span class="token property">border-bottom-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>                <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border-left-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>                <span class="token property">border-right-color</span><span class="token punctuation">:</span> transparent            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            <span class="token number">.</span>tipsy-arrow-n &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFA500</span><span class="token punctuation">;</span>            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>            <span class="token number">.</span>tipsy-inner &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFA500</span><span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>                <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">8</span>px <span class="token number">4</span>px <span class="token number">8</span>px<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>提示：利用title属性制作的提示框效果，不是真正的提示弹出框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是提示文字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提示文字                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;p<span class="token punctuation">></span>我是提示文字1&lt;/p<span class="token punctuation">></span>&lt;p<span class="token punctuation">></span>我是提示文字2&lt;/p<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提示文字可换行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        sweetTitles<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                            y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                            tipElements<span class="token punctuation">:</span> <span class="token string">"a,span,img,div"</span><span class="token punctuation">,</span>                            noTitle<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                            isTarget<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                            init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tipElements<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>isTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            <span class="token keyword">return</span><span class="token punctuation">;</span>                                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>noTitle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            isTitle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            isTitle <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>                                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span>isTitle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            <span class="token keyword">this</span><span class="token punctuation">.</span>myTitle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>                                            <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                                            <span class="token keyword">var</span> tooltip <span class="token operator">=</span> <span class="token string">"&lt;div class='tipsy-tooltip'>&lt;div class='tipsy-arrow tipsy-arrow-n'>&lt;/div>&lt;div class='tipsy-inner'>"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>myTitle <span class="token operator">+</span><span class="token string">"&lt;/div>&lt;/div>"</span><span class="token punctuation">;</span>                                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tooltip<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.tipsy-tooltip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                                <span class="token string">"top"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageY <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>                                                <span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span>                                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'fast'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myTitle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myTitle<span class="token punctuation">;</span>                                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.tipsy-tooltip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mousemove</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.tipsy-tooltip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                            <span class="token string">"top"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageY <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>                                            <span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span>                                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用</span>                $<span class="token punctuation">.</span>sweetTitles<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/RwNZpjY">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js运算精度_decimal插件</title>
      <link href="/2019/02/19/decimal/"/>
      <url>/2019/02/19/decimal/</url>
      
        <content type="html"><![CDATA[<p>收藏备用：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>解决JS运算和精度问题-decimal.js<span class="token operator">&lt;</span>/title<span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/decimal.min.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>/head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            /*示例*/            var dc<span class="token operator">=</span>function <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">return</span> new Decimal<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            //加法 add            var a <span class="token operator">=</span> dc<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span>.add<span class="token punctuation">(</span>dc<span class="token punctuation">(</span>0.2<span class="token punctuation">))</span><span class="token punctuation">;</span>            //减法 sub            var b <span class="token operator">=</span> dc<span class="token punctuation">(</span>0.3<span class="token punctuation">)</span>.sub<span class="token punctuation">(</span>dc<span class="token punctuation">(</span>0.1<span class="token punctuation">))</span><span class="token punctuation">;</span>            //乘法 mul            var c <span class="token operator">=</span> dc<span class="token punctuation">(</span>37.5<span class="token punctuation">)</span>.mul<span class="token punctuation">(</span>dc<span class="token punctuation">(</span>5.5<span class="token punctuation">))</span><span class="token punctuation">;</span>            //除法 div            var d <span class="token operator">=</span> dc<span class="token punctuation">(</span>10<span class="token punctuation">)</span>.div<span class="token punctuation">(</span>dc<span class="token punctuation">(</span>3<span class="token punctuation">))</span><span class="token punctuation">;</span>            console.log<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console.log<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            console.log<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            console.log<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><a href="https://codepen.io/xmwarrior/pen/yLyqpJe?editors=1010">运行一下</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input-range自定义</title>
      <link href="/2019/02/01/inputrange/"/>
      <url>/2019/02/01/inputrange/</url>
      
        <content type="html"><![CDATA[<p>input-range自定义样式</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"zh"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span>/title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            /*去除默认样式*/            input<span class="token punctuation">[</span>type<span class="token operator">=</span>range<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                -webkit-appearance: none<span class="token punctuation">;</span>                width: 300px<span class="token punctuation">;</span>                background: -webkit-linear-gradient<span class="token punctuation">(</span><span class="token comment" spellcheck="true">#059CFA, #059CFA) no-repeat;</span>                background-size: 0% 100%<span class="token punctuation">;</span>                border-radius: 10px<span class="token punctuation">;</span>                /*这个属性设置使填充进度条时的图形为圆角*/            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            input<span class="token punctuation">[</span>type<span class="token operator">=</span>range<span class="token punctuation">]</span>::-webkit-slider-thumb <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                -webkit-appearance: none<span class="token punctuation">;</span>                /*隐藏滑块*/            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            /*轨道自定义样式*/            input<span class="token punctuation">[</span>type<span class="token operator">=</span>range<span class="token punctuation">]</span>::-webkit-slider-runnable-track <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                height: 15px<span class="token punctuation">;</span>                border-radius: 10px<span class="token punctuation">;</span>                /*将轨道设为圆角的*/                box-shadow: 0 1px 1px <span class="token comment" spellcheck="true">#def3f8, inset 0 .125em .125em #0d1112;</span>                /*轨道内置阴影效果*/            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            input<span class="token punctuation">[</span>type<span class="token operator">=</span>range<span class="token punctuation">]</span>:focus <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                outline: none<span class="token punctuation">;</span>                /*原始的控件获取到焦点时，会显示包裹整个控件的边框，所以还需要把边框取消。*/            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            /*滑块自定义样式*/            input<span class="token punctuation">[</span>type<span class="token operator">=</span>range<span class="token punctuation">]</span>::-webkit-slider-thumb <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                -webkit-appearance: none<span class="token punctuation">;</span>                height: 25px<span class="token punctuation">;</span>                width: 25px<span class="token punctuation">;</span>                margin-top: -5px<span class="token punctuation">;</span>                /*使滑块超出轨道部分的偏移量相等*/                background: <span class="token comment" spellcheck="true">#ffffff;</span>                border-radius: 50%<span class="token punctuation">;</span>                /*外观设置为圆形*/                border: solid 0.125em rgba<span class="token punctuation">(</span>205, 224, 230, 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>                /*设置边框*/                box-shadow: 0 .125em .125em <span class="token comment" spellcheck="true">#3b4547;</span>                /*添加底部阴影*/            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&lt;</span>/style<span class="token operator">></span>    <span class="token operator">&lt;</span>/head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"snrPollInterval"</span> type<span class="token operator">=</span><span class="token string">"range"</span> value<span class="token operator">=</span><span class="token string">"10"</span> min<span class="token operator">=</span><span class="token string">"1"</span> max<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-2.1.0.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            //滑动时的样式            $.fn.RangeSlider <span class="token operator">=</span> function<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                this.sliderCfg <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    min: cfg <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isNaN<span class="token punctuation">(</span>parseFloat<span class="token punctuation">(</span>cfg.min<span class="token punctuation">))</span> ? Number<span class="token punctuation">(</span>cfg.min<span class="token punctuation">)</span> <span class="token keyword">:</span> null,                    max: cfg <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isNaN<span class="token punctuation">(</span>parseFloat<span class="token punctuation">(</span>cfg.max<span class="token punctuation">))</span> ? Number<span class="token punctuation">(</span>cfg.max<span class="token punctuation">)</span> <span class="token keyword">:</span> null,                    step: cfg <span class="token operator">&amp;&amp;</span> Number<span class="token punctuation">(</span>cfg.step<span class="token punctuation">)</span> ? cfg.step <span class="token keyword">:</span> 1,                    callback: cfg <span class="token operator">&amp;&amp;</span> cfg.callback ? cfg.callback <span class="token keyword">:</span> null                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>                var <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span><span class="token punctuation">;</span>                var min <span class="token operator">=</span> this.sliderCfg.min<span class="token punctuation">;</span>                var max <span class="token operator">=</span> this.sliderCfg.max<span class="token punctuation">;</span>                var step <span class="token operator">=</span> this.sliderCfg.step<span class="token punctuation">;</span>                var callback <span class="token operator">=</span> this.sliderCfg.callback<span class="token punctuation">;</span>                <span class="token variable">$input</span>.attr<span class="token punctuation">(</span><span class="token string">'min'</span>, min<span class="token punctuation">)</span>.attr<span class="token punctuation">(</span><span class="token string">'max'</span>, max<span class="token punctuation">)</span>.attr<span class="token punctuation">(</span><span class="token string">'step'</span>, step<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$input</span>.on<span class="token punctuation">(</span><span class="token string">"input"</span>, function<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token variable">$input</span>.attr<span class="token punctuation">(</span><span class="token string">'value'</span>, this.value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$input</span>.css<span class="token punctuation">(</span><span class="token string">'background'</span>, <span class="token string">'linear-gradient(to right, #059CFA, #ebeff4 '</span> + this.value + <span class="token string">'%, #ebeff4)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    if<span class="token punctuation">(</span>$.isFunction<span class="token punctuation">(</span>callback<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        callback<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                <span class="token variable">$input</span>.trigger<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>            <span class="token punctuation">$(</span><span class="token string">'#snrPollInterval'</span><span class="token punctuation">)</span>.RangeSlider<span class="token punctuation">(</span><span class="token operator">&amp;</span>#123<span class="token punctuation">;</span>                min: 0,                max: 100,                step: 1,                callback: <span class="token string">''</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>        <span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/dyPzvNJ">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas转换svg合成图片</title>
      <link href="/2019/02/01/canvas2svg/"/>
      <url>/2019/02/01/canvas2svg/</url>
      
        <content type="html"><![CDATA[<p>此函数应用场景为：百度地图生成自定义标志</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>function <span class="token punctuation">(</span>$, document<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    $.extend<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        //16进制颜色转换为rgba颜色        colorRgb: <span class="token keyword">function</span> <span class="token punctuation">(</span>str, opacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var reg <span class="token operator">=</span> /^<span class="token comment" spellcheck="true">#([0-9a-fA-f]&amp;#123;3&amp;#125;|[0-9a-fA-f]&amp;#123;6&amp;#125;)$/;</span>            var sColor <span class="token operator">=</span> str.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sColor <span class="token operator">&amp;&amp;</span> reg.test<span class="token punctuation">(</span>sColor<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sColor.length <span class="token operator">==</span><span class="token operator">=</span> 4<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    var sColorNew <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 4<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        sColorNew +<span class="token operator">=</span> sColor.slice<span class="token punctuation">(</span>i, i + 1<span class="token punctuation">)</span>.concat<span class="token punctuation">(</span>sColor.slice<span class="token punctuation">(</span>i, i + 1<span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                    sColor <span class="token operator">=</span> sColorNew<span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                //处理六位的颜色值                  var sColorChange <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 7<span class="token punctuation">;</span> i +<span class="token operator">=</span> 2<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    sColorChange.push<span class="token punctuation">(</span>parseInt<span class="token punctuation">(</span><span class="token string">"0x"</span> + sColor.slice<span class="token punctuation">(</span>i, i + 2<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token keyword">return</span> <span class="token string">"rgba("</span> + sColorChange.join<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> + <span class="token string">","</span> + opacity<span class="token punctuation">;</span> //透明度            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token keyword">return</span> sColor<span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        svgToPng: <span class="token keyword">function</span> <span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            var options <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                color: opts.color <span class="token operator">||</span> <span class="token string">'#ff0000'</span>,                opacity: opts.opacity <span class="token operator">||</span> 0.3,                txt: opts.txt <span class="token operator">||</span> <span class="token string">'生'</span>,                width: opts.width <span class="token operator">||</span> 30,                height: opts.height <span class="token operator">||</span> 30,                fn: opts.fn <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    console.log<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>            var svgArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            svgArr.push<span class="token punctuation">(</span><span class="token string">'&lt;svg version="1.1" id="图层_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="'</span> + options.width + <span class="token string">'" height="'</span> + options.height + <span class="token string">'" viewBox="0 0 48 48" enable-background="new 0 0 48 48" xml:space="preserve">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            svgArr.push<span class="token punctuation">(</span><span class="token string">'    &lt;path fill="'</span> + $.colorRgb<span class="token punctuation">(</span>options.color, options.opacity<span class="token punctuation">)</span> + <span class="token string">'" d="M45.301,24.094c0,11.741-9.519,21.26-21.26,21.26c-11.741,0-21.26-9.519-21.26-21.26 c0-11.741,9.519-21.259,21.26-21.259C35.782,2.834,45.301,12.353,45.301,24.094z" />'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            svgArr.push<span class="token punctuation">(</span><span class="token string">'    &lt;path fill="'</span> + options.color + <span class="token string">'" d="M8.45,24.096c0,8.608,6.98,15.588,15.59,15.588c8.611,0,15.59-6.98,15.59-15.588 c0-8.612-6.979-15.592-15.59-15.592C15.43,8.504,8.45,15.484,8.45,24.096z" />'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            svgArr.push<span class="token punctuation">(</span><span class="token string">'&lt;/svg>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var svgXml <span class="token operator">=</span> svgArr.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var img <span class="token operator">=</span> new Image<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img.crossOrigin <span class="token operator">=</span> <span class="token string">'Anonymous'</span><span class="token punctuation">;</span>            //给图片对象写入base64编码的svg流            img.src <span class="token operator">=</span> <span class="token string">'data:image/svg+xml;base64,'</span> + window.btoa<span class="token punctuation">(</span>unescape<span class="token punctuation">(</span>encodeURIComponent<span class="token punctuation">(</span>svgXml<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img.onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var canvas <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //准备空画布                var context <span class="token operator">=</span> canvas.getContext<span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                canvas.width <span class="token operator">=</span> options.width<span class="token punctuation">;</span>                canvas.height <span class="token operator">=</span> options.height<span class="token punctuation">;</span>                context.drawImage<span class="token punctuation">(</span>img, 0, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>                context.fillStyle <span class="token operator">=</span> <span class="token string">'#fff'</span><span class="token punctuation">;</span>                context.font <span class="token operator">=</span> <span class="token string">"bold 13px '微软雅黑','宋体'"</span><span class="token punctuation">;</span>                context.textBaseline <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>                context.fillText<span class="token punctuation">(</span>options.txt, <span class="token punctuation">(</span>options.width - 13<span class="token punctuation">)</span> / 2, <span class="token punctuation">(</span>options.height / 2<span class="token punctuation">))</span><span class="token punctuation">;</span>                var imagePng <span class="token operator">=</span> canvas.toDataURL<span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                options.fn <span class="token operator">&amp;&amp;</span> options.fn<span class="token punctuation">(</span>imagePng<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)(jQuery, document);</span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/ExavWNZ">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现懒加载</title>
      <link href="/2018/12/05/qdsxljz/"/>
      <url>/2018/12/05/qdsxljz/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"zh"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"css/bootstrap.min.css"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        .page-scroll-container<span class="token operator">></span>div <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            position: relative<span class="token punctuation">;</span>            margin-bottom: 20px        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container a <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            overflow: hidden<span class="token punctuation">;</span>            display: block        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .mask <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            background-color: rgba<span class="token punctuation">(</span>0, 0, 0, 0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>            position: absolute<span class="token punctuation">;</span>            top: 0<span class="token punctuation">;</span>            left: 0<span class="token punctuation">;</span>            width: 100%<span class="token punctuation">;</span>            height: 100%<span class="token punctuation">;</span>            opacity: 0<span class="token punctuation">;</span>            filter: alpha<span class="token punctuation">(</span>opacity<span class="token operator">=</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>            transition: all .5s<span class="token punctuation">;</span>            -webkit-transition: all .5s<span class="token punctuation">;</span>            -moz-transition: all .5s<span class="token punctuation">;</span>            -o-transition: all .5s<span class="token punctuation">;</span>            -ms-transition: all .5s<span class="token punctuation">;</span>            text-align: center<span class="token punctuation">;</span>            color: <span class="token comment" spellcheck="true">#ffffff</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .mask h4 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            transform: translateY<span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>            opacity: 0.5<span class="token punctuation">;</span>            transition-duration: 0.8s<span class="token punctuation">;</span>            transition-delay: .2s<span class="token punctuation">;</span>            margin-top: 28%<span class="token punctuation">;</span>            font-size: 36px<span class="token punctuation">;</span>            line-height: 42px        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container<span class="token operator">></span>div:hover .mask h4 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            opacity: 1<span class="token punctuation">;</span>            transform: translateY<span class="token punctuation">(</span>-10px<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .mask strong <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            transform: translateY<span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>            opacity: 0.8<span class="token punctuation">;</span>            transition-duration: 1s<span class="token punctuation">;</span>            transition-delay: .3s<span class="token punctuation">;</span>            display: block        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container<span class="token operator">></span>div:hover .mask strong <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            transform: translateY<span class="token punctuation">(</span>-10px<span class="token punctuation">)</span><span class="token punctuation">;</span>            opacity: 1<span class="token punctuation">;</span>            transition-duration: opacity 1s        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .mask span <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            color: <span class="token comment" spellcheck="true">#fff;</span>            transform: translateY<span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>            opacity: 0.5<span class="token punctuation">;</span>            transition-duration: .8s<span class="token punctuation">;</span>            transition-delay: .4s<span class="token punctuation">;</span>            display: block<span class="token punctuation">;</span>            font-size: 14px        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container<span class="token operator">></span>div:hover span <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            opacity: 1<span class="token punctuation">;</span>            transform: translateY<span class="token punctuation">(</span>-10px<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container<span class="token operator">></span>div:hover .mask <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            opacity: 1<span class="token punctuation">;</span>            filter: alpha<span class="token punctuation">(</span>opacity<span class="token operator">=</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>            transform: scale<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container img <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            width: 100%<span class="token punctuation">;</span>            height: 100%<span class="token punctuation">;</span>            transition: all .5s<span class="token punctuation">;</span>            -webkit-transition: all .5s<span class="token punctuation">;</span>            -moz-transition: all .5s<span class="token punctuation">;</span>            -o-transition: all .5s<span class="token punctuation">;</span>            -ms-transition: all .5s<span class="token punctuation">;</span>            overflow: hidden        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .page-scroll-container a:hover img <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            -webkit-transform: scale<span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>            -moz-transform: scale<span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>            -o-transform: scale<span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>            -ms-transform: scale<span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>            transform: scale<span class="token punctuation">(</span>1.2<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .more <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            width: 280px<span class="token punctuation">;</span>            height: 55px<span class="token punctuation">;</span>            line-height: 55px<span class="token punctuation">;</span>            background: <span class="token comment" spellcheck="true">#d7000f;</span>            margin: 20px auto 50px auto<span class="token punctuation">;</span>            text-align: center<span class="token punctuation">;</span>            border-radius: 26px        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        .more a <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            color: <span class="token comment" spellcheck="true">#ffffff;</span>            font-size: 18px        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"page-scroll-container row"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"more"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"itemMore"</span><span class="token operator">></span>查看更多造势案例+<span class="token operator">&lt;</span>/a<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token punctuation">(</span>function <span class="token punctuation">(</span>$, document<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            /*前端实现-懒加载插件pageScroll             * param el       <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;object&amp;#125; jquery对象,默认： $('.page-scroll-container')</span>             * param datas    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;array &amp;#125; 数据数组,格式：[&amp;#123;img:'',title:'',content:''&amp;#125;,...],默认：示例</span>             * param pageSize <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;number&amp;#125; 每页显示数量,默认： 6</span>             * param currentPage <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;number&amp;#125; 当前页,默认： 0</span>             * param addButton <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;object&amp;#125; jquery对象,默认： $('#itemMore')</span>             * param bottom <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;number&amp;#125; 距底部距离,默认： 0</span>             * param loadingTime <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;number&amp;#125; 加载时间,默认： 200ms</span>             * */            $.pageScroll <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                option <span class="token operator">=</span> option <span class="token operator">||</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;;</span>                var defaultOption <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    el: <span class="token punctuation">$(</span><span class="token string">'.page-scroll-container'</span><span class="token punctuation">)</span>,                    arr: option.datas <span class="token operator">||</span> JSON.parse<span class="token punctuation">((</span><span class="token string">'['</span> + new String<span class="token punctuation">(</span>                            <span class="token string">',&amp;#123;"img":"img/index3_1.png","title":"Brand","content":"内容"&amp;#125;'</span><span class="token punctuation">)</span>.repeat<span class="token punctuation">(</span>20<span class="token punctuation">)</span>                        .substring<span class="token punctuation">(</span>1<span class="token punctuation">)</span> + <span class="token string">']'</span><span class="token punctuation">))</span>,                    pagesize: option.pageSize <span class="token operator">||</span> 6,                    currentPage: option.currentPage <span class="token operator">||</span> 0,                    <span class="token variable">$loadText</span><span class="token keyword">:</span> option.addButton <span class="token operator">||</span> <span class="token punctuation">$(</span><span class="token string">'#itemMore'</span><span class="token punctuation">)</span>,                    loadTxt: <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        more: <span class="token string">'查看更多造势案例+'</span>,                        loading: <span class="token string">'&lt;span>加载中...&lt;/span>'</span>,                        end: <span class="token string">'没有更多了'</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>                    bottom: option.bottom <span class="token operator">||</span> 0,                    loadingTime: option.loadingTime <span class="token operator">||</span> 200,                    isloading: <span class="token boolean">false</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>                Object.defineProperty<span class="token punctuation">(</span>defaultOption, <span class="token string">"page"</span>, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    get: <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>option.page<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            <span class="token keyword">return</span> option.page                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token keyword">return</span> this.arr.length % this.pagesize ? <span class="token punctuation">(</span>parseInt<span class="token punctuation">(</span>this.arr.length / this                            .pagesize<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> <span class="token keyword">:</span> this.arr.length / this.pagesize<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                defaultOption.toPage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    var that <span class="token operator">=</span> this<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>this.isloading<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        this.isloading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        var res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> this.currentPage * this.pagesize, len <span class="token operator">=</span> <span class="token punctuation">((</span>i + this.pagesize <span class="token operator">&lt;</span> this.arr                                .length<span class="token punctuation">)</span> ? i + this.pagesize <span class="token keyword">:</span> this.arr.length<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            res.push<span class="token punctuation">(</span>                                <span class="token string">'&lt;div class="imgitem col-md-4 col-sm-4 col-xs-6" style="display:none;">'</span>                                <span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;a href="#">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;img src="'</span> + this.arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.img + <span class="token string">'" class="img-responsive">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;div class="mask">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;h4>'</span> + this.arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.title + <span class="token string">'&lt;/h4>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;strong>'</span> + this.arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.content + <span class="token string">'&lt;/strong>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;span class="qwe">查看该案例详情&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            res.push<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token variable"><span class="token variable">$(</span>this.el<span class="token variable">)</span></span>.append<span class="token punctuation">(</span>res.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                        <span class="token punctuation">$(</span><span class="token string">'.imgitem:not(:visible)'</span><span class="token punctuation">)</span>.fadeIn<span class="token punctuation">(</span>1500<span class="token punctuation">)</span><span class="token punctuation">;</span>                        this.<span class="token variable">$loadText</span>.html<span class="token punctuation">(</span>this.loadTxt.more<span class="token punctuation">)</span><span class="token punctuation">;</span>                        this.currentPage++<span class="token punctuation">;</span>                        setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            that.isloading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, 1000);</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>                defaultOption.init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    var that <span class="token operator">=</span> this<span class="token punctuation">;</span>                    this.toPage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //点击展开更多                    this.<span class="token variable">$loadText</span>.on<span class="token punctuation">(</span><span class="token string">'click'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>that.currentPage <span class="token operator">&lt;</span> that.page<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                            that.<span class="token variable">$loadText</span>.html<span class="token punctuation">(</span>that.loadTxt.loading<span class="token punctuation">)</span><span class="token punctuation">;</span>                            setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                that.toPage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, that.loadingTime);</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                            that.<span class="token variable">$loadText</span>.html<span class="token punctuation">(</span>that.loadTxt.end<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        that.toPage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                    //页面滚动到距底部x距离时展开更多                    <span class="token variable"><span class="token variable">$(</span>window<span class="token variable">)</span></span>.on<span class="token punctuation">(</span><span class="token string">'scroll'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        var wHeight <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>window<span class="token variable">)</span></span>.innerHeight<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        var dHeight <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>document<span class="token variable">)</span></span>.height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        var sHeight <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>document<span class="token variable">)</span></span>.scrollTop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        var bottomLength <span class="token operator">=</span> dHeight - wHeight - sHeight<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>bottomLength <span class="token operator">&lt;=</span> that.bottom<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //距底部高度</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>that.currentPage <span class="token operator">&lt;</span> that.page<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                that.<span class="token variable">$loadText</span>.html<span class="token punctuation">(</span>that.loadTxt.loading<span class="token punctuation">)</span><span class="token punctuation">;</span>                                setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                    that.toPage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, that.loadingTime);</span>                            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                                that.<span class="token variable">$loadText</span>.html<span class="token punctuation">(</span>that.loadTxt.end<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                defaultOption.init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> defaultOption<span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)(jQuery, document);</span>        //调用方式        $.pageScroll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>示例：<a href="https://codepen.io/xmwarrior/pen/wvBqJjV">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js规范</title>
      <link href="/2018/04/13/jsstandard/"/>
      <url>/2018/04/13/jsstandard/</url>
      
        <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a><strong>原则</strong></h3><p>As short as possible（如无必要，勿增注释）：尽量提高代码本身的清晰性、可读性。</p><p>As long as necessary（如有必要，尽量详尽）：合理的注释、空行排版等，可以让代码更易阅读、更具美感。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a><strong>单行注释</strong></h3><p>必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a><strong>多行注释</strong></h3><p>避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</p><h3 id="函数-x2F-方法注释"><a href="#函数-x2F-方法注释" class="headerlink" title="函数&#x2F;方法注释"></a><strong>函数&#x2F;方法注释</strong></h3><p>函数&#x2F;方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。；<br>参数和返回值注释必须包含类型信息和说明；<br>当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识；</p><pre class=" language-bash"><code class="language-bash">/** * 函数描述 * * @param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;string&amp;#125; p1 参数1的说明</span> * @param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;string&amp;#125; p2 参数2的说明，比较长</span> *     那就换行了. * @param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;number=&amp;#125; p3 参数3的说明（可选）</span> * @return <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Object&amp;#125; 返回值描述</span> */<span class="token keyword">function</span> foo<span class="token punctuation">(</span>p1, p2, p3<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var p3 <span class="token operator">=</span> p3 <span class="token operator">||</span> 10<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        p1: p1,        p2: p2,        p3: p3    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a><strong>文件注释</strong></h3><p>文件注释用于告诉不熟悉这段代码的读者这个文件中包含哪些东西。 应该提供文件的大体内容, 它的 <strong><code>作者</code></strong> , <strong><code>依赖关系</code></strong> 和 <strong><code>兼容性信息</code></strong> 。如下:</p><pre class=" language-bash"><code class="language-bash">/** * @fileoverview Description of file, its uses and information * about its dependencies. * @author user@meizu.com <span class="token punctuation">(</span>Firstname Lastname<span class="token punctuation">)</span> * Copyright 2009 Meizu Inc. All Rights Reserved. */</code></pre><h2 id="命名语法"><a href="#命名语法" class="headerlink" title="命名语法"></a>命名语法</h2><p>类名，使用名词。<br><code>function Engine(options) &#123;&#125;</code></p><p>函数名，使用动宾短语。<br><code>function getStyle(element) &#123;&#125;</code></p><p>boolean 类型的变量使用 is 或 has 开头。</p><pre class=" language-bash"><code class="language-bash">var isReady <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>var hasMoreCommands <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><p>Promise 对象用动宾短语的进行时表达。</p><pre class=" language-bash"><code class="language-bash">var loadingData <span class="token operator">=</span> ajax.get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>loadingData.then<span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="接口命名规范"><a href="#接口命名规范" class="headerlink" title="接口命名规范"></a><strong>接口命名规范</strong></h3><p>可读性强，见名晓义；<br>尽量不与 jQuery 社区已有的习惯冲突；<br>尽量写全。不用缩写，除非是下面列表中约定的；（变量以表达清楚为目标，uglify 会完成压缩体积工作）</p><table><thead><tr><th>常用词</th><th>说明：</th></tr></thead><tbody><tr><td>options</td><td>表示选项，与 jQuery 社区保持一致，不要用 config, opts 等</td></tr><tr><td>active</td><td>表示当前，不要用 current 等</td></tr><tr><td>index</td><td>表示索引，不要用 idx 等</td></tr><tr><td>trigger</td><td>触点元素</td></tr><tr><td>triggerType</td><td>触发类型、方式</td></tr><tr><td>context</td><td>表示传入的 this 对象</td></tr><tr><td>object</td><td>推荐写全，不推荐简写为 o, obj 等</td></tr><tr><td>element</td><td>推荐写全，不推荐简写为 el, elem 等</td></tr><tr><td>length</td><td>不要写成 len, l</td></tr><tr><td>prev</td><td>previous 的缩写</td></tr><tr><td>next</td><td>next 下一个</td></tr><tr><td>constructor</td><td>不能写成 ctor</td></tr><tr><td>easing</td><td>示动画平滑函数</td></tr><tr><td>min</td><td>minimize 的缩写</td></tr><tr><td>max</td><td>maximize 的缩写</td></tr><tr><td>DOM</td><td>不要写成 dom, Dom</td></tr><tr><td>.hbs</td><td>使用 hbs 后缀表示模版</td></tr><tr><td>btn</td><td>button 的缩写</td></tr><tr><td>link</td><td>超链接</td></tr><tr><td>title</td><td>主要文本</td></tr><tr><td>img</td><td>图片路径（img标签src属性)</td></tr><tr><td>dataset</td><td>html5 data-xxx 数据接口</td></tr><tr><td>theme</td><td>主题</td></tr><tr><td>className</td><td>类名</td></tr><tr><td>classNameSpace</td><td>class 命名空间</td></tr></tbody></table><p>** <strong>建议jquery对象命名采用 <code>$element</code>格式</strong></p><h2 id="True-和-False-布尔表达式"><a href="#True-和-False-布尔表达式" class="headerlink" title="True 和 False 布尔表达式"></a>True 和 False 布尔表达式</h2><p>类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 &#x3D;&#x3D; null。<br>下面的布尔表达式都返回 false:</p><ul><li>null</li><li>undefined</li><li>‘’ 空字符串</li><li>0 数字0</li><li>但小心下面的, 可都返回 true:</li><li>‘0’ 字符串0</li><li>[] 空数组</li><li>{} 空对象</li></ul><h2 id="不要在-Array-上使用-for-in-循环"><a href="#不要在-Array-上使用-for-in-循环" class="headerlink" title="不要在 Array 上使用 for-in 循环"></a>不要在 Array 上使用 for-in 循环</h2><p>for-in 循环只用于 object&#x2F;map&#x2F;hash 的遍历, 对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值。</p><h2 id="条件-三元-操作符"><a href="#条件-三元-操作符" class="headerlink" title="条件(三元)操作符 (?:)"></a>条件(三元)操作符 (?:)</h2><p>三元操作符用于替代 if 条件判断语句。</p><pre class=" language-bash"><code class="language-bash">// Not recommended<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> 0<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">return</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>  <span class="token keyword">return</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// Recommended<span class="token keyword">return</span> val ? foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">:</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="amp-amp-和"><a href="#amp-amp-和" class="headerlink" title="&amp;&amp; 和 ||"></a>&amp;&amp; 和 ||</h2><p>二元布尔操作符是可短路的, 只有在必要时才会计算到最后一项。</p><pre class=" language-bash"><code class="language-bash">// Not recommended<span class="token keyword">function</span> foo<span class="token punctuation">(</span>opt_win<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  var win<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opt_win<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    win <span class="token operator">=</span> opt_win<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>    win <span class="token operator">=</span> window<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  // <span class="token punctuation">..</span>.<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node.kids<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node.kids<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      foo<span class="token punctuation">(</span>node.kids<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// Recommended<span class="token keyword">function</span> foo<span class="token punctuation">(</span>opt_win<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  var win <span class="token operator">=</span> opt_win <span class="token operator">||</span> window<span class="token punctuation">;</span>  // <span class="token punctuation">..</span>.<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>var kid <span class="token operator">=</span> node <span class="token operator">&amp;&amp;</span> node.kids <span class="token operator">&amp;&amp;</span> node.kids<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>kid<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  foo<span class="token punctuation">(</span>kid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="避免不必要的DOM操作"><a href="#避免不必要的DOM操作" class="headerlink" title="避免不必要的DOM操作"></a><strong>避免不必要的DOM操作</strong></h3><p>浏览器遍历 DOM 元素的代价是昂贵的。最简单优化 DOM 树查询的方案是，当一个元素出现多次时，将它保存在一个变量中，就避免多次查询 DOM 树了。</p><pre class=" language-bash"><code class="language-bash">// goodvar myList <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>var myListHTML <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span>.innerHTML<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  myList +<span class="token operator">=</span> <span class="token string">"&lt;span>"</span> + i + <span class="token string">"&lt;/span>"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>myListHTML <span class="token operator">=</span> myList<span class="token punctuation">;</span>// bad<span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  document.getElementById<span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span>.innerHTML +<span class="token operator">=</span> <span class="token string">"&lt;span>"</span> + i + <span class="token string">"&lt;/span>"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="缓存数组长度"><a href="#缓存数组长度" class="headerlink" title="缓存数组长度"></a><strong>缓存数组长度</strong></h3><p>循环无疑是和 JavaScript 性能非常相关的一部分。通过存储数组的长度，可以有效避免每次循环重新计算。<br>注: 虽然现代浏览器引擎会自动优化这个过程，但是不要忘记还有旧的浏览器。</p><pre class=" language-bash"><code class="language-bash">var arr <span class="token operator">=</span> new Array<span class="token punctuation">(</span>1000<span class="token punctuation">)</span>,    len, i<span class="token punctuation">;</span>// good<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> 0, len <span class="token operator">=</span> arr.length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>// bad<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="异步加载第三方内容"><a href="#异步加载第三方内容" class="headerlink" title="异步加载第三方内容"></a><strong>异步加载第三方内容</strong></h3><p>当你无法保证嵌入第三方内容比如 Youtube 视频或者一个 like&#x2F;tweet 按钮可以正常工作的时候，你需要考虑用异步加载这些代码，避免阻塞整个页面加载。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var script,        scripts <span class="token operator">=</span> document.getElementsByTagName<span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> load<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      script <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      script.async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      script.src <span class="token operator">=</span> url<span class="token punctuation">;</span>      scripts.parentNode.insertBefore<span class="token punctuation">(</span>script, scripts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    load<span class="token punctuation">(</span><span class="token string">'//apis.google.com/js/plusone.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    load<span class="token punctuation">(</span><span class="token string">'//platform.twitter.com/widgets.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    load<span class="token punctuation">(</span><span class="token string">'//s.widgetsite.com/widget.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;());</span></code></pre><h3 id="避免使用-jQuery-实现动画"><a href="#避免使用-jQuery-实现动画" class="headerlink" title="避免使用 jQuery 实现动画"></a><strong>避免使用 jQuery 实现动画</strong></h3><p>禁止使用 slideUp&#x2F;Down() fadeIn&#x2F;fadeOut() 等方法；尽量不使用 animate() 方法；</p><p>在确保产品兼容性的前提下，能利用requestAnimationFrame方式、css3方式实现的动画，就尽量用以上两种方式代替jQuery实现。</p><p>requestAnimationFrame使用方法请参考：<a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/">CSS3动画那么强，requestAnimationFrame还有毛线用？-赵鑫旭</a></p><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a><strong>备注：</strong></h3><ol><li>开发环境统一严格模式，所有js文件头部统一添加<code>/*use strict*/</code>;</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css规范</title>
      <link href="/2018/04/13/cssstandard/"/>
      <url>/2018/04/13/cssstandard/</url>
      
        <content type="html"><![CDATA[<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p> id采用驼峰式命名；<br> 类名使用小写字母，以中划线分隔。</p><h2 id="正确使用-Display-的属性"><a href="#正确使用-Display-的属性" class="headerlink" title="正确使用 Display 的属性"></a>正确使用 Display 的属性</h2><p>Display 属性会影响页面的渲染，请合理使用。</p><ul><li>display: inline后不应该再使用 width、height、margin、padding 以及 float；</li><li>display: inline-block 后不应该再使用 float；</li><li>display: block 后不应该再使用 vertical-align；</li><li>display: table-* 后不应该再使用 margin 或者 float；</li></ul><h2 id="不滥用-Float"><a href="#不滥用-Float" class="headerlink" title="不滥用 Float"></a>不滥用 Float</h2><p>Float在渲染时计算量比较大，尽量减少使用。</p><h2 id="多利用硬件能力，如通过-3D-变形开启-GPU-加速"><a href="#多利用硬件能力，如通过-3D-变形开启-GPU-加速" class="headerlink" title="多利用硬件能力，如通过 3D 变形开启 GPU 加速"></a>多利用硬件能力，如通过 3D 变形开启 GPU 加速</h2><p>一般在 Chrome 中，3D或透视变换（perspective transform）CSS属性和对 opacity 进行 CSS 动画会创建新的图层，在硬件加速渲染通道的优化下，GPU 完成 3D 变形等操作后，将图层进行复合操作（Compesite Layers），从而避免触发浏览器大面积重绘和重排。<br>注：3D 变形会消耗更多的内存和功耗。<br>使用 translate3d 右移 500px 的动画流畅度要明显优于直接使用 left：</p><pre class=" language-bash"><code class="language-bash">.ball-1 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  transition: -webkit-transform .5s ease<span class="token punctuation">;</span>  -webkit-transform: translate3d<span class="token punctuation">(</span>0, 0, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>.ball-1.slidein<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  -webkit-transform: translate3d<span class="token punctuation">(</span>500px, 0, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>.ball-2 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  transition: left .5s ease<span class="token punctuation">;</span> left：0<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>.ball-2.slidein <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  left：500px<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="提升-CSS-选择器性能"><a href="#提升-CSS-选择器性能" class="headerlink" title="提升 CSS 选择器性能"></a>提升 CSS 选择器性能</h2><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免使用消耗更多匹配时间的选择器。而在这之前我们需要了解 CSS 选择器匹配的机制， 如子选择器规则：<br><code>#header &gt; a &#123;font-weight:blod;&#125;</code><br>我们中的大多数人都是从左到右的阅读习惯，会习惯性的设定浏览器也是从左到右的方式进行匹配规则，推测这条规则的开销并不高。<br>我们会假设浏览器以这样的方式工作：寻找 id 为 header 的元素，然后将样式规则应用到直系子元素中的 a 元素上。我们知道文档中只有一个 id 为 header 的元素，并且它只有几个 a 元素的子节点，所以这个 CSS 选择器应该相当高效。<br>事实上，却恰恰相反，CSS 选择器是从右到左进行规则匹配。了解这个机制后，例子中看似高效的选择器在实际中的匹配开销是很高的，浏览器必须遍历页面中所有的 a 元素并且确定其父元素的 id 是否为 header 。<br>如果把例子的子选择器改为后代选择器则会开销更多，在遍历页面中所有 a 元素后还需向其上级遍历直到根节点。<br><code>#header  a &#123;font-weight:blod;&#125;</code><br>理解了CSS选择器从右到左匹配的机制后，明白只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的选择符，或者因为不匹配而退出。我们把最右边选择符称之为关键选择器。——更多详情</p><h3 id="1-避免使用通用选择器"><a href="#1-避免使用通用选择器" class="headerlink" title="1.避免使用通用选择器"></a>1.避免使用通用选择器</h3><p>浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 content 的元素，直到文档的根节点。因此其匹配开销是非常大的，所以应避免使用关键选择器是通配选择器的情况。</p><pre class=" language-bash"><code class="language-bash">/* bad */.content * <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;color: red;&amp;#125;</span></code></pre><h3 id="2-避免使用标签或-class-选择器限制-id-选择器"><a href="#2-避免使用标签或-class-选择器限制-id-选择器" class="headerlink" title="2.避免使用标签或 class 选择器限制 id 选择器"></a>2.避免使用标签或 class 选择器限制 id 选择器</h3><pre class=" language-bash"><code class="language-bash">/* bad */button<span class="token comment" spellcheck="true">#backButton &amp;#123;…&amp;#125;</span>/* good */<span class="token comment" spellcheck="true">#newMenuIcon &amp;#123;…&amp;#125;</span></code></pre><h3 id="3-避免使用标签限制-class-选择器"><a href="#3-避免使用标签限制-class-选择器" class="headerlink" title="3. 避免使用标签限制 class 选择器"></a>3. 避免使用标签限制 class 选择器</h3><pre class=" language-bash"><code class="language-bash">/* bad */treecell.indented <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span>/* good */.treecell-indented <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span>/* better */.hierarchy-deep <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span></code></pre><h3 id="4-避免使用多层标签选择器。使用-class-选择器替换，减少css查找"><a href="#4-避免使用多层标签选择器。使用-class-选择器替换，减少css查找" class="headerlink" title="4. 避免使用多层标签选择器。使用 class 选择器替换，减少css查找"></a>4. 避免使用多层标签选择器。使用 class 选择器替换，减少css查找</h3><pre class=" language-bash"><code class="language-bash">/* bad */treeitem<span class="token punctuation">[</span>mailfolder<span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">]</span> <span class="token operator">></span> treerow <span class="token operator">></span> treecell <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span>/* good */.treecell-mailfolder <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span></code></pre><h3 id="5-避免使用子选择器"><a href="#5-避免使用子选择器" class="headerlink" title="5. 避免使用子选择器"></a>5. 避免使用子选择器</h3><pre class=" language-bash"><code class="language-bash">/* bad */treehead treerow treecell <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span>/* good */treehead <span class="token operator">></span> treerow <span class="token operator">></span> treecell <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span>/* better */.treecell-header <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;…&amp;#125;</span></code></pre><h3 id="6-使用继承"><a href="#6-使用继承" class="headerlink" title="6. 使用继承"></a>6. 使用继承</h3><pre class=" language-bash"><code class="language-bash">/* bad */<span class="token comment" spellcheck="true">#bookmarkMenuItem > .menu-left &amp;#123; list-style-image: url(blah) &amp;#125;</span>/* good */<span class="token comment" spellcheck="true">#bookmarkMenuItem &amp;#123; list-style-image: url(blah) &amp;#125;</span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>-不允许有空的规则；<br>-元素选择器用小写字母；<br>-去掉数字中不必要的小数点和末尾的0；<br>-属性值’0’后面不要加单位；<br>-同个属性不同前缀的写法需要在垂直方向保持对齐；<br>-无前缀的标准属性应该写在有前缀的属性后面；<br>-不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；<br>-不要在一个文件里出现两个相同的规则；<br>-用 border: 0; 代替 border: none;；<br>-选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；<br>-发布的代码中不要有 @import；<br>-尽量少用’*’选择器。</p><h3 id="nec-网易-的reset"><a href="#nec-网易-的reset" class="headerlink" title="nec(网易) 的reset"></a>nec(网易) 的reset</h3><pre class=" language-bash"><code class="language-bash">/* reset */html,body,h1,h2,h3,h4,h5,h6,div,dl,dt,dd,ul,ol,li,p,blockquote,pre,hr,figure,table,caption,th,td,form,fieldset,legend,input,button,textarea,menu<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;margin:0;padding:0;&amp;#125;</span>header,footer,section,article,aside,nav,hgroup,address,figure,figcaption,menu,details<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;display:block;&amp;#125;</span>table<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;border-collapse:collapse;border-spacing:0;&amp;#125;</span>caption,th<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;text-align:left;font-weight:normal;&amp;#125;</span>html,body,fieldset,img,iframe,abbr<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;border:0;&amp;#125;</span>i,cite,em,var,address,dfn<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;font-style:normal;&amp;#125;</span><span class="token punctuation">[</span>hidefocus<span class="token punctuation">]</span>,summary<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;outline:0;&amp;#125;</span>li<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;list-style:none;&amp;#125;</span>h1,h2,h3,h4,h5,h6,small<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;font-size:100%;&amp;#125;</span>sup,sub<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;font-size:83%;&amp;#125;</span>pre,code,kbd,samp<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;font-family:inherit;&amp;#125;</span>q:before,q:after<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;content:none;&amp;#125;</span>textarea<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;overflow:auto;resize:none;&amp;#125;</span>label,summary<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;cursor:default;&amp;#125;</span>a,button<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;cursor:pointer;&amp;#125;</span>h1,h2,h3,h4,h5,h6,em,strong,b<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;font-weight:bold;&amp;#125;</span>del,ins,u,s,a,a:hover<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;text-decoration:none;&amp;#125;</span>body,textarea,input,button,select,keygen,legend<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;font:12px/1.14 arial,\5b8b\4f53;color:#333;outline:0;&amp;#125;</span>body<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;background:#fff;&amp;#125;</span>a,a:hover<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;color:#333;&amp;#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html规范</title>
      <link href="/2018/04/13/htmlstandard/"/>
      <url>/2018/04/13/htmlstandard/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>head基本内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--字符编码：--<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--页面标题：--<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>青岛乘正科技有限公司<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--页面关键词：--<span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"keywords"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--页面描述内容：--<span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Description"</span> content<span class="token operator">=</span><span class="token string">"不超过150个字符"</span> /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--移动端及响应式网站：--<span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--favicon 图标：--<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"shortcut icon"</span> href<span class="token operator">=</span><span class="token string">"img/favicon.ico"</span> type<span class="token operator">=</span><span class="token string">"img/x-icon"</span> /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--bookmark 图标：--<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"bookmark"</span> href<span class="token operator">=</span><span class="token string">"img/favicon.ico"</span> type<span class="token operator">=</span><span class="token string">"img/x-icon"</span> /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--网页作者：--<span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"author"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span></code></pre><h3 id="可以选择加入的标签："><a href="#可以选择加入的标签：" class="headerlink" title="可以选择加入的标签："></a><em><strong>可以选择加入的标签</strong></em>：</h3><ul><li>1.设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"expires"</span> content<span class="token operator">=</span><span class="token string">"Wed, 26 Feb 1997 08：21：57 GMT"</span><span class="token operator">></span></code></pre><ul><li>2.禁止浏览器从本地机的缓存中调阅页面内容。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Pragma"</span> content<span class="token operator">=</span><span class="token string">"no-cache"</span><span class="token operator">></span></code></pre><ul><li>3.用来防止别人在框架里调用你的页面。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Window-target"</span> content<span class="token operator">=</span><span class="token string">"_top"</span><span class="token operator">></span></code></pre><ul><li>4.自动跳转(5 指时间停留 5 秒)。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"refresh"</span> content<span class="token operator">=</span><span class="token string">"5;url=http://www.baidu.com"</span><span class="token operator">></span></code></pre><p><em><strong>备注</strong></em><br>http缓存机制深入理解推荐文章：</p><ol><li><a href="https://www.cnblogs.com/chenqf/p/6386163.html">彻底弄懂HTTP缓存机制及原理</a></li><li><a href="https://www.cnblogs.com/vajoy/p/5341664.html">浅谈浏览器http的缓存机制</a></li></ol><h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><ul><li>1.请不要在网页中连续出现多于一个的空格，也尽量少使用全角空格（英文字符集下，全角空格会变成乱码），空白应该尽量使用 <code>text-indent</code> <code>padding</code> <code>margin</code>实现。</li><li>2.a标签无文字提示时设置title属性，img标签设置alt属性。a标签默认占位符’###’。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span> title<span class="token operator">=</span><span class="token string">"给链接文字提示"</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"图片.gif"</span> alt<span class="token operator">=</span><span class="token string">"给图片提示"</span><span class="token operator">></span><span class="token operator">&lt;</span>/a<span class="token operator">></span></code></pre><ul><li>3.尽量遵循HTML标准和语义。基本的H5语义标签。</li></ul><pre class=" language-bash"><code class="language-bash"> <span class="token variable"><span class="token variable">`</span>header<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>nav<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>section<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>artical<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>aside<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>dialog<span class="token variable">`</span></span> <span class="token variable"><span class="token variable">`</span>footer<span class="token variable">`</span></span></code></pre><ul><li>4.标签属性定义推荐顺序依次为：</li></ul><pre class=" language-bash"><code class="language-bash">  <span class="token variable"><span class="token variable">`</span><span class="token function">id</span> class name data-*<span class="token variable">`</span></span></code></pre><ul><li>5.尽量避免多余的父节点、注释节点。例：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--多余父节点--<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">&lt;</span>span<span class="token operator">></span>无用注释节点<span class="token operator">&lt;</span>/span<span class="token operator">></span>--<span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><strong>补充</strong>：</h3><ul><li>尽量采用外链css样式，避免内部及内联样式。</li><li>script统一放至body标签内最后。（此引用js方式，无需document.ready检测）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灵活的console</title>
      <link href="/2017/10/15/lhdc/"/>
      <url>/2017/10/15/lhdc/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash">//打印信息。注：%s字符串，%d数字，%c添加css样式console.log<span class="token punctuation">(</span><span class="token string">'console.log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//打印警告console.warn<span class="token punctuation">(</span><span class="token string">'console.warn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//打印domconsole.dir<span class="token punctuation">(</span>document.getElementById<span class="token punctuation">(</span><span class="token string">'a3'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//打印表格console.table<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    id: <span class="token string">'1'</span>,    name: <span class="token string">'小明'</span>,    age: <span class="token string">'18'</span>,    weight: <span class="token string">'55kg'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, &amp;#123;</span>    id: <span class="token string">'1'</span>,    name: <span class="token string">'小红'</span>,    age: <span class="token string">'17'</span>,    weight: <span class="token string">'65kg'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;], ['name', 'age']);</span>//打印非匹配。应用场景：查找差异、ajax请求数据格式差异提示。var arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span>, <span class="token string">'2'</span>, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    id: <span class="token string">'3'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;];</span>arr.forEach<span class="token punctuation">(</span>function<span class="token punctuation">(</span>item, index<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    console.assert<span class="token punctuation">(</span>typeof item <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'string'</span>, item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>//打印计数。应用场景：dom绑定事件次数监测listenerAdd<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> listenerAdd<span class="token punctuation">(</span>isfirst<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token operator">!</span>isfirst<span class="token operator">&amp;&amp;</span>console.countReset<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document.querySelector<span class="token punctuation">(</span><span class="token string">'#countAdd'</span><span class="token punctuation">)</span>.addEventListener<span class="token punctuation">(</span><span class="token string">'click'</span>, function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#123<span class="token punctuation">;</span>        console.count<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//打印操作时间getRunTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> getRunTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    console.time<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    setTimeout<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        console.timeEnd<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console.log<span class="token punctuation">(</span><span class="token string">'发现没有，时间t大于%c600ms'</span>, <span class="token string">'color:red'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, 600);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//组合打印信息group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console.group<span class="token punctuation">(</span><span class="token string">'logGroup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0, length <span class="token operator">=</span> 10<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        console.log<span class="token punctuation">(</span><span class="token string">'&lt;li>'</span> + i + <span class="token string">'&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    console.groupEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>参考文档：<br><a href="https://segmentfault.com/a/1190000018756503">灵活使用 console 让 js 调试更简单</a><br>示例：<a href="https://codepen.io/xmwarrior/pen/abzyJGL">请点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2017/07/20/themejs/"/>
      <url>/2017/07/20/themejs/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坑以来个人插件、练习整理收藏</title>
      <link href="/2017/07/20/rqzl/"/>
      <url>/2017/07/20/rqzl/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/xmGantt/index.html">甘特图</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E5%9B%BE%E5%B1%82%E9%80%89%E6%8B%A9/index.html">图层选择</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E5%A4%A7%E8%BD%AC%E7%9B%98/index.html">大转盘</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E7%BA%A2%E5%8C%85%E9%9B%A8/index.html">红包雨</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E8%BF%9E%E8%BF%9E%E7%9C%8B/index.html">连连看</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E8%BD%AE%E6%92%AD%E5%9B%BE/index.html">轮播图</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/index.html">视频播放器</a></p></li><li><p><a href="/plugins/01jquery%E6%8F%92%E4%BB%B6/%E6%9C%88%E7%AD%BE%E5%88%B0/index.html">月签到</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/canvas%E4%BA%94%E5%AD%90%E6%A3%8B/index.html">canvas五子棋</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/Audio%E6%92%AD%E6%94%BE%E5%99%A8/index.html">Audio播放器</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/canvas%E6%97%B6%E9%92%9F/index.html">canvas时钟</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/canvastab/index.html">canvastab</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/canvas%E8%B4%AA%E5%90%83%E8%9B%87/index.html">canvas贪吃蛇</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/%E8%B4%AA%E5%90%83%E8%9B%87_dom/index.html">贪吃蛇_Dom版</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/canvas%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/index.html">canvas俄罗斯方块</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/canvas%E6%8A%95%E7%AF%AE/index.html">canvas投篮</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/jquery%E6%A1%86%E6%9E%B6%E5%B0%81%E8%A3%85%E5%8E%9F%E7%90%86%E7%A4%BA%E4%BE%8B/index.html">jquery框架封装原理示例</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/jsSlide_css3/index.html">jsSlide_css3</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/jsSlide_css3&amp;toucher/index.html">jsSlide_css3toucher</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/jsSlide_multiRow&amp;toucher/index.html">jsSlide_multiRowtoucher</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/jsSlide_setInterval/index.html">jsSlide_setInterval</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/jsSlide_setInterval&amp;toucher/index.html">jsSlide_setIntervaltoucher</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/zindexSlide1/index.html">zindexSlide1</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/zindexSlide2/index.html">zindexSlide2</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/checkTime%E6%8F%92%E4%BB%B6/index.html">Mobile_checkTime</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/ajax%E5%B0%81%E8%A3%85/index.html">ajax封装</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/documentReady%E5%B0%81%E8%A3%85/index.html">documentReady封装</a></p></li><li><p><a href="/plugins/02js%E6%8F%92%E4%BB%B6/%E5%A2%9E%E5%88%A0%E8%8E%B7%E5%8F%96cookie/index.html">增删获取cookie</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/canvas%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/index.html">canvas图片合成</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/css3_3d%E6%97%8B%E8%BD%AC/index.html">css3_3d旋转</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/css3_animation%E6%99%83%E5%8A%A8/index.html">css3_animation晃动</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/css3_transition%E6%97%8B%E8%BD%AC/index.html">css3_transition旋转</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/css3_%E5%80%92%E5%BD%B1/index.html">css3_倒影</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/css3_%E4%B8%8B%E9%9B%AA/index.html">css3_下雪</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/div&amp;img_5px%E5%B7%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/index.html">div&amp;img_5px差解决方式</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/rem%E5%B8%83%E5%B1%80/index.html">rem布局</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/scrollIntoView%E6%96%B9%E6%B3%95/index.html">scrollIntoView方法</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%89%88%E6%9C%AC&amp;&amp;%E5%9E%8B%E5%8F%B7version/index.html">判断浏览器版本&amp;&amp;型号version</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E7%BD%91%E5%9D%80%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/index.html">网址生成二维码</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E9%A2%9C%E8%89%B2%E8%BD%AC%E6%8D%A2_rgb%E4%B8%8E16%E8%BF%9B%E5%88%B6/index.html">颜色转换_rgb与16进制</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6copy/index.html">一键复制copy</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E6%B1%89%E5%AD%97%E8%87%AA%E5%AE%9A%E4%B9%89sort/index.html">汉字自定义sort</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E7%A6%81%E6%AD%A2%E5%BE%AE%E4%BF%A1%E4%B8%8A%E4%B8%8B%E6%8B%89%E9%BB%91%E8%BE%B9/index.html">禁止微信上下拉黑边</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/index.html">快速排序</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E5%BE%AE%E4%BF%A1%E8%B7%B3%E8%BD%AC%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8B%E4%B8%AD%E9%97%B4%E9%A1%B5/index.html">微信跳转浏览器查看中间页</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E6%96%B0%E6%B5%AA%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE&amp;%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html">新浪接口获取地理位置&amp;服务器</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E9%A1%B5%E9%9D%A2%E6%97%A0%E5%88%B7%E6%96%B0%E8%B7%B3%E8%BD%AChistory_pushState/index.html">页面无刷新跳转history_pushState</a></p></li><li><p><a href="/plugins/04%E5%B0%8F%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/svg_DrawBuild/index.html">svg_逐步绘制建筑</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 个人轮子整理 </tag>
            
            <tag> canvas </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
